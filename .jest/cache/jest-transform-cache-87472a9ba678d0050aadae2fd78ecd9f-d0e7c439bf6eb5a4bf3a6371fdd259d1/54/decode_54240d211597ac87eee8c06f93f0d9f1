0c8f559b9f4a602098546d18499854eb
"use strict";

var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var entities_json_1 = __importDefault(require("./maps/entities.json"));

var legacy_json_1 = __importDefault(require("./maps/legacy.json"));

var xml_json_1 = __importDefault(require("./maps/xml.json"));

var decode_codepoint_1 = __importDefault(require("./decode_codepoint"));

exports.decodeXML = getStrictDecoder(xml_json_1.default);
exports.decodeHTMLStrict = getStrictDecoder(entities_json_1.default);

function getStrictDecoder(map) {
  var keys = Object.keys(map).join("|");
  var replace = getReplacer(map);
  keys += "|#[xX][\\da-fA-F]+|#\\d+";
  var re = new RegExp("&(?:" + keys + ");", "g");
  return function (str) {
    return String(str).replace(re, replace);
  };
}

var sorter = function (a, b) {
  return a < b ? 1 : -1;
};

exports.decodeHTML = function () {
  var legacy = Object.keys(legacy_json_1.default).sort(sorter);
  var keys = Object.keys(entities_json_1.default).sort(sorter);

  for (var i = 0, j = 0; i < keys.length; i++) {
    if (legacy[j] === keys[i]) {
      keys[i] += ";?";
      j++;
    } else {
      keys[i] += ";";
    }
  }

  var re = new RegExp("&(?:" + keys.join("|") + "|#[xX][\\da-fA-F]+;?|#\\d+;?)", "g");
  var replace = getReplacer(entities_json_1.default);

  function replacer(str) {
    if (str.substr(-1) !== ";") str += ";";
    return replace(str);
  } //TODO consider creating a merged map


  return function (str) {
    return String(str).replace(re, replacer);
  };
}();

function getReplacer(map) {
  return function replace(str) {
    if (str.charAt(1) === "#") {
      var secondChar = str.charAt(2);

      if (secondChar === "X" || secondChar === "x") {
        return decode_codepoint_1.default(parseInt(str.substr(3), 16));
      }

      return decode_codepoint_1.default(parseInt(str.substr(2), 10));
    }

    return map[str.slice(1, -1)];
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRlY29kZS5qcyJdLCJuYW1lcyI6WyJfX2ltcG9ydERlZmF1bHQiLCJtb2QiLCJfX2VzTW9kdWxlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJlbnRpdGllc19qc29uXzEiLCJyZXF1aXJlIiwibGVnYWN5X2pzb25fMSIsInhtbF9qc29uXzEiLCJkZWNvZGVfY29kZXBvaW50XzEiLCJkZWNvZGVYTUwiLCJnZXRTdHJpY3REZWNvZGVyIiwiZGVmYXVsdCIsImRlY29kZUhUTUxTdHJpY3QiLCJtYXAiLCJrZXlzIiwiam9pbiIsInJlcGxhY2UiLCJnZXRSZXBsYWNlciIsInJlIiwiUmVnRXhwIiwic3RyIiwiU3RyaW5nIiwic29ydGVyIiwiYSIsImIiLCJkZWNvZGVIVE1MIiwibGVnYWN5Iiwic29ydCIsImkiLCJqIiwibGVuZ3RoIiwicmVwbGFjZXIiLCJzdWJzdHIiLCJjaGFyQXQiLCJzZWNvbmRDaGFyIiwicGFyc2VJbnQiLCJzbGljZSJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0EsSUFBSUEsZUFBZSxHQUFJLFFBQVEsS0FBS0EsZUFBZCxJQUFrQyxVQUFVQyxHQUFWLEVBQWU7QUFDbkUsU0FBUUEsR0FBRyxJQUFJQSxHQUFHLENBQUNDLFVBQVosR0FBMEJELEdBQTFCLEdBQWdDO0FBQUUsZUFBV0E7QUFBYixHQUF2QztBQUNILENBRkQ7O0FBR0FFLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7QUFBRUMsRUFBQUEsS0FBSyxFQUFFO0FBQVQsQ0FBN0M7O0FBQ0EsSUFBSUMsZUFBZSxHQUFHUCxlQUFlLENBQUNRLE9BQU8sQ0FBQyxzQkFBRCxDQUFSLENBQXJDOztBQUNBLElBQUlDLGFBQWEsR0FBR1QsZUFBZSxDQUFDUSxPQUFPLENBQUMsb0JBQUQsQ0FBUixDQUFuQzs7QUFDQSxJQUFJRSxVQUFVLEdBQUdWLGVBQWUsQ0FBQ1EsT0FBTyxDQUFDLGlCQUFELENBQVIsQ0FBaEM7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QUFrQixHQUF0QixFQUEyQjtBQUN2QixVQUFJQyxVQUFVLEdBQUdkLEdBQUcsQ0FBQ2EsTUFBSixDQUFXLENBQVgsQ0FBakI7O0FBQ0EsVUFBSUMsVUFBVSxLQUFLLEdBQWYsSUFBc0JBLFVBQVUsS0FBSyxHQUF6QyxFQUE4QztBQUMxQyxlQUFPMUIsa0JBQWtCLENBQUNHLE9BQW5CLENBQTJCd0IsUUFBUSxDQUFDZixHQUFHLENBQUNZLE1BQUosQ0FBVyxDQUFYLENBQUQsRUFBZ0IsRUFBaEIsQ0FBbkMsQ0FBUDtBQUNIOztBQUNELGFBQU94QixrQkFBa0IsQ0FBQ0csT0FBbkIsQ0FBMkJ3QixRQUFRLENBQUNmLEdBQUcsQ0FBQ1ksTUFBSixDQUFXLENBQVgsQ0FBRCxFQUFnQixFQUFoQixDQUFuQyxDQUFQO0FBQ0g7O0FBQ0QsV0FBT25CLEdBQUcsQ0FBQ08sR0FBRyxDQUFDZ0IsS0FBSixDQUFVLENBQVYsRUFBYSxDQUFDLENBQWQsQ0FBRCxDQUFWO0FBQ0gsR0FURDtBQVVIIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgZW50aXRpZXNfanNvbl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL21hcHMvZW50aXRpZXMuanNvblwiKSk7XG52YXIgbGVnYWN5X2pzb25fMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9tYXBzL2xlZ2FjeS5qc29uXCIpKTtcbnZhciB4bWxfanNvbl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL21hcHMveG1sLmpzb25cIikpO1xudmFyIGRlY29kZV9jb2RlcG9pbnRfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9kZWNvZGVfY29kZXBvaW50XCIpKTtcbmV4cG9ydHMuZGVjb2RlWE1MID0gZ2V0U3RyaWN0RGVjb2Rlcih4bWxfanNvbl8xLmRlZmF1bHQpO1xuZXhwb3J0cy5kZWNvZGVIVE1MU3RyaWN0ID0gZ2V0U3RyaWN0RGVjb2RlcihlbnRpdGllc19qc29uXzEuZGVmYXVsdCk7XG5mdW5jdGlvbiBnZXRTdHJpY3REZWNvZGVyKG1hcCkge1xuICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMobWFwKS5qb2luKFwifFwiKTtcbiAgICB2YXIgcmVwbGFjZSA9IGdldFJlcGxhY2VyKG1hcCk7XG4gICAga2V5cyArPSBcInwjW3hYXVtcXFxcZGEtZkEtRl0rfCNcXFxcZCtcIjtcbiAgICB2YXIgcmUgPSBuZXcgUmVnRXhwKFwiJig/OlwiICsga2V5cyArIFwiKTtcIiwgXCJnXCIpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoc3RyKSB7IHJldHVybiBTdHJpbmcoc3RyKS5yZXBsYWNlKHJlLCByZXBsYWNlKTsgfTtcbn1cbnZhciBzb3J0ZXIgPSBmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gKGEgPCBiID8gMSA6IC0xKTsgfTtcbmV4cG9ydHMuZGVjb2RlSFRNTCA9IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGxlZ2FjeSA9IE9iamVjdC5rZXlzKGxlZ2FjeV9qc29uXzEuZGVmYXVsdCkuc29ydChzb3J0ZXIpO1xuICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZW50aXRpZXNfanNvbl8xLmRlZmF1bHQpLnNvcnQoc29ydGVyKTtcbiAgICBmb3IgKHZhciBpID0gMCwgaiA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChsZWdhY3lbal0gPT09IGtleXNbaV0pIHtcbiAgICAgICAgICAgIGtleXNbaV0gKz0gXCI7P1wiO1xuICAgICAgICAgICAgaisrO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAga2V5c1tpXSArPSBcIjtcIjtcbiAgICAgICAgfVxuICAgIH1cbiAgICB2YXIgcmUgPSBuZXcgUmVnRXhwKFwiJig/OlwiICsga2V5cy5qb2luKFwifFwiKSArIFwifCNbeFhdW1xcXFxkYS1mQS1GXSs7P3wjXFxcXGQrOz8pXCIsIFwiZ1wiKTtcbiAgICB2YXIgcmVwbGFjZSA9IGdldFJlcGxhY2VyKGVudGl0aWVzX2pzb25fMS5kZWZhdWx0KTtcbiAgICBmdW5jdGlvbiByZXBsYWNlcihzdHIpIHtcbiAgICAgICAgaWYgKHN0ci5zdWJzdHIoLTEpICE9PSBcIjtcIilcbiAgICAgICAgICAgIHN0ciArPSBcIjtcIjtcbiAgICAgICAgcmV0dXJuIHJlcGxhY2Uoc3RyKTtcbiAgICB9XG4gICAgLy9UT0RPIGNvbnNpZGVyIGNyZWF0aW5nIGEgbWVyZ2VkIG1hcFxuICAgIHJldHVybiBmdW5jdGlvbiAoc3RyKSB7IHJldHVybiBTdHJpbmcoc3RyKS5yZXBsYWNlKHJlLCByZXBsYWNlcik7IH07XG59KSgpO1xuZnVuY3Rpb24gZ2V0UmVwbGFjZXIobWFwKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHJlcGxhY2Uoc3RyKSB7XG4gICAgICAgIGlmIChzdHIuY2hhckF0KDEpID09PSBcIiNcIikge1xuICAgICAgICAgICAgdmFyIHNlY29uZENoYXIgPSBzdHIuY2hhckF0KDIpO1xuICAgICAgICAgICAgaWYgKHNlY29uZENoYXIgPT09IFwiWFwiIHx8IHNlY29uZENoYXIgPT09IFwieFwiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRlY29kZV9jb2RlcG9pbnRfMS5kZWZhdWx0KHBhcnNlSW50KHN0ci5zdWJzdHIoMyksIDE2KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZGVjb2RlX2NvZGVwb2ludF8xLmRlZmF1bHQocGFyc2VJbnQoc3RyLnN1YnN0cigyKSwgMTApKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWFwW3N0ci5zbGljZSgxLCAtMSldO1xuICAgIH07XG59XG4iXX0=