ea468d0a8f6225f5c53b9e97d5e2f121
/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max;
/**
 * This function is like `composeArgs` except that the arguments composition
 * is tailored for `_.partialRight`.
 *
 * @private
 * @param {Array} args The provided arguments.
 * @param {Array} partials The arguments to append to those provided.
 * @param {Array} holders The `partials` placeholder indexes.
 * @params {boolean} [isCurried] Specify composing for a curried function.
 * @returns {Array} Returns the new array of composed arguments.
 */

function composeArgsRight(args, partials, holders, isCurried) {
  var argsIndex = -1,
      argsLength = args.length,
      holdersIndex = -1,
      holdersLength = holders.length,
      rightIndex = -1,
      rightLength = partials.length,
      rangeLength = nativeMax(argsLength - holdersLength, 0),
      result = Array(rangeLength + rightLength),
      isUncurried = !isCurried;

  while (++argsIndex < rangeLength) {
    result[argsIndex] = args[argsIndex];
  }

  var offset = argsIndex;

  while (++rightIndex < rightLength) {
    result[offset + rightIndex] = partials[rightIndex];
  }

  while (++holdersIndex < holdersLength) {
    if (isUncurried || argsIndex < argsLength) {
      result[offset + holders[holdersIndex]] = args[argsIndex++];
    }
  }

  return result;
}

module.exports = composeArgsRight;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIl9jb21wb3NlQXJnc1JpZ2h0LmpzIl0sIm5hbWVzIjpbIm5hdGl2ZU1heCIsIk1hdGgiLCJtYXgiLCJjb21wb3NlQXJnc1JpZ2h0IiwiYXJncyIsInBhcnRpYWxzIiwiaG9sZGVycyIsImlzQ3VycmllZCIsImFyZ3NJbmRleCIsImFyZ3NMZW5ndGgiLCJsZW5ndGgiLCJob2xkZXJzSW5kZXgiLCJob2xkZXJzTGVuZ3RoIiwicmlnaHRJbmRleCIsInJpZ2h0TGVuZ3RoIiwicmFuZ2VMZW5ndGgiLCJyZXN1bHQiLCJBcnJheSIsImlzVW5jdXJyaWVkIiwib2Zmc2V0IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxJQUFJQSxTQUFTLEdBQUdDLElBQUksQ0FBQ0MsR0FBckI7QUFFQTs7Ozs7Ozs7Ozs7O0FBV0EsU0FBU0MsZ0JBQVQsQ0FBMEJDLElBQTFCLEVBQWdDQyxRQUFoQyxFQUEwQ0MsT0FBMUMsRUFBbURDLFNBQW5ELEVBQThEO0FBQzVELE1BQUlDLFNBQVMsR0FBRyxDQUFDLENBQWpCO0FBQUEsTUFDSUMsVUFBVSxHQUFHTCxJQUFJLENBQUNNLE1BRHRCO0FBQUEsTUFFSUMsWUFBWSxHQUFHLENBQUMsQ0FGcEI7QUFBQSxNQUdJQyxhQUFhLEdBQUdOLE9BQU8sQ0FBQ0ksTUFINUI7QUFBQSxNQUlJRyxVQUFVLEdBQUcsQ0FBQyxDQUpsQjtBQUFBLE1BS0lDLFdBQVcsR0FBR1QsUUFBUSxDQUFDSyxNQUwzQjtBQUFBLE1BTUlLLFdBQVcsR0FBR2YsU0FBUyxDQUFDUyxVQUFVLEdBQUdHLGFBQWQsRUFBNkIsQ0FBN0IsQ0FOM0I7QUFBQSxNQU9JSSxNQUFNLEdBQUdDLEtBQUssQ0FBQ0YsV0FBVyxHQUFHRCxXQUFmLENBUGxCO0FBQUEsTUFRSUksV0FBVyxHQUFHLENBQUNYLFNBUm5COztBQVVBLFNBQU8sRUFBRUMsU0FBRixHQUFjTyxXQUFyQixFQUFrQztBQUNoQ0MsSUFBQUEsTUFBTSxDQUFDUixTQUFELENBQU4sR0FBb0JKLElBQUksQ0FBQ0ksU0FBRCxDQUF4QjtBQUNEOztBQUNELE1BQUlXLE1BQU0sR0FBR1gsU0FBYjs7QUFDQSxTQUFPLEVBQUVLLFVBQUYsR0FBZUMsV0FBdEIsRUFBbUM7QUFDakNFLElBQUFBLE1BQU0sQ0FBQ0csTUFBTSxHQUFHTixVQUFWLENBQU4sR0FBOEJSLFFBQVEsQ0FBQ1EsVUFBRCxDQUF0QztBQUNEOztBQUNELFNBQU8sRUFBRUYsWUFBRixHQUFpQkMsYUFBeEIsRUFBdUM7QUFDckMsUUFBSU0sV0FBVyxJQUFJVixTQUFTLEdBQUdDLFVBQS9CLEVBQTJDO0FBQ3pDTyxNQUFBQSxNQUFNLENBQUNHLE1BQU0sR0FBR2IsT0FBTyxDQUFDSyxZQUFELENBQWpCLENBQU4sR0FBeUNQLElBQUksQ0FBQ0ksU0FBUyxFQUFWLENBQTdDO0FBQ0Q7QUFDRjs7QUFDRCxTQUFPUSxNQUFQO0FBQ0Q7O0FBRURJLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQmxCLGdCQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVNYXggPSBNYXRoLm1heDtcblxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2UgYGNvbXBvc2VBcmdzYCBleGNlcHQgdGhhdCB0aGUgYXJndW1lbnRzIGNvbXBvc2l0aW9uXG4gKiBpcyB0YWlsb3JlZCBmb3IgYF8ucGFydGlhbFJpZ2h0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJncyBUaGUgcHJvdmlkZWQgYXJndW1lbnRzLlxuICogQHBhcmFtIHtBcnJheX0gcGFydGlhbHMgVGhlIGFyZ3VtZW50cyB0byBhcHBlbmQgdG8gdGhvc2UgcHJvdmlkZWQuXG4gKiBAcGFyYW0ge0FycmF5fSBob2xkZXJzIFRoZSBgcGFydGlhbHNgIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gKiBAcGFyYW1zIHtib29sZWFufSBbaXNDdXJyaWVkXSBTcGVjaWZ5IGNvbXBvc2luZyBmb3IgYSBjdXJyaWVkIGZ1bmN0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgY29tcG9zZWQgYXJndW1lbnRzLlxuICovXG5mdW5jdGlvbiBjb21wb3NlQXJnc1JpZ2h0KGFyZ3MsIHBhcnRpYWxzLCBob2xkZXJzLCBpc0N1cnJpZWQpIHtcbiAgdmFyIGFyZ3NJbmRleCA9IC0xLFxuICAgICAgYXJnc0xlbmd0aCA9IGFyZ3MubGVuZ3RoLFxuICAgICAgaG9sZGVyc0luZGV4ID0gLTEsXG4gICAgICBob2xkZXJzTGVuZ3RoID0gaG9sZGVycy5sZW5ndGgsXG4gICAgICByaWdodEluZGV4ID0gLTEsXG4gICAgICByaWdodExlbmd0aCA9IHBhcnRpYWxzLmxlbmd0aCxcbiAgICAgIHJhbmdlTGVuZ3RoID0gbmF0aXZlTWF4KGFyZ3NMZW5ndGggLSBob2xkZXJzTGVuZ3RoLCAwKSxcbiAgICAgIHJlc3VsdCA9IEFycmF5KHJhbmdlTGVuZ3RoICsgcmlnaHRMZW5ndGgpLFxuICAgICAgaXNVbmN1cnJpZWQgPSAhaXNDdXJyaWVkO1xuXG4gIHdoaWxlICgrK2FyZ3NJbmRleCA8IHJhbmdlTGVuZ3RoKSB7XG4gICAgcmVzdWx0W2FyZ3NJbmRleF0gPSBhcmdzW2FyZ3NJbmRleF07XG4gIH1cbiAgdmFyIG9mZnNldCA9IGFyZ3NJbmRleDtcbiAgd2hpbGUgKCsrcmlnaHRJbmRleCA8IHJpZ2h0TGVuZ3RoKSB7XG4gICAgcmVzdWx0W29mZnNldCArIHJpZ2h0SW5kZXhdID0gcGFydGlhbHNbcmlnaHRJbmRleF07XG4gIH1cbiAgd2hpbGUgKCsraG9sZGVyc0luZGV4IDwgaG9sZGVyc0xlbmd0aCkge1xuICAgIGlmIChpc1VuY3VycmllZCB8fCBhcmdzSW5kZXggPCBhcmdzTGVuZ3RoKSB7XG4gICAgICByZXN1bHRbb2Zmc2V0ICsgaG9sZGVyc1tob2xkZXJzSW5kZXhdXSA9IGFyZ3NbYXJnc0luZGV4KytdO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbXBvc2VBcmdzUmlnaHQ7XG4iXX0=