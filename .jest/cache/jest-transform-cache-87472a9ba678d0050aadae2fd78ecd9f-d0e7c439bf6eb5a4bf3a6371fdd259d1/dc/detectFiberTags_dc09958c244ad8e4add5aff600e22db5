a7b5b8b4b16620f2c510d55ce68aa42c
'use strict';

var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _enzymeAdapterUtils = require('enzyme-adapter-utils');

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    'default': obj
  };
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

function getFiber(element) {
  var container = global.document.createElement('div');
  var inst = null;

  var Tester = function (_React$Component) {
    _inherits(Tester, _React$Component);

    function Tester() {
      _classCallCheck(this, Tester);

      return _possibleConstructorReturn(this, (Tester.__proto__ || Object.getPrototypeOf(Tester)).apply(this, arguments));
    }

    _createClass(Tester, [{
      key: 'render',
      value: function () {
        function render() {
          inst = this;
          return element;
        }

        return render;
      }()
    }]);

    return Tester;
  }(_react2['default'].Component);

  _reactDom2['default'].render(_react2['default'].createElement(Tester), container);

  return inst._reactInternalFiber.child;
}

function getLazyFiber(LazyComponent) {
  var container = global.document.createElement('div');
  var inst = null; // eslint-disable-next-line react/prefer-stateless-function

  var Tester = function (_React$Component2) {
    _inherits(Tester, _React$Component2);

    function Tester() {
      _classCallCheck(this, Tester);

      return _possibleConstructorReturn(this, (Tester.__proto__ || Object.getPrototypeOf(Tester)).apply(this, arguments));
    }

    _createClass(Tester, [{
      key: 'render',
      value: function () {
        function render() {
          inst = this;
          return _react2['default'].createElement(LazyComponent);
        }

        return render;
      }()
    }]);

    return Tester;
  }(_react2['default'].Component); // eslint-disable-next-line react/prefer-stateless-function


  var SuspenseWrapper = function (_React$Component3) {
    _inherits(SuspenseWrapper, _React$Component3);

    function SuspenseWrapper() {
      _classCallCheck(this, SuspenseWrapper);

      return _possibleConstructorReturn(this, (SuspenseWrapper.__proto__ || Object.getPrototypeOf(SuspenseWrapper)).apply(this, arguments));
    }

    _createClass(SuspenseWrapper, [{
      key: 'render',
      value: function () {
        function render() {
          return _react2['default'].createElement(_react2['default'].Suspense, {
            fallback: false
          }, _react2['default'].createElement(Tester));
        }

        return render;
      }()
    }]);

    return SuspenseWrapper;
  }(_react2['default'].Component);

  _reactDom2['default'].render(_react2['default'].createElement(SuspenseWrapper), container);

  return inst._reactInternalFiber.child;
}

module.exports = function () {
  function detectFiberTags() {
    var supportsMode = typeof _react2['default'].StrictMode !== 'undefined';
    var supportsContext = typeof _react2['default'].createContext !== 'undefined';
    var supportsForwardRef = typeof _react2['default'].forwardRef !== 'undefined';
    var supportsMemo = typeof _react2['default'].memo !== 'undefined';
    var supportsProfiler = typeof _react2['default'].unstable_Profiler !== 'undefined' || typeof _react2['default'].Profiler !== 'undefined';
    var supportsSuspense = typeof _react2['default'].Suspense !== 'undefined';
    var supportsLazy = typeof _react2['default'].lazy !== 'undefined';

    function Fn() {
      return null;
    } // eslint-disable-next-line react/prefer-stateless-function


    var Cls = function (_React$Component4) {
      _inherits(Cls, _React$Component4);

      function Cls() {
        _classCallCheck(this, Cls);

        return _possibleConstructorReturn(this, (Cls.__proto__ || Object.getPrototypeOf(Cls)).apply(this, arguments));
      }

      _createClass(Cls, [{
        key: 'render',
        value: function () {
          function render() {
            return null;
          }

          return render;
        }()
      }]);

      return Cls;
    }(_react2['default'].Component);

    var Ctx = null;
    var FwdRef = null;
    var LazyComponent = null;

    if (supportsContext) {
      Ctx = _react2['default'].createContext();
    }

    if (supportsForwardRef) {
      // React will warn if we don't have both arguments.
      // eslint-disable-next-line no-unused-vars
      FwdRef = _react2['default'].forwardRef(function (props, ref) {
        return null;
      });
    }

    if (supportsLazy) {
      LazyComponent = _react2['default'].lazy(function () {
        return (0, _enzymeAdapterUtils.fakeDynamicImport)(function () {
          return null;
        });
      });
    }

    return {
      HostRoot: getFiber('test')['return']['return'].tag,
      // Go two levels above to find the root
      ClassComponent: getFiber(_react2['default'].createElement(Cls)).tag,
      Fragment: getFiber([['nested']]).tag,
      FunctionalComponent: getFiber(_react2['default'].createElement(Fn)).tag,
      MemoSFC: supportsMemo ? getFiber(_react2['default'].createElement(_react2['default'].memo(Fn))).tag : -1,
      MemoClass: supportsMemo ? getFiber(_react2['default'].createElement(_react2['default'].memo(Cls))).tag : -1,
      HostPortal: getFiber(_reactDom2['default'].createPortal(null, global.document.createElement('div'))).tag,
      HostComponent: getFiber(_react2['default'].createElement('span')).tag,
      HostText: getFiber('text').tag,
      Mode: supportsMode ? getFiber(_react2['default'].createElement(_react2['default'].StrictMode)).tag : -1,
      ContextConsumer: supportsContext ? getFiber(_react2['default'].createElement(Ctx.Consumer, null, function () {
        return null;
      })).tag : -1,
      ContextProvider: supportsContext ? getFiber(_react2['default'].createElement(Ctx.Provider, {
        value: null
      }, null)).tag : -1,
      ForwardRef: supportsForwardRef ? getFiber(_react2['default'].createElement(FwdRef)).tag : -1,
      Profiler: supportsProfiler ? getFiber(_react2['default'].createElement(_react2['default'].Profiler || _react2['default'].unstable_Profiler, {
        id: 'mock',
        onRender: function () {
          function onRender() {}

          return onRender;
        }()
      })).tag : -1,
      Suspense: supportsSuspense ? getFiber(_react2['default'].createElement(_react2['default'].Suspense, {
        fallback: false
      })).tag : -1,
      Lazy: supportsLazy ? getLazyFiber(LazyComponent).tag : -1
    };
  }

  return detectFiberTags;
}(); //# sourceMappingURL=detectFiberTags.js.map
//# sourceMappingURL=data:application/json;charset=utf-8;base64,