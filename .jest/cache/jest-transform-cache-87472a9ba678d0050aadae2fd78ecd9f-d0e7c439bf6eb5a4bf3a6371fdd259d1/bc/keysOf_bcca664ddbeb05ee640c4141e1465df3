b8da342f4f341ab79f49c1076111ce93
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = keysOfValidator;

var _isPrimitive = _interopRequireDefault(require("./helpers/isPrimitive"));

var _wrapValidator = _interopRequireDefault(require("./helpers/wrapValidator"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function keysOfValidator(propType) {
  var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'keysOf';

  if (typeof propType !== 'function') {
    throw new TypeError('argument to keysOf must be a valid PropType function');
  }

  var validator = function keysOf(props, propName, componentName, location, propFullName) {
    for (var _len = arguments.length, rest = new Array(_len > 5 ? _len - 5 : 0), _key = 5; _key < _len; _key++) {
      rest[_key - 5] = arguments[_key];
    }

    var propValue = props[propName];

    if (propValue == null || (0, _isPrimitive["default"])(propValue)) {
      return null;
    }

    var firstError = null;
    Object.keys(propValue).some(function (key) {
      firstError = propType.apply(void 0, [_defineProperty({}, key, key), key, componentName, location, "(".concat(propFullName, ").").concat(key)].concat(rest));
      return firstError != null;
    });
    return firstError || null;
  };

  validator.isRequired = function keyedByRequired(props, propName, componentName) {
    var propValue = props[propName];

    if (propValue == null) {
      return new TypeError("".concat(componentName, ": ").concat(propName, " is required, but value is ").concat(propValue));
    }

    for (var _len2 = arguments.length, rest = new Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {
      rest[_key2 - 3] = arguments[_key2];
    }

    return validator.apply(void 0, [props, propName, componentName].concat(rest));
  };

  return (0, _wrapValidator["default"])(validator, name, propType);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9rZXlzT2YuanMiXSwibmFtZXMiOlsibmFtZSIsInZhbGlkYXRvciIsInJlc3QiLCJwcm9wVmFsdWUiLCJwcm9wcyIsImZpcnN0RXJyb3IiLCJPYmplY3QiLCJwcm9wVHlwZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLElBQUEsWUFBQSxHQUFBLHNCQUFBLENBQUEsT0FBQSxDQUFBLHVCQUFBLENBQUEsQ0FBQTs7QUFDQSxJQUFBLGNBQUEsR0FBQSxzQkFBQSxDQUFBLE9BQUEsQ0FBQSx5QkFBQSxDQUFBLENBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRWUsU0FBQSxlQUFBLENBQUEsUUFBQSxFQUFvRDtBQUFBLE1BQWpCQSxJQUFpQixHQUFBLFNBQUEsQ0FBQSxNQUFBLEdBQUEsQ0FBQSxJQUFBLFNBQUEsQ0FBQSxDQUFBLENBQUEsS0FBQSxTQUFBLEdBQUEsU0FBQSxDQUFBLENBQUEsQ0FBQSxHQUFWLFFBQVU7O0FBQ2pFLE1BQUksT0FBQSxRQUFBLEtBQUosVUFBQSxFQUFvQztBQUNsQyxVQUFNLElBQUEsU0FBQSxDQUFOLHNEQUFNLENBQU47QUFDRDs7QUFFRCxNQUFNQyxTQUFTLEdBQUcsU0FBQSxNQUFBLENBQUEsS0FBQSxFQUFBLFFBQUEsRUFBQSxhQUFBLEVBQUEsUUFBQSxFQUFBLFlBQUEsRUFPaEI7QUFBQSxTQUFBLElBQUEsSUFBQSxHQUFBLFNBQUEsQ0FBQSxNQUFBLEVBREdDLElBQ0gsR0FBQSxJQUFBLEtBQUEsQ0FBQSxJQUFBLEdBQUEsQ0FBQSxHQUFBLElBQUEsR0FBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBLEVBQUEsSUFBQSxHQUFBLENBQUEsRUFBQSxJQUFBLEdBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxFQUFBO0FBREdBLE1BQUFBLElBQ0gsQ0FBQSxJQUFBLEdBQUEsQ0FBQSxDQURHQSxHQUNILFNBQUEsQ0FBQSxJQUFBLENBREdBO0FBQ0g7O0FBQUEsUUFDb0JDLFNBRHBCLEdBQ2tDQyxLQURsQyxDQUFBLFFBQUEsQ0FBQTs7QUFHQSxRQUFJRCxTQUFTLElBQVRBLElBQUFBLElBQXFCLENBQUEsR0FBQSxZQUFBLENBQUEsU0FBQSxDQUFBLEVBQXpCLFNBQXlCLENBQXpCLEVBQWlEO0FBQy9DLGFBQUEsSUFBQTtBQUNEOztBQUVELFFBQUlFLFVBQVUsR0FBZCxJQUFBO0FBQ0FDLElBQUFBLE1BQU0sQ0FBTkEsSUFBQUEsQ0FBQUEsU0FBQUEsRUFBQUEsSUFBQUEsQ0FBNEIsVUFBQSxHQUFBLEVBQVM7QUFDbkNELE1BQUFBLFVBQVUsR0FBR0UsUUFBUSxDQUFSQSxLQUFBQSxDQUFBQSxLQUFBQSxDQUFBQSxFQUFBQSxDQUFBQSxlQUFBQSxDQUFBQSxFQUFBQSxFQUFBQSxHQUFBQSxFQUFBQSxHQUFBQSxDQUFBQSxFQUFBQSxHQUFBQSxFQUFBQSxhQUFBQSxFQUFBQSxRQUFBQSxFQUFBQSxJQUFBQSxNQUFBQSxDQUFBQSxZQUFBQSxFQUFBQSxJQUFBQSxFQUFBQSxNQUFBQSxDQUFBQSxHQUFBQSxDQUFBQSxFQUFBQSxNQUFBQSxDQUFiRixJQUFhRSxDQUFBQSxDQUFiRjtBQVFBLGFBQU9BLFVBQVUsSUFBakIsSUFBQTtBQVRGQyxLQUFBQTtBQVdBLFdBQU9ELFVBQVUsSUFBakIsSUFBQTtBQTFCRixHQUFBOztBQTZCQUosRUFBQUEsU0FBUyxDQUFUQSxVQUFBQSxHQUF1QixTQUFBLGVBQUEsQ0FBQSxLQUFBLEVBQUEsUUFBQSxFQUFBLGFBQUEsRUFBa0U7QUFBQSxRQUNuRUUsU0FEbUUsR0FDckRDLEtBRHFELENBQUEsUUFBQSxDQUFBOztBQUd2RixRQUFJRCxTQUFTLElBQWIsSUFBQSxFQUF1QjtBQUNyQixhQUFPLElBQUEsU0FBQSxDQUFBLEdBQUEsTUFBQSxDQUFBLGFBQUEsRUFBQSxJQUFBLEVBQUEsTUFBQSxDQUFBLFFBQUEsRUFBQSw2QkFBQSxFQUFBLE1BQUEsQ0FBUCxTQUFPLENBQUEsQ0FBUDtBQUNEOztBQUxzRixTQUFBLElBQUEsS0FBQSxHQUFBLFNBQUEsQ0FBQSxNQUFBLEVBQU5ELElBQU0sR0FBQSxJQUFBLEtBQUEsQ0FBQSxLQUFBLEdBQUEsQ0FBQSxHQUFBLEtBQUEsR0FBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBLEVBQUEsS0FBQSxHQUFBLENBQUEsRUFBQSxLQUFBLEdBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxFQUFBO0FBQU5BLE1BQUFBLElBQU0sQ0FBQSxLQUFBLEdBQUEsQ0FBQSxDQUFOQSxHQUFNLFNBQUEsQ0FBQSxLQUFBLENBQU5BO0FBQU07O0FBT3ZGLFdBQU9ELFNBQVMsQ0FBVEEsS0FBQUEsQ0FBQUEsS0FBQUEsQ0FBQUEsRUFBQUEsQ0FBQUEsS0FBQUEsRUFBQUEsUUFBQUEsRUFBQUEsYUFBQUEsRUFBQUEsTUFBQUEsQ0FBUCxJQUFPQSxDQUFBQSxDQUFQO0FBUEZBLEdBQUFBOztBQVVBLFNBQU8sQ0FBQSxHQUFBLGNBQUEsQ0FBQSxTQUFBLENBQUEsRUFBQSxTQUFBLEVBQUEsSUFBQSxFQUFQLFFBQU8sQ0FBUDtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGlzUHJpbWl0aXZlIGZyb20gJy4vaGVscGVycy9pc1ByaW1pdGl2ZSc7XG5pbXBvcnQgd3JhcFZhbGlkYXRvciBmcm9tICcuL2hlbHBlcnMvd3JhcFZhbGlkYXRvcic7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGtleXNPZlZhbGlkYXRvcihwcm9wVHlwZSwgbmFtZSA9ICdrZXlzT2YnKSB7XG4gIGlmICh0eXBlb2YgcHJvcFR5cGUgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdhcmd1bWVudCB0byBrZXlzT2YgbXVzdCBiZSBhIHZhbGlkIFByb3BUeXBlIGZ1bmN0aW9uJyk7XG4gIH1cblxuICBjb25zdCB2YWxpZGF0b3IgPSBmdW5jdGlvbiBrZXlzT2YoXG4gICAgcHJvcHMsXG4gICAgcHJvcE5hbWUsXG4gICAgY29tcG9uZW50TmFtZSxcbiAgICBsb2NhdGlvbixcbiAgICBwcm9wRnVsbE5hbWUsXG4gICAgLi4ucmVzdFxuICApIHtcbiAgICBjb25zdCB7IFtwcm9wTmFtZV06IHByb3BWYWx1ZSB9ID0gcHJvcHM7XG5cbiAgICBpZiAocHJvcFZhbHVlID09IG51bGwgfHwgaXNQcmltaXRpdmUocHJvcFZhbHVlKSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgbGV0IGZpcnN0RXJyb3IgPSBudWxsO1xuICAgIE9iamVjdC5rZXlzKHByb3BWYWx1ZSkuc29tZSgoa2V5KSA9PiB7XG4gICAgICBmaXJzdEVycm9yID0gcHJvcFR5cGUoXG4gICAgICAgIHsgW2tleV06IGtleSB9LFxuICAgICAgICBrZXksXG4gICAgICAgIGNvbXBvbmVudE5hbWUsXG4gICAgICAgIGxvY2F0aW9uLFxuICAgICAgICBgKCR7cHJvcEZ1bGxOYW1lfSkuJHtrZXl9YCxcbiAgICAgICAgLi4ucmVzdCxcbiAgICAgICk7XG4gICAgICByZXR1cm4gZmlyc3RFcnJvciAhPSBudWxsO1xuICAgIH0pO1xuICAgIHJldHVybiBmaXJzdEVycm9yIHx8IG51bGw7XG4gIH07XG5cbiAgdmFsaWRhdG9yLmlzUmVxdWlyZWQgPSBmdW5jdGlvbiBrZXllZEJ5UmVxdWlyZWQocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCAuLi5yZXN0KSB7XG4gICAgY29uc3QgeyBbcHJvcE5hbWVdOiBwcm9wVmFsdWUgfSA9IHByb3BzO1xuXG4gICAgaWYgKHByb3BWYWx1ZSA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gbmV3IFR5cGVFcnJvcihgJHtjb21wb25lbnROYW1lfTogJHtwcm9wTmFtZX0gaXMgcmVxdWlyZWQsIGJ1dCB2YWx1ZSBpcyAke3Byb3BWYWx1ZX1gKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsaWRhdG9yKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgLi4ucmVzdCk7XG4gIH07XG5cbiAgcmV0dXJuIHdyYXBWYWxpZGF0b3IodmFsaWRhdG9yLCBuYW1lLCBwcm9wVHlwZSk7XG59XG4iXX0=