c8748c28e5e3632aabbc59013d64ad50
'use strict';

var Mixin = require('../../utils/mixin'),
    inherits = require('util').inherits,
    UNICODE = require('../../common/unicode'); //Aliases


var $ = UNICODE.CODE_POINTS;

var PositionTrackingPreprocessorMixin = module.exports = function (preprocessor) {
  // NOTE: avoid installing tracker twice
  if (!preprocessor.__locTracker) {
    preprocessor.__locTracker = this;
    Mixin.call(this, preprocessor);
    this.preprocessor = preprocessor;
    this.isEol = false;
    this.lineStartPos = 0;
    this.droppedBufferSize = 0;
    this.col = -1;
    this.line = 1;
  }

  return preprocessor.__locTracker;
};

inherits(PositionTrackingPreprocessorMixin, Mixin);
Object.defineProperty(PositionTrackingPreprocessorMixin.prototype, 'offset', {
  get: function () {
    return this.droppedBufferSize + this.preprocessor.pos;
  }
});

PositionTrackingPreprocessorMixin.prototype._getOverriddenMethods = function (mxn, orig) {
  return {
    advance: function () {
      var cp = orig.advance.call(this); //NOTE: LF should be in the last column of the line

      if (mxn.isEol) {
        mxn.isEol = false;
        mxn.line++;
        mxn.lineStartPos = mxn.offset;
      }

      if (cp === $.LINE_FEED) mxn.isEol = true;
      mxn.col = mxn.offset - mxn.lineStartPos + 1;
      return cp;
    },
    retreat: function () {
      orig.retreat.call(this);
      mxn.isEol = false;
      mxn.col = mxn.offset - mxn.lineStartPos + 1;
    },
    dropParsedChunk: function () {
      var prevPos = this.pos;
      orig.dropParsedChunk.call(this);
      mxn.droppedBufferSize += prevPos - this.pos;
    }
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInByZXByb2Nlc3Nvcl9taXhpbi5qcyJdLCJuYW1lcyI6WyJNaXhpbiIsInJlcXVpcmUiLCJpbmhlcml0cyIsIlVOSUNPREUiLCIkIiwiQ09ERV9QT0lOVFMiLCJQb3NpdGlvblRyYWNraW5nUHJlcHJvY2Vzc29yTWl4aW4iLCJtb2R1bGUiLCJleHBvcnRzIiwicHJlcHJvY2Vzc29yIiwiX19sb2NUcmFja2VyIiwiY2FsbCIsImlzRW9sIiwibGluZVN0YXJ0UG9zIiwiZHJvcHBlZEJ1ZmZlclNpemUiLCJjb2wiLCJsaW5lIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJwcm90b3R5cGUiLCJnZXQiLCJwb3MiLCJfZ2V0T3ZlcnJpZGRlbk1ldGhvZHMiLCJteG4iLCJvcmlnIiwiYWR2YW5jZSIsImNwIiwib2Zmc2V0IiwiTElORV9GRUVEIiwicmV0cmVhdCIsImRyb3BQYXJzZWRDaHVuayIsInByZXZQb3MiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQUlBLEtBQUssR0FBR0MsT0FBTyxDQUFDLG1CQUFELENBQW5CO0FBQUEsSUFDSUMsUUFBUSxHQUFHRCxPQUFPLENBQUMsTUFBRCxDQUFQLENBQWdCQyxRQUQvQjtBQUFBLElBRUlDLE9BQU8sR0FBR0YsT0FBTyxDQUFDLHNCQUFELENBRnJCLEMsQ0FJQTs7O0FBQ0EsSUFBSUcsQ0FBQyxHQUFHRCxPQUFPLENBQUNFLFdBQWhCOztBQUVBLElBQUlDLGlDQUFpQyxHQUFHQyxNQUFNLENBQUNDLE9BQVAsR0FBaUIsVUFBVUMsWUFBVixFQUF3QjtBQUM3RTtBQUNBLE1BQUksQ0FBQ0EsWUFBWSxDQUFDQyxZQUFsQixFQUFnQztBQUM1QkQsSUFBQUEsWUFBWSxDQUFDQyxZQUFiLEdBQTRCLElBQTVCO0FBRUFWLElBQUFBLEtBQUssQ0FBQ1csSUFBTixDQUFXLElBQVgsRUFBaUJGLFlBQWpCO0FBRUEsU0FBS0EsWUFBTCxHQUFvQkEsWUFBcEI7QUFDQSxTQUFLRyxLQUFMLEdBQWEsS0FBYjtBQUNBLFNBQUtDLFlBQUwsR0FBb0IsQ0FBcEI7QUFDQSxTQUFLQyxpQkFBTCxHQUF5QixDQUF6QjtBQUVBLFNBQUtDLEdBQUwsR0FBVyxDQUFDLENBQVo7QUFDQSxTQUFLQyxJQUFMLEdBQVksQ0FBWjtBQUNIOztBQUVELFNBQU9QLFlBQVksQ0FBQ0MsWUFBcEI7QUFDSCxDQWpCRDs7QUFtQkFSLFFBQVEsQ0FBQ0ksaUNBQUQsRUFBb0NOLEtBQXBDLENBQVI7QUFFQWlCLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQlosaUNBQWlDLENBQUNhLFNBQXhELEVBQW1FLFFBQW5FLEVBQTZFO0FBQ3pFQyxFQUFBQSxHQUFHLEVBQUUsWUFBWTtBQUNiLFdBQU8sS0FBS04saUJBQUwsR0FBeUIsS0FBS0wsWUFBTCxDQUFrQlksR0FBbEQ7QUFDSDtBQUh3RSxDQUE3RTs7QUFNQWYsaUNBQWlDLENBQUNhLFNBQWxDLENBQTRDRyxxQkFBNUMsR0FBb0UsVUFBVUMsR0FBVixFQUFlQyxJQUFmLEVBQXFCO0FBQ3JGLFNBQU87QUFDSEMsSUFBQUEsT0FBTyxFQUFFLFlBQVk7QUFDakIsVUFBSUMsRUFBRSxHQUFHRixJQUFJLENBQUNDLE9BQUwsQ0FBYWQsSUFBYixDQUFrQixJQUFsQixDQUFULENBRGlCLENBR2pCOztBQUNBLFVBQUlZLEdBQUcsQ0FBQ1gsS0FBUixFQUFlO0FBQ1hXLFFBQUFBLEdBQUcsQ0FBQ1gsS0FBSixHQUFZLEtBQVo7QUFDQVcsUUFBQUEsR0FBRyxDQUFDUCxJQUFKO0FBQ0FPLFFBQUFBLEdBQUcsQ0FBQ1YsWUFBSixHQUFtQlUsR0FBRyxDQUFDSSxNQUF2QjtBQUNIOztBQUVELFVBQUlELEVBQUUsS0FBS3RCLENBQUMsQ0FBQ3dCLFNBQWIsRUFDSUwsR0FBRyxDQUFDWCxLQUFKLEdBQVksSUFBWjtBQUVKVyxNQUFBQSxHQUFHLENBQUNSLEdBQUosR0FBVVEsR0FBRyxDQUFDSSxNQUFKLEdBQWFKLEdBQUcsQ0FBQ1YsWUFBakIsR0FBZ0MsQ0FBMUM7QUFFQSxhQUFPYSxFQUFQO0FBQ0gsS0FqQkU7QUFtQkhHLElBQUFBLE9BQU8sRUFBRSxZQUFZO0FBQ2pCTCxNQUFBQSxJQUFJLENBQUNLLE9BQUwsQ0FBYWxCLElBQWIsQ0FBa0IsSUFBbEI7QUFDQVksTUFBQUEsR0FBRyxDQUFDWCxLQUFKLEdBQVksS0FBWjtBQUVBVyxNQUFBQSxHQUFHLENBQUNSLEdBQUosR0FBVVEsR0FBRyxDQUFDSSxNQUFKLEdBQWFKLEdBQUcsQ0FBQ1YsWUFBakIsR0FBZ0MsQ0FBMUM7QUFDSCxLQXhCRTtBQTBCSGlCLElBQUFBLGVBQWUsRUFBRSxZQUFZO0FBQ3pCLFVBQUlDLE9BQU8sR0FBRyxLQUFLVixHQUFuQjtBQUVBRyxNQUFBQSxJQUFJLENBQUNNLGVBQUwsQ0FBcUJuQixJQUFyQixDQUEwQixJQUExQjtBQUVBWSxNQUFBQSxHQUFHLENBQUNULGlCQUFKLElBQXlCaUIsT0FBTyxHQUFHLEtBQUtWLEdBQXhDO0FBQ0g7QUFoQ0UsR0FBUDtBQWtDSCxDQW5DRCIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIE1peGluID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvbWl4aW4nKSxcbiAgICBpbmhlcml0cyA9IHJlcXVpcmUoJ3V0aWwnKS5pbmhlcml0cyxcbiAgICBVTklDT0RFID0gcmVxdWlyZSgnLi4vLi4vY29tbW9uL3VuaWNvZGUnKTtcblxuLy9BbGlhc2VzXG52YXIgJCA9IFVOSUNPREUuQ09ERV9QT0lOVFM7XG5cbnZhciBQb3NpdGlvblRyYWNraW5nUHJlcHJvY2Vzc29yTWl4aW4gPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChwcmVwcm9jZXNzb3IpIHtcbiAgICAvLyBOT1RFOiBhdm9pZCBpbnN0YWxsaW5nIHRyYWNrZXIgdHdpY2VcbiAgICBpZiAoIXByZXByb2Nlc3Nvci5fX2xvY1RyYWNrZXIpIHtcbiAgICAgICAgcHJlcHJvY2Vzc29yLl9fbG9jVHJhY2tlciA9IHRoaXM7XG5cbiAgICAgICAgTWl4aW4uY2FsbCh0aGlzLCBwcmVwcm9jZXNzb3IpO1xuXG4gICAgICAgIHRoaXMucHJlcHJvY2Vzc29yID0gcHJlcHJvY2Vzc29yO1xuICAgICAgICB0aGlzLmlzRW9sID0gZmFsc2U7XG4gICAgICAgIHRoaXMubGluZVN0YXJ0UG9zID0gMDtcbiAgICAgICAgdGhpcy5kcm9wcGVkQnVmZmVyU2l6ZSA9IDA7XG5cbiAgICAgICAgdGhpcy5jb2wgPSAtMTtcbiAgICAgICAgdGhpcy5saW5lID0gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJlcHJvY2Vzc29yLl9fbG9jVHJhY2tlcjtcbn07XG5cbmluaGVyaXRzKFBvc2l0aW9uVHJhY2tpbmdQcmVwcm9jZXNzb3JNaXhpbiwgTWl4aW4pO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoUG9zaXRpb25UcmFja2luZ1ByZXByb2Nlc3Nvck1peGluLnByb3RvdHlwZSwgJ29mZnNldCcsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZHJvcHBlZEJ1ZmZlclNpemUgKyB0aGlzLnByZXByb2Nlc3Nvci5wb3M7XG4gICAgfVxufSk7XG5cblBvc2l0aW9uVHJhY2tpbmdQcmVwcm9jZXNzb3JNaXhpbi5wcm90b3R5cGUuX2dldE92ZXJyaWRkZW5NZXRob2RzID0gZnVuY3Rpb24gKG14biwgb3JpZykge1xuICAgIHJldHVybiB7XG4gICAgICAgIGFkdmFuY2U6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBjcCA9IG9yaWcuYWR2YW5jZS5jYWxsKHRoaXMpO1xuXG4gICAgICAgICAgICAvL05PVEU6IExGIHNob3VsZCBiZSBpbiB0aGUgbGFzdCBjb2x1bW4gb2YgdGhlIGxpbmVcbiAgICAgICAgICAgIGlmIChteG4uaXNFb2wpIHtcbiAgICAgICAgICAgICAgICBteG4uaXNFb2wgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBteG4ubGluZSsrO1xuICAgICAgICAgICAgICAgIG14bi5saW5lU3RhcnRQb3MgPSBteG4ub2Zmc2V0O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoY3AgPT09ICQuTElORV9GRUVEKVxuICAgICAgICAgICAgICAgIG14bi5pc0VvbCA9IHRydWU7XG5cbiAgICAgICAgICAgIG14bi5jb2wgPSBteG4ub2Zmc2V0IC0gbXhuLmxpbmVTdGFydFBvcyArIDE7XG5cbiAgICAgICAgICAgIHJldHVybiBjcDtcbiAgICAgICAgfSxcblxuICAgICAgICByZXRyZWF0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBvcmlnLnJldHJlYXQuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgIG14bi5pc0VvbCA9IGZhbHNlO1xuXG4gICAgICAgICAgICBteG4uY29sID0gbXhuLm9mZnNldCAtIG14bi5saW5lU3RhcnRQb3MgKyAxO1xuICAgICAgICB9LFxuXG4gICAgICAgIGRyb3BQYXJzZWRDaHVuazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHByZXZQb3MgPSB0aGlzLnBvcztcblxuICAgICAgICAgICAgb3JpZy5kcm9wUGFyc2VkQ2h1bmsuY2FsbCh0aGlzKTtcblxuICAgICAgICAgICAgbXhuLmRyb3BwZWRCdWZmZXJTaXplICs9IHByZXZQb3MgLSB0aGlzLnBvcztcbiAgICAgICAgfVxuICAgIH07XG59O1xuIl19