47fd9c0942e7a2fa062b38e04cec5a02
/*
  Module Dependencies
*/
var htmlparser = require('htmlparser2'),
    parse5 = require('parse5');
/*
  Parser
*/


exports = module.exports = function (content, options, isDocument) {
  var dom = exports.evaluate(content, options, isDocument),
      // Generic root element
  root = exports.evaluate('<root></root>', options, false)[0];
  root.type = 'root';
  root.parent = null; // Update the dom using the root

  exports.update(dom, root);
  return root;
};

function parseWithParse5(content, isDocument) {
  var parse = isDocument ? parse5.parse : parse5.parseFragment,
      root = parse(content, {
    treeAdapter: parse5.treeAdapters.htmlparser2
  });
  return root.children;
}

exports.evaluate = function (content, options, isDocument) {
  // options = options || $.fn.options;
  var dom;
  if (Buffer.isBuffer(content)) content = content.toString();

  if (typeof content === 'string') {
    var useHtmlParser2 = options.xmlMode || options._useHtmlParser2;
    dom = useHtmlParser2 ? htmlparser.parseDOM(content, options) : parseWithParse5(content, isDocument);
  } else {
    dom = content;
  }

  return dom;
};
/*
  Update the dom structure, for one changed layer
*/


exports.update = function (arr, parent) {
  // normalize
  if (!Array.isArray(arr)) arr = [arr]; // Update parent

  if (parent) {
    parent.children = arr;
  } else {
    parent = null;
  } // Update neighbors


  for (var i = 0; i < arr.length; i++) {
    var node = arr[i]; // Cleanly remove existing nodes from their previous structures.

    var oldParent = node.parent || node.root,
        oldSiblings = oldParent && oldParent.children;

    if (oldSiblings && oldSiblings !== arr) {
      oldSiblings.splice(oldSiblings.indexOf(node), 1);

      if (node.prev) {
        node.prev.next = node.next;
      }

      if (node.next) {
        node.next.prev = node.prev;
      }
    }

    if (parent) {
      node.prev = arr[i - 1] || null;
      node.next = arr[i + 1] || null;
    } else {
      node.prev = node.next = null;
    }

    if (parent && parent.type === 'root') {
      node.root = parent;
      node.parent = null;
    } else {
      node.root = null;
      node.parent = parent;
    }
  }

  return parent;
}; // module.exports = $.extend(exports);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBhcnNlLmpzIl0sIm5hbWVzIjpbImh0bWxwYXJzZXIiLCJyZXF1aXJlIiwicGFyc2U1IiwiZXhwb3J0cyIsIm1vZHVsZSIsImNvbnRlbnQiLCJvcHRpb25zIiwiaXNEb2N1bWVudCIsImRvbSIsImV2YWx1YXRlIiwicm9vdCIsInR5cGUiLCJwYXJlbnQiLCJ1cGRhdGUiLCJwYXJzZVdpdGhQYXJzZTUiLCJwYXJzZSIsInBhcnNlRnJhZ21lbnQiLCJ0cmVlQWRhcHRlciIsInRyZWVBZGFwdGVycyIsImh0bWxwYXJzZXIyIiwiY2hpbGRyZW4iLCJCdWZmZXIiLCJpc0J1ZmZlciIsInRvU3RyaW5nIiwidXNlSHRtbFBhcnNlcjIiLCJ4bWxNb2RlIiwiX3VzZUh0bWxQYXJzZXIyIiwicGFyc2VET00iLCJhcnIiLCJBcnJheSIsImlzQXJyYXkiLCJpIiwibGVuZ3RoIiwibm9kZSIsIm9sZFBhcmVudCIsIm9sZFNpYmxpbmdzIiwic3BsaWNlIiwiaW5kZXhPZiIsInByZXYiLCJuZXh0Il0sIm1hcHBpbmdzIjoiQUFBQTs7O0FBR0EsSUFBSUEsVUFBVSxHQUFHQyxPQUFPLENBQUMsYUFBRCxDQUF4QjtBQUFBLElBQ0lDLE1BQU0sR0FBR0QsT0FBTyxDQUFDLFFBQUQsQ0FEcEI7QUFHQTs7Ozs7QUFHQUUsT0FBTyxHQUFHQyxNQUFNLENBQUNELE9BQVAsR0FBaUIsVUFBU0UsT0FBVCxFQUFrQkMsT0FBbEIsRUFBMkJDLFVBQTNCLEVBQXVDO0FBQ2hFLE1BQUlDLEdBQUcsR0FBR0wsT0FBTyxDQUFDTSxRQUFSLENBQWlCSixPQUFqQixFQUEwQkMsT0FBMUIsRUFBbUNDLFVBQW5DLENBQVY7QUFBQSxNQUNJO0FBQ0FHLEVBQUFBLElBQUksR0FBR1AsT0FBTyxDQUFDTSxRQUFSLENBQWlCLGVBQWpCLEVBQWtDSCxPQUFsQyxFQUEyQyxLQUEzQyxFQUFrRCxDQUFsRCxDQUZYO0FBSUFJLEVBQUFBLElBQUksQ0FBQ0MsSUFBTCxHQUFZLE1BQVo7QUFDQUQsRUFBQUEsSUFB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QUFDSyxJQUFMLEdBQVlWLEdBQUcsQ0FBQ0csQ0FBQyxHQUFHLENBQUwsQ0FBSCxJQUFjLElBQTFCO0FBQ0FFLE1BQUFBLElBQUksQ0FBQ00sSUFBTCxHQUFZWCxHQUFHLENBQUNHLENBQUMsR0FBRyxDQUFMLENBQUgsSUFBYyxJQUExQjtBQUNELEtBSEQsTUFHTztBQUNMRSxNQUFBQSxJQUFJLENBQUNLLElBQUwsR0FBWUwsSUFBSSxDQUFDTSxJQUFMLEdBQVksSUFBeEI7QUFDRDs7QUFFRCxRQUFJM0IsTUFBTSxJQUFJQSxNQUFNLENBQUNELElBQVAsS0FBZ0IsTUFBOUIsRUFBc0M7QUFDcENzQixNQUFBQSxJQUFJLENBQUN2QixJQUFMLEdBQVlFLE1BQVo7QUFDQXFCLE1BQUFBLElBQUksQ0FBQ3JCLE1BQUwsR0FBYyxJQUFkO0FBQ0QsS0FIRCxNQUdPO0FBQ0xxQixNQUFBQSxJQUFJLENBQUN2QixJQUFMLEdBQVksSUFBWjtBQUNBdUIsTUFBQUEsSUFBSSxDQUFDckIsTUFBTCxHQUFjQSxNQUFkO0FBQ0Q7QUFDRjs7QUFFRCxTQUFPQSxNQUFQO0FBQ0QsQ0E3Q0QsQyxDQStDQSIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gIE1vZHVsZSBEZXBlbmRlbmNpZXNcbiovXG52YXIgaHRtbHBhcnNlciA9IHJlcXVpcmUoJ2h0bWxwYXJzZXIyJyksXG4gICAgcGFyc2U1ID0gcmVxdWlyZSgncGFyc2U1Jyk7XG5cbi8qXG4gIFBhcnNlclxuKi9cbmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGNvbnRlbnQsIG9wdGlvbnMsIGlzRG9jdW1lbnQpIHtcbiAgdmFyIGRvbSA9IGV4cG9ydHMuZXZhbHVhdGUoY29udGVudCwgb3B0aW9ucywgaXNEb2N1bWVudCksXG4gICAgICAvLyBHZW5lcmljIHJvb3QgZWxlbWVudFxuICAgICAgcm9vdCA9IGV4cG9ydHMuZXZhbHVhdGUoJzxyb290Pjwvcm9vdD4nLCBvcHRpb25zLCBmYWxzZSlbMF07XG5cbiAgcm9vdC50eXBlID0gJ3Jvb3QnO1xuICByb290LnBhcmVudCA9IG51bGw7XG5cbiAgLy8gVXBkYXRlIHRoZSBkb20gdXNpbmcgdGhlIHJvb3RcbiAgZXhwb3J0cy51cGRhdGUoZG9tLCByb290KTtcblxuICByZXR1cm4gcm9vdDtcbn07XG5cbmZ1bmN0aW9uIHBhcnNlV2l0aFBhcnNlNSAoY29udGVudCwgaXNEb2N1bWVudCkge1xuICB2YXIgcGFyc2UgPSBpc0RvY3VtZW50ID8gcGFyc2U1LnBhcnNlIDogcGFyc2U1LnBhcnNlRnJhZ21lbnQsXG4gICAgICByb290ID0gcGFyc2UoY29udGVudCwgeyB0cmVlQWRhcHRlcjogcGFyc2U1LnRyZWVBZGFwdGVycy5odG1scGFyc2VyMiB9KTtcblxuICByZXR1cm4gcm9vdC5jaGlsZHJlbjtcbn1cblxuZXhwb3J0cy5ldmFsdWF0ZSA9IGZ1bmN0aW9uKGNvbnRlbnQsIG9wdGlvbnMsIGlzRG9jdW1lbnQpIHtcbiAgLy8gb3B0aW9ucyA9IG9wdGlvbnMgfHwgJC5mbi5vcHRpb25zO1xuXG4gIHZhciBkb207XG5cbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihjb250ZW50KSlcbiAgICBjb250ZW50ID0gY29udGVudC50b1N0cmluZygpO1xuXG4gIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICB2YXIgdXNlSHRtbFBhcnNlcjIgPSBvcHRpb25zLnhtbE1vZGUgfHwgb3B0aW9ucy5fdXNlSHRtbFBhcnNlcjI7XG5cbiAgICBkb20gPSB1c2VIdG1sUGFyc2VyMiA/IGh0bWxwYXJzZXIucGFyc2VET00oY29udGVudCwgb3B0aW9ucykgOiBwYXJzZVdpdGhQYXJzZTUoY29udGVudCwgaXNEb2N1bWVudCk7XG4gIH0gZWxzZSB7XG4gICAgZG9tID0gY29udGVudDtcbiAgfVxuXG4gIHJldHVybiBkb207XG59O1xuXG4vKlxuICBVcGRhdGUgdGhlIGRvbSBzdHJ1Y3R1cmUsIGZvciBvbmUgY2hhbmdlZCBsYXllclxuKi9cbmV4cG9ydHMudXBkYXRlID0gZnVuY3Rpb24oYXJyLCBwYXJlbnQpIHtcbiAgLy8gbm9ybWFsaXplXG4gIGlmICghQXJyYXkuaXNBcnJheShhcnIpKSBhcnIgPSBbYXJyXTtcblxuICAvLyBVcGRhdGUgcGFyZW50XG4gIGlmIChwYXJlbnQpIHtcbiAgICBwYXJlbnQuY2hpbGRyZW4gPSBhcnI7XG4gIH0gZWxzZSB7XG4gICAgcGFyZW50ID0gbnVsbDtcbiAgfVxuXG4gIC8vIFVwZGF0ZSBuZWlnaGJvcnNcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgbm9kZSA9IGFycltpXTtcblxuICAgIC8vIENsZWFubHkgcmVtb3ZlIGV4aXN0aW5nIG5vZGVzIGZyb20gdGhlaXIgcHJldmlvdXMgc3RydWN0dXJlcy5cbiAgICB2YXIgb2xkUGFyZW50ID0gbm9kZS5wYXJlbnQgfHwgbm9kZS5yb290LFxuICAgICAgICBvbGRTaWJsaW5ncyA9IG9sZFBhcmVudCAmJiBvbGRQYXJlbnQuY2hpbGRyZW47XG4gICAgaWYgKG9sZFNpYmxpbmdzICYmIG9sZFNpYmxpbmdzICE9PSBhcnIpIHtcbiAgICAgIG9sZFNpYmxpbmdzLnNwbGljZShvbGRTaWJsaW5ncy5pbmRleE9mKG5vZGUpLCAxKTtcbiAgICAgIGlmIChub2RlLnByZXYpIHtcbiAgICAgICAgbm9kZS5wcmV2Lm5leHQgPSBub2RlLm5leHQ7XG4gICAgICB9XG4gICAgICBpZiAobm9kZS5uZXh0KSB7XG4gICAgICAgIG5vZGUubmV4dC5wcmV2ID0gbm9kZS5wcmV2O1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChwYXJlbnQpIHtcbiAgICAgIG5vZGUucHJldiA9IGFycltpIC0gMV0gfHwgbnVsbDtcbiAgICAgIG5vZGUubmV4dCA9IGFycltpICsgMV0gfHwgbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgbm9kZS5wcmV2ID0gbm9kZS5uZXh0ID0gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAocGFyZW50ICYmIHBhcmVudC50eXBlID09PSAncm9vdCcpIHtcbiAgICAgIG5vZGUucm9vdCA9IHBhcmVudDtcbiAgICAgIG5vZGUucGFyZW50ID0gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgbm9kZS5yb290ID0gbnVsbDtcbiAgICAgIG5vZGUucGFyZW50ID0gcGFyZW50O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBwYXJlbnQ7XG59O1xuXG4vLyBtb2R1bGUuZXhwb3J0cyA9ICQuZXh0ZW5kKGV4cG9ydHMpO1xuIl19