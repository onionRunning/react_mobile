c9cfbf511bcfaadf6f561e0da8aad189
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = booleanSomeValidator;

var _propTypes = require("prop-types");

var _wrapValidator = _interopRequireDefault(require("./helpers/wrapValidator"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function booleanSomeValidator() {
  for (var _len = arguments.length, notAllPropsFalse = new Array(_len), _key = 0; _key < _len; _key++) {
    notAllPropsFalse[_key] = arguments[_key];
  }

  if (notAllPropsFalse.length < 1) {
    throw new TypeError('at least one prop (one of which must be `true`) is required');
  }

  if (!notAllPropsFalse.every(function (x) {
    return typeof x === 'string';
  })) {
    throw new TypeError('all booleanSome props must be strings');
  }

  var propsList = notAllPropsFalse.join(', or ');

  var validator = function booleanSome(props, propName, componentName) {
    var countFalse = function countFalse(count, prop) {
      return count + (props[prop] === false ? 1 : 0);
    };

    var falsePropCount = notAllPropsFalse.reduce(countFalse, 0);

    if (falsePropCount === notAllPropsFalse.length) {
      return new Error("A ".concat(componentName, " must have at least one of these boolean props be `true`: ").concat(propsList));
    }

    for (var _len2 = arguments.length, rest = new Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {
      rest[_key2 - 3] = arguments[_key2];
    }

    return _propTypes.bool.apply(void 0, [props, propName, componentName].concat(rest));
  };

  validator.isRequired = function booleanSomeRequired(props, propName, componentName) {
    var countFalse = function countFalse(count, prop) {
      return count + (props[prop] === false ? 1 : 0);
    };

    var falsePropCount = notAllPropsFalse.reduce(countFalse, 0);

    if (falsePropCount === notAllPropsFalse.length) {
      return new Error("A ".concat(componentName, " must have at least one of these boolean props be `true`: ").concat(propsList));
    }

    for (var _len3 = arguments.length, rest = new Array(_len3 > 3 ? _len3 - 3 : 0), _key3 = 3; _key3 < _len3; _key3++) {
      rest[_key3 - 3] = arguments[_key3];
    }

    return _propTypes.bool.isRequired.apply(_propTypes.bool, [props, propName, componentName].concat(rest));
  };

  return (0, _wrapValidator["default"])(validator, "booleanSome: ".concat(propsList), notAllPropsFalse);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9ib29sZWFuU29tZS5qcyJdLCJuYW1lcyI6WyJub3RBbGxQcm9wc0ZhbHNlIiwicHJvcHNMaXN0IiwidmFsaWRhdG9yIiwicmVzdCIsImNvdW50RmFsc2UiLCJjb3VudCIsInByb3BzIiwiZmFsc2VQcm9wQ291bnQiLCJib29sIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsSUFBQSxVQUFBLEdBQUEsT0FBQSxDQUFBLFlBQUEsQ0FBQTs7QUFDQSxJQUFBLGNBQUEsR0FBQSxzQkFBQSxDQUFBLE9BQUEsQ0FBQSx5QkFBQSxDQUFBLENBQUE7Ozs7Ozs7O0FBRWUsU0FBQSxvQkFBQSxHQUFtRDtBQUFBLE9BQUEsSUFBQSxJQUFBLEdBQUEsU0FBQSxDQUFBLE1BQUEsRUFBbEJBLGdCQUFrQixHQUFBLElBQUEsS0FBQSxDQUFBLElBQUEsQ0FBQSxFQUFBLElBQUEsR0FBQSxDQUFBLEVBQUEsSUFBQSxHQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsRUFBQTtBQUFsQkEsSUFBQUEsZ0JBQWtCLENBQUEsSUFBQSxDQUFsQkEsR0FBa0IsU0FBQSxDQUFBLElBQUEsQ0FBbEJBO0FBQWtCOztBQUNoRSxNQUFJQSxnQkFBZ0IsQ0FBaEJBLE1BQUFBLEdBQUosQ0FBQSxFQUFpQztBQUMvQixVQUFNLElBQUEsU0FBQSxDQUFOLDZEQUFNLENBQU47QUFDRDs7QUFDRCxNQUFJLENBQUMsZ0JBQWdCLENBQWhCLEtBQUEsQ0FBdUIsVUFBQSxDQUFBLEVBQUE7QUFBQSxXQUFPLE9BQUEsQ0FBQSxLQUFQLFFBQUE7QUFBNUIsR0FBSyxDQUFMLEVBQTJEO0FBQ3pELFVBQU0sSUFBQSxTQUFBLENBQU4sdUNBQU0sQ0FBTjtBQUNEOztBQUVELE1BQU1DLFNBQVMsR0FBR0QsZ0JBQWdCLENBQWhCQSxJQUFBQSxDQUFsQixPQUFrQkEsQ0FBbEI7O0FBRUEsTUFBTUUsU0FBUyxHQUFHLFNBQUEsV0FBQSxDQUFBLEtBQUEsRUFBQSxRQUFBLEVBQUEsYUFBQSxFQUE4RDtBQUM5RSxR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cG9ydCB3cmFwVmFsaWRhdG9yIGZyb20gJy4vaGVscGVycy93cmFwVmFsaWRhdG9yJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYm9vbGVhblNvbWVWYWxpZGF0b3IoLi4ubm90QWxsUHJvcHNGYWxzZSkge1xuICBpZiAobm90QWxsUHJvcHNGYWxzZS5sZW5ndGggPCAxKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYXQgbGVhc3Qgb25lIHByb3AgKG9uZSBvZiB3aGljaCBtdXN0IGJlIGB0cnVlYCkgaXMgcmVxdWlyZWQnKTtcbiAgfVxuICBpZiAoIW5vdEFsbFByb3BzRmFsc2UuZXZlcnkoKHgpID0+IHR5cGVvZiB4ID09PSAnc3RyaW5nJykpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdhbGwgYm9vbGVhblNvbWUgcHJvcHMgbXVzdCBiZSBzdHJpbmdzJyk7XG4gIH1cblxuICBjb25zdCBwcm9wc0xpc3QgPSBub3RBbGxQcm9wc0ZhbHNlLmpvaW4oJywgb3IgJyk7XG5cbiAgY29uc3QgdmFsaWRhdG9yID0gZnVuY3Rpb24gYm9vbGVhblNvbWUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCAuLi5yZXN0KSB7XG4gICAgY29uc3QgY291bnRGYWxzZSA9IChjb3VudCwgcHJvcCkgPT4gKGNvdW50ICsgKHByb3BzW3Byb3BdID09PSBmYWxzZSA/IDEgOiAwKSk7XG5cbiAgICBjb25zdCBmYWxzZVByb3BDb3VudCA9IG5vdEFsbFByb3BzRmFsc2UucmVkdWNlKGNvdW50RmFsc2UsIDApO1xuICAgIGlmIChmYWxzZVByb3BDb3VudCA9PT0gbm90QWxsUHJvcHNGYWxzZS5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoYEEgJHtjb21wb25lbnROYW1lfSBtdXN0IGhhdmUgYXQgbGVhc3Qgb25lIG9mIHRoZXNlIGJvb2xlYW4gcHJvcHMgYmUgXFxgdHJ1ZVxcYDogJHtwcm9wc0xpc3R9YCk7XG4gICAgfVxuICAgIHJldHVybiBib29sKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgLi4ucmVzdCk7XG4gIH07XG5cbiAgdmFsaWRhdG9yLmlzUmVxdWlyZWQgPSBmdW5jdGlvbiBib29sZWFuU29tZVJlcXVpcmVkKFxuICAgIHByb3BzLFxuICAgIHByb3BOYW1lLFxuICAgIGNvbXBvbmVudE5hbWUsXG4gICAgLi4ucmVzdFxuICApIHtcbiAgICBjb25zdCBjb3VudEZhbHNlID0gKGNvdW50LCBwcm9wKSA9PiAoY291bnQgKyAocHJvcHNbcHJvcF0gPT09IGZhbHNlID8gMSA6IDApKTtcblxuICAgIGNvbnN0IGZhbHNlUHJvcENvdW50ID0gbm90QWxsUHJvcHNGYWxzZS5yZWR1Y2UoY291bnRGYWxzZSwgMCk7XG4gICAgaWYgKGZhbHNlUHJvcENvdW50ID09PSBub3RBbGxQcm9wc0ZhbHNlLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcihgQSAke2NvbXBvbmVudE5hbWV9IG11c3QgaGF2ZSBhdCBsZWFzdCBvbmUgb2YgdGhlc2UgYm9vbGVhbiBwcm9wcyBiZSBcXGB0cnVlXFxgOiAke3Byb3BzTGlzdH1gKTtcbiAgICB9XG4gICAgcmV0dXJuIGJvb2wuaXNSZXF1aXJlZChwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIC4uLnJlc3QpO1xuICB9O1xuXG4gIHJldHVybiB3cmFwVmFsaWRhdG9yKHZhbGlkYXRvciwgYGJvb2xlYW5Tb21lOiAke3Byb3BzTGlzdH1gLCBub3RBbGxQcm9wc0ZhbHNlKTtcbn1cbiJdfQ==