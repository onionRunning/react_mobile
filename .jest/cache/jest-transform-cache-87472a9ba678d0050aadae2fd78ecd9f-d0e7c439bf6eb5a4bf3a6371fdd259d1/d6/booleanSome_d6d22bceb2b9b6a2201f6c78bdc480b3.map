{"version":3,"sources":["../src/booleanSome.js"],"names":["notAllPropsFalse","propsList","validator","rest","countFalse","count","props","falsePropCount","bool"],"mappings":"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","sourcesContent":["import { bool } from 'prop-types';\nimport wrapValidator from './helpers/wrapValidator';\n\nexport default function booleanSomeValidator(...notAllPropsFalse) {\n  if (notAllPropsFalse.length < 1) {\n    throw new TypeError('at least one prop (one of which must be `true`) is required');\n  }\n  if (!notAllPropsFalse.every((x) => typeof x === 'string')) {\n    throw new TypeError('all booleanSome props must be strings');\n  }\n\n  const propsList = notAllPropsFalse.join(', or ');\n\n  const validator = function booleanSome(props, propName, componentName, ...rest) {\n    const countFalse = (count, prop) => (count + (props[prop] === false ? 1 : 0));\n\n    const falsePropCount = notAllPropsFalse.reduce(countFalse, 0);\n    if (falsePropCount === notAllPropsFalse.length) {\n      return new Error(`A ${componentName} must have at least one of these boolean props be \\`true\\`: ${propsList}`);\n    }\n    return bool(props, propName, componentName, ...rest);\n  };\n\n  validator.isRequired = function booleanSomeRequired(\n    props,\n    propName,\n    componentName,\n    ...rest\n  ) {\n    const countFalse = (count, prop) => (count + (props[prop] === false ? 1 : 0));\n\n    const falsePropCount = notAllPropsFalse.reduce(countFalse, 0);\n    if (falsePropCount === notAllPropsFalse.length) {\n      return new Error(`A ${componentName} must have at least one of these boolean props be \\`true\\`: ${propsList}`);\n    }\n    return bool.isRequired(props, propName, componentName, ...rest);\n  };\n\n  return wrapValidator(validator, `booleanSome: ${propsList}`, notAllPropsFalse);\n}\n"]}