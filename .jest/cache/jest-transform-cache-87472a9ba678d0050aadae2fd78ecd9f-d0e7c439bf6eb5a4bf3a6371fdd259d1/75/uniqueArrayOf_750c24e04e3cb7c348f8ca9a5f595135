8ae81133ca2fd80667c4dfe1e6251fcc
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = uniqueArrayOfTypeValidator;

var _propTypes = require("prop-types");

var _and = _interopRequireDefault(require("./and"));

var _uniqueArray = _interopRequireDefault(require("./uniqueArray"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(source, true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(source).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var unique = (0, _uniqueArray["default"])();

function uniqueArrayOfTypeValidator(type) {
  if (typeof type !== 'function') {
    throw new TypeError('type must be a validator function');
  }

  var mapper = null;
  var name = 'uniqueArrayOfType';

  for (var _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    rest[_key - 1] = arguments[_key];
  }

  if (rest.length === 1) {
    if (typeof rest[0] === 'function') {
      mapper = rest[0];
    } else if (typeof rest[0] === 'string') {
      name = rest[0];
    } else {
      throw new TypeError('single input must either be string or function');
    }
  } else if (rest.length === 2) {
    if (typeof rest[0] === 'function' && typeof rest[1] === 'string') {
      mapper = rest[0];
      name = rest[1];
    } else {
      throw new TypeError('multiple inputs must be in [function, string] order');
    }
  } else if (rest.length > 2) {
    throw new TypeError('only [], [name], [mapper], and [mapper, name] are valid inputs');
  }

  function uniqueArrayOfMapped(props, propName) {
    var propValue = props[propName];

    if (propValue == null) {
      return null;
    }

    var values = propValue.map(mapper);

    for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
      args[_key2 - 2] = arguments[_key2];
    }

    return unique.apply(void 0, [_objectSpread({}, props, _defineProperty({}, propName, values)), propName].concat(args));
  }

  uniqueArrayOfMapped.isRequired = function isRequired(props, propName) {
    var propValue = props[propName];

    for (var _len3 = arguments.length, args = new Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {
      args[_key3 - 2] = arguments[_key3];
    }

    if (propValue == null) {
      return _propTypes.array.isRequired.apply(_propTypes.array, [props, propName].concat(args));
    }

    return uniqueArrayOfMapped.apply(void 0, [props, propName].concat(args));
  };

  var arrayValidator = (0, _propTypes.arrayOf)(type);
  var uniqueValidator = mapper ? uniqueArrayOfMapped : unique;
  var validator = (0, _and["default"])([arrayValidator, uniqueValidator], name);
  validator.isRequired = (0, _and["default"])([uniqueValidator.isRequired, arrayValidator.isRequired], "".concat(name, ".isRequired"));
  return validator;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy91bmlxdWVBcnJheU9mLmpzIl0sIm5hbWVzIjpbInVuaXF1ZSIsInJlc3QiLCJtYXBwZXIiLCJuYW1lIiwiYXJncyIsInByb3BWYWx1ZSIsInByb3BzIiwidmFsdWVzIiwidW5pcXVlQXJyYXlPZk1hcHBlZCIsImFycmF5IiwiYXJyYXlWYWxpZGF0b3IiLCJ1bmlxdWVWYWxpZGF0b3IiLCJ2YWxpZGF0b3IiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSxJQUFBLFVBQUEsR0FBQSxPQUFBLENBQUEsWUFBQSxDQUFBOztBQUNBLElBQUEsSUFBQSxHQUFBLHNCQUFBLENBQUEsT0FBQSxDQUFBLE9BQUEsQ0FBQSxDQUFBOztBQUNBLElBQUEsWUFBQSxHQUFBLHNCQUFBLENBQUEsT0FBQSxDQUFBLGVBQUEsQ0FBQSxDQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFQSxJQUFNQSxNQUFNLEdBQUcsQ0FBQSxHQUFBLFlBQUEsQ0FBZixTQUFlLENBQUEsR0FBZjs7QUFFZSxTQUFBLDBCQUFBLENBQUEsSUFBQSxFQUFtRDtBQUNoRSxNQUFJLE9BQUEsSUFBQSxLQUFKLFVBQUEsRUFBZ0M7QUFDOUIsVUFBTSxJQUFBLFNBQUEsQ0FBTixtQ0FBTSxDQUFOO0FBQ0Q7O0FBRUQsTUFBSUUsTUFBTSxHQUFWLElBQUE7QUFDQSxNQUFJQyxJQUFJLEdBQVIsbUJBQUE7O0FBTmdFLE9BQUEsSUFBQSxJQUFBLEdBQUEsU0FBQSxDQUFBLE1BQUEsRUFBTkYsSUFBTSxHQUFBLElBQUEsS0FBQSxDQUFBLElBQUEsR0FBQSxDQUFBLEdBQUEsSUFBQSxHQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsRUFBQSxJQUFBLEdBQUEsQ0FBQSxFQUFBLElBQUEsR0FBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLEVBQUE7QUFBTkEsSUFBQUEsSUFBTSxDQUFBLElBQUEsR0FBQSxDQUFBLENBQU5BLEdBQU0sU0FBQSxDQUFBLElB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ckIsYUFBT0ksVUFBQUEsQ0FBQUEsS0FBQUEsQ0FBQUEsVUFBQUEsQ0FBQUEsS0FBQUEsQ0FBQUEsVUFBQUEsQ0FBQUEsS0FBQUEsRUFBQUEsQ0FBQUEsS0FBQUEsRUFBQUEsUUFBQUEsRUFBQUEsTUFBQUEsQ0FBUCxJQUFPQSxDQUFBQSxDQUFQO0FBQ0Q7O0FBQ0QsV0FBT0QsbUJBQW1CLENBQW5CQSxLQUFBQSxDQUFBQSxLQUFBQSxDQUFBQSxFQUFBQSxDQUFBQSxLQUFBQSxFQUFBQSxRQUFBQSxFQUFBQSxNQUFBQSxDQUFQLElBQU9BLENBQUFBLENBQVA7QUFMRkEsR0FBQUE7O0FBUUEsTUFBTUUsY0FBYyxHQUFHLENBQUEsR0FBQSxVQUFBLENBQUEsT0FBQSxFQUF2QixJQUF1QixDQUF2QjtBQUVBLE1BQU1DLGVBQWUsR0FBR1QsTUFBTSxHQUFBLG1CQUFBLEdBQTlCLE1BQUE7QUFFQSxNQUFNVSxTQUFTLEdBQUcsQ0FBQSxHQUFBLElBQUEsQ0FBQSxTQUFBLENBQUEsRUFBSSxDQUFBLGNBQUEsRUFBSixlQUFJLENBQUosRUFBbEIsSUFBa0IsQ0FBbEI7QUFDQUEsRUFBQUEsU0FBUyxDQUFUQSxVQUFBQSxHQUF1QixDQUFBLEdBQUEsSUFBQSxDQUFBLFNBQUEsQ0FBQSxFQUFJLENBQ3pCRCxlQUFlLENBRFUsVUFBQSxFQUV6QkQsY0FBYyxDQUZPLFVBQUksQ0FBSixFQUFBLEdBQUEsTUFBQSxDQUFBLElBQUEsRUFBdkJFLGFBQXVCLENBQUEsQ0FBdkJBO0FBS0EsU0FBQSxTQUFBO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhcnJheU9mLCBhcnJheSB9IGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGFuZCBmcm9tICcuL2FuZCc7XG5pbXBvcnQgdW5pcXVlQXJyYXkgZnJvbSAnLi91bmlxdWVBcnJheSc7XG5cbmNvbnN0IHVuaXF1ZSA9IHVuaXF1ZUFycmF5KCk7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVuaXF1ZUFycmF5T2ZUeXBlVmFsaWRhdG9yKHR5cGUsIC4uLnJlc3QpIHtcbiAgaWYgKHR5cGVvZiB0eXBlICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcigndHlwZSBtdXN0IGJlIGEgdmFsaWRhdG9yIGZ1bmN0aW9uJyk7XG4gIH1cblxuICBsZXQgbWFwcGVyID0gbnVsbDtcbiAgbGV0IG5hbWUgPSAndW5pcXVlQXJyYXlPZlR5cGUnO1xuXG4gIGlmIChyZXN0Lmxlbmd0aCA9PT0gMSkge1xuICAgIGlmICh0eXBlb2YgcmVzdFswXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgKFttYXBwZXJdID0gcmVzdCk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgcmVzdFswXSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIChbbmFtZV0gPSByZXN0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignc2luZ2xlIGlucHV0IG11c3QgZWl0aGVyIGJlIHN0cmluZyBvciBmdW5jdGlvbicpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChyZXN0Lmxlbmd0aCA9PT0gMikge1xuICAgIGlmICh0eXBlb2YgcmVzdFswXSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgcmVzdFsxXSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIChbbWFwcGVyLCBuYW1lXSA9IHJlc3QpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdtdWx0aXBsZSBpbnB1dHMgbXVzdCBiZSBpbiBbZnVuY3Rpb24sIHN0cmluZ10gb3JkZXInKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAocmVzdC5sZW5ndGggPiAyKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignb25seSBbXSwgW25hbWVdLCBbbWFwcGVyXSwgYW5kIFttYXBwZXIsIG5hbWVdIGFyZSB2YWxpZCBpbnB1dHMnKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVuaXF1ZUFycmF5T2ZNYXBwZWQocHJvcHMsIHByb3BOYW1lLCAuLi5hcmdzKSB7XG4gICAgY29uc3QgeyBbcHJvcE5hbWVdOiBwcm9wVmFsdWUgfSA9IHByb3BzO1xuICAgIGlmIChwcm9wVmFsdWUgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgY29uc3QgdmFsdWVzID0gcHJvcFZhbHVlLm1hcChtYXBwZXIpO1xuICAgIHJldHVybiB1bmlxdWUoeyAuLi5wcm9wcywgW3Byb3BOYW1lXTogdmFsdWVzIH0sIHByb3BOYW1lLCAuLi5hcmdzKTtcbiAgfVxuXG4gIHVuaXF1ZUFycmF5T2ZNYXBwZWQuaXNSZXF1aXJlZCA9IGZ1bmN0aW9uIGlzUmVxdWlyZWQocHJvcHMsIHByb3BOYW1lLCAuLi5hcmdzKSB7XG4gICAgY29uc3QgeyBbcHJvcE5hbWVdOiBwcm9wVmFsdWUgfSA9IHByb3BzO1xuICAgIGlmIChwcm9wVmFsdWUgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGFycmF5LmlzUmVxdWlyZWQocHJvcHMsIHByb3BOYW1lLCAuLi5hcmdzKTtcbiAgICB9XG4gICAgcmV0dXJuIHVuaXF1ZUFycmF5T2ZNYXBwZWQocHJvcHMsIHByb3BOYW1lLCAuLi5hcmdzKTtcbiAgfTtcblxuICBjb25zdCBhcnJheVZhbGlkYXRvciA9IGFycmF5T2YodHlwZSk7XG5cbiAgY29uc3QgdW5pcXVlVmFsaWRhdG9yID0gbWFwcGVyID8gdW5pcXVlQXJyYXlPZk1hcHBlZCA6IHVuaXF1ZTtcblxuICBjb25zdCB2YWxpZGF0b3IgPSBhbmQoW2FycmF5VmFsaWRhdG9yLCB1bmlxdWVWYWxpZGF0b3JdLCBuYW1lKTtcbiAgdmFsaWRhdG9yLmlzUmVxdWlyZWQgPSBhbmQoW1xuICAgIHVuaXF1ZVZhbGlkYXRvci5pc1JlcXVpcmVkLFxuICAgIGFycmF5VmFsaWRhdG9yLmlzUmVxdWlyZWQsXG4gIF0sIGAke25hbWV9LmlzUmVxdWlyZWRgKTtcblxuICByZXR1cm4gdmFsaWRhdG9yO1xufVxuIl19