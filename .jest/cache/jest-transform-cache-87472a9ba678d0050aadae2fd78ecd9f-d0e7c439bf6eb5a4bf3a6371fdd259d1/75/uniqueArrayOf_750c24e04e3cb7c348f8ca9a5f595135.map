{"version":3,"sources":["../src/uniqueArrayOf.js"],"names":["unique","rest","mapper","name","args","propValue","props","values","uniqueArrayOfMapped","array","arrayValidator","uniqueValidator","validator"],"mappings":"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","sourcesContent":["import { arrayOf, array } from 'prop-types';\nimport and from './and';\nimport uniqueArray from './uniqueArray';\n\nconst unique = uniqueArray();\n\nexport default function uniqueArrayOfTypeValidator(type, ...rest) {\n  if (typeof type !== 'function') {\n    throw new TypeError('type must be a validator function');\n  }\n\n  let mapper = null;\n  let name = 'uniqueArrayOfType';\n\n  if (rest.length === 1) {\n    if (typeof rest[0] === 'function') {\n      ([mapper] = rest);\n    } else if (typeof rest[0] === 'string') {\n      ([name] = rest);\n    } else {\n      throw new TypeError('single input must either be string or function');\n    }\n  } else if (rest.length === 2) {\n    if (typeof rest[0] === 'function' && typeof rest[1] === 'string') {\n      ([mapper, name] = rest);\n    } else {\n      throw new TypeError('multiple inputs must be in [function, string] order');\n    }\n  } else if (rest.length > 2) {\n    throw new TypeError('only [], [name], [mapper], and [mapper, name] are valid inputs');\n  }\n\n  function uniqueArrayOfMapped(props, propName, ...args) {\n    const { [propName]: propValue } = props;\n    if (propValue == null) {\n      return null;\n    }\n\n    const values = propValue.map(mapper);\n    return unique({ ...props, [propName]: values }, propName, ...args);\n  }\n\n  uniqueArrayOfMapped.isRequired = function isRequired(props, propName, ...args) {\n    const { [propName]: propValue } = props;\n    if (propValue == null) {\n      return array.isRequired(props, propName, ...args);\n    }\n    return uniqueArrayOfMapped(props, propName, ...args);\n  };\n\n  const arrayValidator = arrayOf(type);\n\n  const uniqueValidator = mapper ? uniqueArrayOfMapped : unique;\n\n  const validator = and([arrayValidator, uniqueValidator], name);\n  validator.isRequired = and([\n    uniqueValidator.isRequired,\n    arrayValidator.isRequired,\n  ], `${name}.isRequired`);\n\n  return validator;\n}\n"]}