00832f4b7326b223e8cc2929e674eb1b
"use strict";

module.exports = CSSselect;

var Pseudos = require("./lib/pseudos.js"),
    DomUtils = require("domutils"),
    findOne = DomUtils.findOne,
    findAll = DomUtils.findAll,
    getChildren = DomUtils.getChildren,
    removeSubsets = DomUtils.removeSubsets,
    falseFunc = require("boolbase").falseFunc,
    compile = require("./lib/compile.js"),
    compileUnsafe = compile.compileUnsafe,
    compileToken = compile.compileToken;

function getSelectorFunc(searchFunc) {
  return function select(query, elems, options) {
    if (typeof query !== "function") query = compileUnsafe(query, options, elems);
    if (!Array.isArray(elems)) elems = getChildren(elems);else elems = removeSubsets(elems);
    return searchFunc(query, elems);
  };
}

var selectAll = getSelectorFunc(function selectAll(query, elems) {
  return query === falseFunc || !elems || elems.length === 0 ? [] : findAll(query, elems);
});
var selectOne = getSelectorFunc(function selectOne(query, elems) {
  return query === falseFunc || !elems || elems.length === 0 ? null : findOne(query, elems);
});

function is(elem, query, options) {
  return (typeof query === "function" ? query : compile(query, options))(elem);
}
/*
	the exported interface
*/


function CSSselect(query, elems, options) {
  return selectAll(query, elems, options);
}

CSSselect.compile = compile;
CSSselect.filters = Pseudos.filters;
CSSselect.pseudos = Pseudos.pseudos;
CSSselect.selectAll = selectAll;
CSSselect.selectOne = selectOne;
CSSselect.is = is; //legacy methods (might be removed)

CSSselect.parse = compile;
CSSselect.iterate = selectAll; //hooks

CSSselect._compileUnsafe = compileUnsafe;
CSSselect._compileToken = compileToken;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJDU1NzZWxlY3QiLCJQc2V1ZG9zIiwicmVxdWlyZSIsIkRvbVV0aWxzIiwiZmluZE9uZSIsImZpbmRBbGwiLCJnZXRDaGlsZHJlbiIsInJlbW92ZVN1YnNldHMiLCJmYWxzZUZ1bmMiLCJjb21waWxlIiwiY29tcGlsZVVuc2FmZSIsImNvbXBpbGVUb2tlbiIsImdldFNlbGVjdG9yRnVuYyIsInNlYXJjaEZ1bmMiLCJzZWxlY3QiLCJxdWVyeSIsImVsZW1zIiwib3B0aW9ucyIsIkFycmF5IiwiaXNBcnJheSIsInNlbGVjdEFsbCIsImxlbmd0aCIsInNlbGVjdE9uZSIsImlzIiwiZWxlbSIsImZpbHRlcnMiLCJwc2V1ZG9zIiwicGFyc2UiLCJpdGVyYXRlIiwiX2NvbXBpbGVVbnNhZmUiLCJfY29tcGlsZVRva2VuIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQUEsTUFBTSxDQUFDQyxPQUFQLEdBQWlCQyxTQUFqQjs7QUFFQSxJQUFJQyxPQUFPLEdBQVNDLE9BQU8sQ0FBQyxrQkFBRCxDQUEzQjtBQUFBLElBQ0lDLFFBQVEsR0FBUUQsT0FBTyxDQUFDLFVBQUQsQ0FEM0I7QUFBQSxJQUVJRSxPQUFPLEdBQVNELFFBQVEsQ0FBQ0MsT0FGN0I7QUFBQSxJQUdJQyxPQUFPLEdBQVNGLFFBQVEsQ0FBQ0UsT0FIN0I7QUFBQSxJQUlJQyxXQUFXLEdBQUtILFFBQVEsQ0FBQ0csV0FKN0I7QUFBQSxJQUtJQyxhQUFhLEdBQUdKLFFBQVEsQ0FBQ0ksYUFMN0I7QUFBQSxJQU1JQyxTQUFTLEdBQU9OLE9BQU8sQ0FBQyxVQUFELENBQVAsQ0FBb0JNLFNBTnhDO0FBQUEsSUFPSUMsT0FBTyxHQUFTUCxPQUFPLENBQUMsa0JBQUQsQ0FQM0I7QUFBQSxJQVFJUSxhQUFhLEdBQUdELE9BQU8sQ0FBQ0MsYUFSNUI7QUFBQSxJQVNJQyxZQUFZLEdBQUlGLE9BQU8sQ0FBQ0UsWUFUNUI7O0FBV0EsU0FBU0MsZUFBVCxDQUF5QkMsVUFBekIsRUFBb0M7QUFDbkMsU0FBTyxTQUFTQyxNQUFULENBQWdCQyxLQUFoQixFQUF1QkMsS0FBdkIsRUFBOEJDLE9BQTlCLEVBQXNDO0FBQ3RDLFFBQUcsT0FBT0YsS0FBUCxLQUFpQixVQUFwQixFQUFnQ0EsS0FBSyxHQUFHTCxhQUFhLENBQUNLLEtBQUQsRUFBUUUsT0FBUixFQUFpQkQsS0FBakIsQ0FBckI7QUFDaEMsUUFBRyxDQUFDRSxLQUFLLENBQUNDLE9BQU4sQ0FBY0gsS0FBZCxDQUFKLEVBQTBCQSxLQUFLLEdBQUdWLFdBQVcsQ0FBQ1UsS0FBRCxDQUFuQixDQUExQixLQUNEQSxLQUFLLEdBQUdULGFBQWEsQ0FBQ1MsS0FBRCxDQUFyQjtBQUNMLFdBQU9ILFVBQVUsQ0FBQ0UsS0FBRCxFQUFRQyxLQUFSLENBQWpCO0FBQ0EsR0FMRDtBQU1BOztBQUVELElBQUlJLFNBQVMsR0FBR1IsZUFBZSxDQUFDLFNBQVNRLFNBQVQsQ0FBbUJMLEtBQW5CLEVBQTBCQyxLQUExQixFQUFnQztBQUMvRCxTQUFRRCxLQUFLLEtBQUtQLFNBQVYsSUFBdUIsQ0FBQ1EsS0FBeEIsSUFBaUNBLEtBQUssQ0FBQ0ssTUFBTixLQUFpQixDQUFuRCxHQUF3RCxFQUF4RCxHQUE2RGhCLE9BQU8sQ0FBQ1UsS0FBRCxFQUFRQyxLQUFSLENBQTNFO0FBQ0EsQ0FGOEIsQ0FBL0I7QUFJQSxJQUFJTSxTQUFTLEdBQUdWLGVBQWUsQ0FBQyxTQUFTVSxTQUFULENBQW1CUCxLQUFuQixFQUEwQkMsS0FBMUIsRUFBZ0M7QUFDL0QsU0FBUUQsS0FBSyxLQUFLUCxTQUFWLElBQXVCLENBQUNRLEtBQXhCLElBQWlDQSxLQUFLLENBQUNLLE1BQU4sS0FBaUIsQ0FBbkQsR0FBd0QsSUFBeEQsR0FBK0RqQixPQUFPLENBQUNXLEtBQUQsRUFBUUMsS0FBUixDQUE3RTtBQUNBLENBRjhCLENBQS9COztBQUlBLFNBQVNPLEVBQVQsQ0FBWUMsSUFBWixFQUFrQlQsS0FBbEIsRUFBeUJFLE9BQXpCLEVBQWlDO0FBQ2hDLFNBQU8sQ0FBQyxPQUFPRixLQUFQLEtBQWlCLFVBQWpCLEdBQThCQSxLQUE5QixHQUFzQ04sT0FBTyxDQUFDTSxLQUFELEVBQVFFLE9BQVIsQ0FBOUMsRUFBZ0VPLElBQWhFLENBQVA7QUFDQTtBQUVEOzs7OztBQUdBLFNBQVN4QixTQUFULENBQW1CZSxLQUFuQixFQUEwQkMsS0FBMUIsRUFBaUNDLE9BQWpDLEVBQXlDO0FBQ3hDLFNBQU9HLFNBQVMsQ0FBQ0wsS0FBRCxFQUFRQyxLQUFSLEVBQWVDLE9BQWYsQ0FBaEI7QUFDQTs7QUFFRGpCLFNBQVMsQ0FBQ1MsT0FBVixHQUFvQkEsT0FBcEI7QUFDQVQsU0FBUyxDQUFDeUIsT0FBVixHQUFvQnhCLE9BQU8sQ0FBQ3dCLE9BQTVCO0FBQ0F6QixTQUFTLENBQUMwQixPQUFWLEdBQW9CekIsT0FBTyxDQUFDeUIsT0FBNUI7QUFFQTFCLFNBQVMsQ0FBQ29CLFNBQVYsR0FBc0JBLFNBQXRCO0FBQ0FwQixTQUFTLENBQUNzQixTQUFWLEdBQXNCQSxTQUF0QjtBQUVBdEIsU0FBUyxDQUFDdUIsRUFBVixHQUFlQSxFQUFmLEMsQ0FFQTs7QUFDQXZCLFNBQVMsQ0FBQzJCLEtBQVYsR0FBa0JsQixPQUFsQjtBQUNBVCxTQUFTLENBQUM0QixPQUFWLEdBQW9CUixTQUFwQixDLENBRUE7O0FBQ0FwQixTQUFTLENBQUM2QixjQUFWLEdBQTJCbkIsYUFBM0I7QUFDQVYsU0FBUyxDQUFDOEIsYUFBVixHQUEwQm5CLFlBQTFCIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gQ1NTc2VsZWN0O1xuXG52YXIgUHNldWRvcyAgICAgICA9IHJlcXVpcmUoXCIuL2xpYi9wc2V1ZG9zLmpzXCIpLFxuICAgIERvbVV0aWxzICAgICAgPSByZXF1aXJlKFwiZG9tdXRpbHNcIiksXG4gICAgZmluZE9uZSAgICAgICA9IERvbVV0aWxzLmZpbmRPbmUsXG4gICAgZmluZEFsbCAgICAgICA9IERvbVV0aWxzLmZpbmRBbGwsXG4gICAgZ2V0Q2hpbGRyZW4gICA9IERvbVV0aWxzLmdldENoaWxkcmVuLFxuICAgIHJlbW92ZVN1YnNldHMgPSBEb21VdGlscy5yZW1vdmVTdWJzZXRzLFxuICAgIGZhbHNlRnVuYyAgICAgPSByZXF1aXJlKFwiYm9vbGJhc2VcIikuZmFsc2VGdW5jLFxuICAgIGNvbXBpbGUgICAgICAgPSByZXF1aXJlKFwiLi9saWIvY29tcGlsZS5qc1wiKSxcbiAgICBjb21waWxlVW5zYWZlID0gY29tcGlsZS5jb21waWxlVW5zYWZlLFxuICAgIGNvbXBpbGVUb2tlbiAgPSBjb21waWxlLmNvbXBpbGVUb2tlbjtcblxuZnVuY3Rpb24gZ2V0U2VsZWN0b3JGdW5jKHNlYXJjaEZ1bmMpe1xuXHRyZXR1cm4gZnVuY3Rpb24gc2VsZWN0KHF1ZXJ5LCBlbGVtcywgb3B0aW9ucyl7XG4gICAgICAgIGlmKHR5cGVvZiBxdWVyeSAhPT0gXCJmdW5jdGlvblwiKSBxdWVyeSA9IGNvbXBpbGVVbnNhZmUocXVlcnksIG9wdGlvbnMsIGVsZW1zKTtcbiAgICAgICAgaWYoIUFycmF5LmlzQXJyYXkoZWxlbXMpKSBlbGVtcyA9IGdldENoaWxkcmVuKGVsZW1zKTtcblx0XHRlbHNlIGVsZW1zID0gcmVtb3ZlU3Vic2V0cyhlbGVtcyk7XG5cdFx0cmV0dXJuIHNlYXJjaEZ1bmMocXVlcnksIGVsZW1zKTtcblx0fTtcbn1cblxudmFyIHNlbGVjdEFsbCA9IGdldFNlbGVjdG9yRnVuYyhmdW5jdGlvbiBzZWxlY3RBbGwocXVlcnksIGVsZW1zKXtcblx0cmV0dXJuIChxdWVyeSA9PT0gZmFsc2VGdW5jIHx8ICFlbGVtcyB8fCBlbGVtcy5sZW5ndGggPT09IDApID8gW10gOiBmaW5kQWxsKHF1ZXJ5LCBlbGVtcyk7XG59KTtcblxudmFyIHNlbGVjdE9uZSA9IGdldFNlbGVjdG9yRnVuYyhmdW5jdGlvbiBzZWxlY3RPbmUocXVlcnksIGVsZW1zKXtcblx0cmV0dXJuIChxdWVyeSA9PT0gZmFsc2VGdW5jIHx8ICFlbGVtcyB8fCBlbGVtcy5sZW5ndGggPT09IDApID8gbnVsbCA6IGZpbmRPbmUocXVlcnksIGVsZW1zKTtcbn0pO1xuXG5mdW5jdGlvbiBpcyhlbGVtLCBxdWVyeSwgb3B0aW9ucyl7XG5cdHJldHVybiAodHlwZW9mIHF1ZXJ5ID09PSBcImZ1bmN0aW9uXCIgPyBxdWVyeSA6IGNvbXBpbGUocXVlcnksIG9wdGlvbnMpKShlbGVtKTtcbn1cblxuLypcblx0dGhlIGV4cG9ydGVkIGludGVyZmFjZVxuKi9cbmZ1bmN0aW9uIENTU3NlbGVjdChxdWVyeSwgZWxlbXMsIG9wdGlvbnMpe1xuXHRyZXR1cm4gc2VsZWN0QWxsKHF1ZXJ5LCBlbGVtcywgb3B0aW9ucyk7XG59XG5cbkNTU3NlbGVjdC5jb21waWxlID0gY29tcGlsZTtcbkNTU3NlbGVjdC5maWx0ZXJzID0gUHNldWRvcy5maWx0ZXJzO1xuQ1NTc2VsZWN0LnBzZXVkb3MgPSBQc2V1ZG9zLnBzZXVkb3M7XG5cbkNTU3NlbGVjdC5zZWxlY3RBbGwgPSBzZWxlY3RBbGw7XG5DU1NzZWxlY3Quc2VsZWN0T25lID0gc2VsZWN0T25lO1xuXG5DU1NzZWxlY3QuaXMgPSBpcztcblxuLy9sZWdhY3kgbWV0aG9kcyAobWlnaHQgYmUgcmVtb3ZlZClcbkNTU3NlbGVjdC5wYXJzZSA9IGNvbXBpbGU7XG5DU1NzZWxlY3QuaXRlcmF0ZSA9IHNlbGVjdEFsbDtcblxuLy9ob29rc1xuQ1NTc2VsZWN0Ll9jb21waWxlVW5zYWZlID0gY29tcGlsZVVuc2FmZTtcbkNTU3NlbGVjdC5fY29tcGlsZVRva2VuID0gY29tcGlsZVRva2VuO1xuIl19