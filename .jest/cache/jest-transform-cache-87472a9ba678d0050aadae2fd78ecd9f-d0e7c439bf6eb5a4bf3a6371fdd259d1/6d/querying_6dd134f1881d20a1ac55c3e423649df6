a4ad544e17e37c706f05c4d1f191b0d0
var isTag = require("domelementtype").isTag;

module.exports = {
  filter: filter,
  find: find,
  findOneChild: findOneChild,
  findOne: findOne,
  existsOne: existsOne,
  findAll: findAll
};

function filter(test, element, recurse, limit) {
  if (!Array.isArray(element)) element = [element];

  if (typeof limit !== "number" || !isFinite(limit)) {
    limit = Infinity;
  }

  return find(test, element, recurse !== false, limit);
}

function find(test, elems, recurse, limit) {
  var result = [],
      childs;

  for (var i = 0, j = elems.length; i < j; i++) {
    if (test(elems[i])) {
      result.push(elems[i]);
      if (--limit <= 0) break;
    }

    childs = elems[i].children;

    if (recurse && childs && childs.length > 0) {
      childs = find(test, childs, recurse, limit);
      result = result.concat(childs);
      limit -= childs.length;
      if (limit <= 0) break;
    }
  }

  return result;
}

function findOneChild(test, elems) {
  for (var i = 0, l = elems.length; i < l; i++) {
    if (test(elems[i])) return elems[i];
  }

  return null;
}

function findOne(test, elems) {
  var elem = null;

  for (var i = 0, l = elems.length; i < l && !elem; i++) {
    if (!isTag(elems[i])) {
      continue;
    } else if (test(elems[i])) {
      elem = elems[i];
    } else if (elems[i].children.length > 0) {
      elem = findOne(test, elems[i].children);
    }
  }

  return elem;
}

function existsOne(test, elems) {
  for (var i = 0, l = elems.length; i < l; i++) {
    if (isTag(elems[i]) && (test(elems[i]) || elems[i].children.length > 0 && existsOne(test, elems[i].children))) {
      return true;
    }
  }

  return false;
}

function findAll(test, rootElems) {
  var result = [];
  var stack = rootElems.slice();

  while (stack.length) {
    var elem = stack.shift();
    if (!isTag(elem)) continue;

    if (elem.children && elem.children.length > 0) {
      stack.unshift.apply(stack, elem.children);
    }

    if (test(elem)) result.push(elem);
  }

  return result;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInF1ZXJ5aW5nLmpzIl0sIm5hbWVzIjpbImlzVGFnIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJmaWx0ZXIiLCJmaW5kIiwiZmluZE9uZUNoaWxkIiwiZmluZE9uZSIsImV4aXN0c09uZSIsImZpbmRBbGwiLCJ0ZXN0IiwiZWxlbWVudCIsInJlY3Vyc2UiLCJsaW1pdCIsIkFycmF5IiwiaXNBcnJheSIsImlzRmluaXRlIiwiSW5maW5pdHkiLCJlbGVtcyIsInJlc3VsdCIsImNoaWxkcyIsImkiLCJqIiwibGVuZ3RoIiwicHVzaCIsImNoaWxkcmVuIiwiY29uY2F0IiwibCIsImVsZW0iLCJyb290RWxlbXMiLCJzdGFjayIsInNsaWNlIiwic2hpZnQiLCJ1bnNoaWZ0IiwiYXBwbHkiXSwibWFwcGluZ3MiOiJBQUFBLElBQUlBLEtBQUssR0FBR0MsT0FBTyxDQUFDLGdCQUFELENBQVAsQ0FBMEJELEtBQXRDOztBQUVBRSxNQUFNLENBQUNDLE9BQVAsR0FBaUI7QUFDaEJDLEVBQUFBLE1BQU0sRUFBRUEsTUFEUTtBQUVoQkMsRUFBQUEsSUFBSSxFQUFFQSxJQUZVO0FBR2hCQyxFQUFBQSxZQUFZLEVBQUVBLFlBSEU7QUFJaEJDLEVBQUFBLE9BQU8sRUFBRUEsT0FKTztBQUtoQkMsRUFBQUEsU0FBUyxFQUFFQSxTQUxLO0FBTWhCQyxFQUFBQSxPQUFPLEVBQUVBO0FBTk8sQ0FBakI7O0FBU0EsU0FBU0wsTUFBVCxDQUFnQk0sSUFBaEIsRUFBc0JDLE9BQXRCLEVBQStCQyxPQUEvQixFQUF3Q0MsS0FBeEMsRUFBOEM7QUFDN0MsTUFBRyxDQUFDQyxLQUFLLENBQUNDLE9BQU4sQ0FBY0osT0FBZCxDQUFKLEVBQTRCQSxPQUFPLEdBQUcsQ0FBQ0EsT0FBRCxDQUFWOztBQUU1QixNQUFHLE9BQU9FLEtBQVAsS0FBaUIsUUFBakIsSUFBNkIsQ0FBQ0csUUFBUSxDQUFDSCxLQUFELENBQXpDLEVBQWlEO0FBQ2hEQSxJQUFBQSxLQUFLLEdBQUdJLFFBQVI7QUFDQTs7QUFDRCxTQUFPWixJQUFJLENBQUNLLElBQUQsRUFBT0MsT0FBUCxFQUFnQkMsT0FBTyxLQUFLLEtBQTVCLEVBQW1DQyxLQUFuQyxDQUFYO0FBQ0E7O0FBRUQsU0FBU1IsSUFBVCxDQUFjSyxJQUFkLEVBQW9CUSxLQUFwQixFQUEyQk4sT0FBM0IsRUFBb0NDLEtBQXBDLEVBQTBDO0FBQ3pDLE1BQUlNLE1BQU0sR0FBRyxFQUFiO0FBQUEsTUFBaUJDLE1BQWpCOztBQUVBLE9BQUksSUFBSUMsQ0FBQyxHQUFHLENBQVIsRUFBV0MsQ0FBQyxHQUFHSixLQUFLLENBQUNLLE1BQXpCLEVBQWlDRixDQUFDLEdBQUdDLENBQXJDLEVBQXdDRCxDQUFDLEVBQXpDLEVBQTRDO0FBQzNDLFFBQUdYLElBQUksQ0FBQ1EsS0FBSyxDQUFDRyxDQUFELENBQU4sQ0FBUCxFQUFrQjtBQUNqQkYsTUFBQUEsTUFBTSxDQUFDSyxJQUFQLENBQVlOLEtBQUssQ0FBQ0csQ0FBRCxDQUFqQjtBQUNBLFVBQUcsRUFBRVIsS0FBRixJQUFXLENBQWQsRUFBaUI7QUFDakI7O0FBRURPLElBQUFBLE1BQU0sR0FBR0YsS0FBSyxDQUFDRyxDQUFELENBQUwsQ0FBU0ksUUFBbEI7O0FBQ0EsUUFBR2IsT0FBTyxJQUFJUSxNQUFYLElBQXFCQSxNQUFNLENBQUNHLE1BQVAsR0FBZ0IsQ0FBeEMsRUFBMEM7QUFDekNILE1BQUFBLE1BQU0sR0FBR2YsSUFBSSxDQUFDSyxJQUFELEVBQU9VLE1BQVAsRUFBZVIsT0FBZixFQUF3QkMsS0FBeEIsQ0FBYjtBQUNBTSxNQUFBQSxNQUFNLEdBQUdBLE1BQU0sQ0FBQ08sTUFBUCxDQUFjTixNQUFkLENBQVQ7QUFDQVAsTUFBQUEsS0FBSyxJQUFJTyxNQUFNLENBQUNHLE1BQWhCO0FBQ0EsVUFBR1YsS0FBSyxJQUFJLENBQVosRUFBZTtBQUNmO0FBQ0Q7O0FBRUQsU0FBT00sTUFBUDtBQUNBOztBQUVELFNBQVNiLFlBQVQsQ0FBc0JJLElBQXRCLEVBQTRCUSxLQUE1QixFQUFrQztBQUNqQyxPQUFJLElBQUlHLENBQUMsR0FBRyxDQUFSLEVBQVdNLENBQUMsR0FBR1QsS0FBSyxDQUFDSyxNQUF6QixFQUFpQ0YsQ0FBQyxHQUFHTSxDQUFyQyxFQUF3Q04sQ0FBQyxFQUF6QyxFQUE0QztBQUMzQyxRQUFHWCxJQUFJLENBQUNRLEtBQUssQ0FBQ0csQ0FBRCxDQUFOLENBQVAsRUFBbUIsT0FBT0gsS0FBSyxDQUFDRyxDQUFELENBQVo7QUFDbkI7O0FBRUQsU0FBTyxJQUFQO0FBQ0E7O0FBRUQsU0FBU2QsT0FBVCxDQUFpQkcsSUFBakIsRUFBdUJRLEtBQXZCLEVBQTZCO0FBQzVCLE1BQUlVLElBQUksR0FBRyxJQUFYOztBQUVBLE9BQUksSUFBSVAsQ0FBQyxHQUFHLENBQVIsRUFBV00sQ0FBQyxHQUFHVCxLQUFLLENBQUNLLE1BQXpCLEVBQWlDRixDQUFDLEdBQUdNLENBQUosSUFBUyxDQUFDQyxJQUEzQyxFQUFpRFAsQ0FBQyxFQUFsRCxFQUFxRDtBQUNwRCxRQUFHLENBQUNyQixLQUFLLENBQUNrQixLQUFLLENBQUNHLENBQUQsQ0FBTixDQUFULEVBQW9CO0FBQ25CO0FBQ0EsS0FGRCxNQUVPLElBQUdYLElBQUksQ0FBQ1EsS0FBSyxDQUFDRyxDQUFELENBQU4sQ0FBUCxFQUFrQjtBQUN4Qk8sTUFBQUEsSUFBSSxHQUFHVixLQUFLLENBQUNHLENBQUQsQ0FBWjtBQUNBLEtBRk0sTUFFQSxJQUFHSCxLQUFLLENBQUNHLENBQUQsQ0FBTCxDQUFTSSxRQUFULENBQWtCRixNQUFsQixHQUEyQixDQUE5QixFQUFnQztBQUN0Q0ssTUFBQUEsSUFBSSxHQUFHckIsT0FBTyxDQUFDRyxJQUFELEVBQU9RLEtBQUssQ0FBQ0csQ0FBRCxDQUFMLENBQVNJLFFBQWhCLENBQWQ7QUFDQTtBQUNEOztBQUVELFNBQU9HLElBQVA7QUFDQTs7QUFFRCxTQUFTcEIsU0FBVCxDQUFtQkUsSUFBbkIsRUFBeUJRLEtBQXpCLEVBQStCO0FBQzlCLE9BQUksSUFBSUcsQ0FBQyxHQUFHLENBQVIsRUFBV00sQ0FBQyxHQUFHVCxLQUFLLENBQUNLLE1BQXpCLEVBQWlDRixDQUFDLEdBQUdNLENBQXJDLEVBQXdDTixDQUFDLEVBQXpDLEVBQTRDO0FBQzNDLFFBQ0NyQixLQUFLLENBQUNrQixLQUFLLENBQUNHLENBQUQsQ0FBTixDQUFMLEtBQ0NYLElBQUksQ0FBQ1EsS0FBSyxDQUFDRyxDQUFELENBQU4sQ0FBSixJQUNDSCxLQUFLLENBQUNHLENBQUQsQ0FBTCxDQUFTSSxRQUFULENBQWtCRixNQUFsQixHQUEyQixDQUEzQixJQUNBZixTQUFTLENBQUNFLElBQUQsRUFBT1EsS0FBSyxDQUFDRyxDQUFELENBQUwsQ0FBU0ksUUFBaEIsQ0FIWCxDQURELEVBT0M7QUFDQSxhQUFPLElBQVA7QUFDQTtBQUNEOztBQUVELFNBQU8sS0FBUDtBQUNBOztBQUVELFNBQVNoQixPQUFULENBQWlCQyxJQUFqQixFQUF1Qm1CLFNBQXZCLEVBQWlDO0FBQ2hDLE1BQUlWLE1BQU0sR0FBRyxFQUFiO0FBQ0EsTUFBSVcsS0FBSyxHQUFHRCxTQUFTLENBQUNFLEtBQVYsRUFBWjs7QUFDQSxTQUFNRCxLQUFLLENBQUNQLE1BQVosRUFBbUI7QUFDbEIsUUFBSUssSUFBSSxHQUFHRSxLQUFLLENBQUNFLEtBQU4sRUFBWDtBQUNBLFFBQUcsQ0FBQ2hDLEtBQUssQ0FBQzRCLElBQUQsQ0FBVCxFQUFpQjs7QUFDakIsUUFBSUEsSUFBSSxDQUFDSCxRQUFMLElBQWlCRyxJQUFJLENBQUNILFFBQUwsQ0FBY0YsTUFBZCxHQUF1QixDQUE1QyxFQUErQztBQUM5Q08sTUFBQUEsS0FBSyxDQUFDRyxPQUFOLENBQWNDLEtBQWQsQ0FBb0JKLEtBQXBCLEVBQTJCRixJQUFJLENBQUNILFFBQWhDO0FBQ0E7O0FBQ0QsUUFBR2YsSUFBSSxDQUFDa0IsSUFBRCxDQUFQLEVBQWVULE1BQU0sQ0FBQ0ssSUFBUCxDQUFZSSxJQUFaO0FBQ2Y7O0FBQ0QsU0FBT1QsTUFBUDtBQUNBIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGlzVGFnID0gcmVxdWlyZShcImRvbWVsZW1lbnR0eXBlXCIpLmlzVGFnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblx0ZmlsdGVyOiBmaWx0ZXIsXG5cdGZpbmQ6IGZpbmQsXG5cdGZpbmRPbmVDaGlsZDogZmluZE9uZUNoaWxkLFxuXHRmaW5kT25lOiBmaW5kT25lLFxuXHRleGlzdHNPbmU6IGV4aXN0c09uZSxcblx0ZmluZEFsbDogZmluZEFsbFxufTtcblxuZnVuY3Rpb24gZmlsdGVyKHRlc3QsIGVsZW1lbnQsIHJlY3Vyc2UsIGxpbWl0KXtcblx0aWYoIUFycmF5LmlzQXJyYXkoZWxlbWVudCkpIGVsZW1lbnQgPSBbZWxlbWVudF07XG5cblx0aWYodHlwZW9mIGxpbWl0ICE9PSBcIm51bWJlclwiIHx8ICFpc0Zpbml0ZShsaW1pdCkpe1xuXHRcdGxpbWl0ID0gSW5maW5pdHk7XG5cdH1cblx0cmV0dXJuIGZpbmQodGVzdCwgZWxlbWVudCwgcmVjdXJzZSAhPT0gZmFsc2UsIGxpbWl0KTtcbn1cblxuZnVuY3Rpb24gZmluZCh0ZXN0LCBlbGVtcywgcmVjdXJzZSwgbGltaXQpe1xuXHR2YXIgcmVzdWx0ID0gW10sIGNoaWxkcztcblxuXHRmb3IodmFyIGkgPSAwLCBqID0gZWxlbXMubGVuZ3RoOyBpIDwgajsgaSsrKXtcblx0XHRpZih0ZXN0KGVsZW1zW2ldKSl7XG5cdFx0XHRyZXN1bHQucHVzaChlbGVtc1tpXSk7XG5cdFx0XHRpZigtLWxpbWl0IDw9IDApIGJyZWFrO1xuXHRcdH1cblxuXHRcdGNoaWxkcyA9IGVsZW1zW2ldLmNoaWxkcmVuO1xuXHRcdGlmKHJlY3Vyc2UgJiYgY2hpbGRzICYmIGNoaWxkcy5sZW5ndGggPiAwKXtcblx0XHRcdGNoaWxkcyA9IGZpbmQodGVzdCwgY2hpbGRzLCByZWN1cnNlLCBsaW1pdCk7XG5cdFx0XHRyZXN1bHQgPSByZXN1bHQuY29uY2F0KGNoaWxkcyk7XG5cdFx0XHRsaW1pdCAtPSBjaGlsZHMubGVuZ3RoO1xuXHRcdFx0aWYobGltaXQgPD0gMCkgYnJlYWs7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gZmluZE9uZUNoaWxkKHRlc3QsIGVsZW1zKXtcblx0Zm9yKHZhciBpID0gMCwgbCA9IGVsZW1zLmxlbmd0aDsgaSA8IGw7IGkrKyl7XG5cdFx0aWYodGVzdChlbGVtc1tpXSkpIHJldHVybiBlbGVtc1tpXTtcblx0fVxuXG5cdHJldHVybiBudWxsO1xufVxuXG5mdW5jdGlvbiBmaW5kT25lKHRlc3QsIGVsZW1zKXtcblx0dmFyIGVsZW0gPSBudWxsO1xuXG5cdGZvcih2YXIgaSA9IDAsIGwgPSBlbGVtcy5sZW5ndGg7IGkgPCBsICYmICFlbGVtOyBpKyspe1xuXHRcdGlmKCFpc1RhZyhlbGVtc1tpXSkpe1xuXHRcdFx0Y29udGludWU7XG5cdFx0fSBlbHNlIGlmKHRlc3QoZWxlbXNbaV0pKXtcblx0XHRcdGVsZW0gPSBlbGVtc1tpXTtcblx0XHR9IGVsc2UgaWYoZWxlbXNbaV0uY2hpbGRyZW4ubGVuZ3RoID4gMCl7XG5cdFx0XHRlbGVtID0gZmluZE9uZSh0ZXN0LCBlbGVtc1tpXS5jaGlsZHJlbik7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW07XG59XG5cbmZ1bmN0aW9uIGV4aXN0c09uZSh0ZXN0LCBlbGVtcyl7XG5cdGZvcih2YXIgaSA9IDAsIGwgPSBlbGVtcy5sZW5ndGg7IGkgPCBsOyBpKyspe1xuXHRcdGlmKFxuXHRcdFx0aXNUYWcoZWxlbXNbaV0pICYmIChcblx0XHRcdFx0dGVzdChlbGVtc1tpXSkgfHwgKFxuXHRcdFx0XHRcdGVsZW1zW2ldLmNoaWxkcmVuLmxlbmd0aCA+IDAgJiZcblx0XHRcdFx0XHRleGlzdHNPbmUodGVzdCwgZWxlbXNbaV0uY2hpbGRyZW4pXG5cdFx0XHRcdClcblx0XHRcdClcblx0XHQpe1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBmaW5kQWxsKHRlc3QsIHJvb3RFbGVtcyl7XG5cdHZhciByZXN1bHQgPSBbXTtcblx0dmFyIHN0YWNrID0gcm9vdEVsZW1zLnNsaWNlKCk7XG5cdHdoaWxlKHN0YWNrLmxlbmd0aCl7XG5cdFx0dmFyIGVsZW0gPSBzdGFjay5zaGlmdCgpO1xuXHRcdGlmKCFpc1RhZyhlbGVtKSkgY29udGludWU7XG5cdFx0aWYgKGVsZW0uY2hpbGRyZW4gJiYgZWxlbS5jaGlsZHJlbi5sZW5ndGggPiAwKSB7XG5cdFx0XHRzdGFjay51bnNoaWZ0LmFwcGx5KHN0YWNrLCBlbGVtLmNoaWxkcmVuKTtcblx0XHR9XG5cdFx0aWYodGVzdChlbGVtKSkgcmVzdWx0LnB1c2goZWxlbSk7XG5cdH1cblx0cmV0dXJuIHJlc3VsdDtcbn1cbiJdfQ==