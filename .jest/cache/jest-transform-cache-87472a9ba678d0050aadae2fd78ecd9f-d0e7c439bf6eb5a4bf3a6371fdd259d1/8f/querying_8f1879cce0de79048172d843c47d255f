46a7d104fb0c125ddddca0eb2c406dd9
var isTag = require("domelementtype").isTag;

module.exports = {
  filter: filter,
  find: find,
  findOneChild: findOneChild,
  findOne: findOne,
  existsOne: existsOne,
  findAll: findAll
};

function filter(test, element, recurse, limit) {
  if (!Array.isArray(element)) element = [element];

  if (typeof limit !== "number" || !isFinite(limit)) {
    limit = Infinity;
  }

  return find(test, element, recurse !== false, limit);
}

function find(test, elems, recurse, limit) {
  var result = [],
      childs;

  for (var i = 0, j = elems.length; i < j; i++) {
    if (test(elems[i])) {
      result.push(elems[i]);
      if (--limit <= 0) break;
    }

    childs = elems[i].children;

    if (recurse && childs && childs.length > 0) {
      childs = find(test, childs, recurse, limit);
      result = result.concat(childs);
      limit -= childs.length;
      if (limit <= 0) break;
    }
  }

  return result;
}

function findOneChild(test, elems) {
  for (var i = 0, l = elems.length; i < l; i++) {
    if (test(elems[i])) return elems[i];
  }

  return null;
}

function findOne(test, elems) {
  var elem = null;

  for (var i = 0, l = elems.length; i < l && !elem; i++) {
    if (!isTag(elems[i])) {
      continue;
    } else if (test(elems[i])) {
      elem = elems[i];
    } else if (elems[i].children.length > 0) {
      elem = findOne(test, elems[i].children);
    }
  }

  return elem;
}

function existsOne(test, elems) {
  for (var i = 0, l = elems.length; i < l; i++) {
    if (isTag(elems[i]) && (test(elems[i]) || elems[i].children.length > 0 && existsOne(test, elems[i].children))) {
      return true;
    }
  }

  return false;
}

function findAll(test, elems) {
  var result = [];

  for (var i = 0, j = elems.length; i < j; i++) {
    if (!isTag(elems[i])) continue;
    if (test(elems[i])) result.push(elems[i]);

    if (elems[i].children.length > 0) {
      result = result.concat(findAll(test, elems[i].children));
    }
  }

  return result;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInF1ZXJ5aW5nLmpzIl0sIm5hbWVzIjpbImlzVGFnIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJmaWx0ZXIiLCJmaW5kIiwiZmluZE9uZUNoaWxkIiwiZmluZE9uZSIsImV4aXN0c09uZSIsImZpbmRBbGwiLCJ0ZXN0IiwiZWxlbWVudCIsInJlY3Vyc2UiLCJsaW1pdCIsIkFycmF5IiwiaXNBcnJheSIsImlzRmluaXRlIiwiSW5maW5pdHkiLCJlbGVtcyIsInJlc3VsdCIsImNoaWxkcyIsImkiLCJqIiwibGVuZ3RoIiwicHVzaCIsImNoaWxkcmVuIiwiY29uY2F0IiwibCIsImVsZW0iXSwibWFwcGluZ3MiOiJBQUFBLElBQUlBLEtBQUssR0FBR0MsT0FBTyxDQUFDLGdCQUFELENBQVAsQ0FBMEJELEtBQXRDOztBQUVBRSxNQUFNLENBQUNDLE9BQVAsR0FBaUI7QUFDaEJDLEVBQUFBLE1BQU0sRUFBRUEsTUFEUTtBQUVoQkMsRUFBQUEsSUFBSSxFQUFFQSxJQUZVO0FBR2hCQyxFQUFBQSxZQUFZLEVBQUVBLFlBSEU7QUFJaEJDLEVBQUFBLE9BQU8sRUFBRUEsT0FKTztBQUtoQkMsRUFBQUEsU0FBUyxFQUFFQSxTQUxLO0FBTWhCQyxFQUFBQSxPQUFPLEVBQUVBO0FBTk8sQ0FBakI7O0FBU0EsU0FBU0wsTUFBVCxDQUFnQk0sSUFBaEIsRUFBc0JDLE9BQXRCLEVBQStCQyxPQUEvQixFQUF3Q0MsS0FBeEMsRUFBOEM7QUFDN0MsTUFBRyxDQUFDQyxLQUFLLENBQUNDLE9BQU4sQ0FBY0osT0FBZCxDQUFKLEVBQTRCQSxPQUFPLEdBQUcsQ0FBQ0EsT0FBRCxDQUFWOztBQUU1QixNQUFHLE9BQU9FLEtBQVAsS0FBaUIsUUFBakIsSUFBNkIsQ0FBQ0csUUFBUSxDQUFDSCxLQUFELENBQXpDLEVBQWlEO0FBQ2hEQSxJQUFBQSxLQUFLLEdBQUdJLFFBQVI7QUFDQTs7QUFDRCxTQUFPWixJQUFJLENBQUNLLElBQUQsRUFBT0MsT0FBUCxFQUFnQkMsT0FBTyxLQUFLLEtBQTVCLEVBQW1DQyxLQUFuQyxDQUFYO0FBQ0E7O0FBRUQsU0FBU1IsSUFBVCxDQUFjSyxJQUFkLEVBQW9CUSxLQUFwQixFQUEyQk4sT0FBM0IsRUFBb0NDLEtBQXBDLEVBQTBDO0FBQ3pDLE1BQUlNLE1BQU0sR0FBRyxFQUFiO0FBQUEsTUFBaUJDLE1BQWpCOztBQUVBLE9BQUksSUFBSUMsQ0FBQyxHQUFHLENBQVIsRUFBV0MsQ0FBQyxHQUFHSixLQUFLLENBQUNLLE1BQXpCLEVBQWlDRixDQUFDLEdBQUdDLENBQXJDLEVBQXdDRCxDQUFDLEVBQXpDLEVBQTRDO0FBQzNDLFFBQUdYLElBQUksQ0FBQ1EsS0FBSyxDQUFDRyxDQUFELENBQU4sQ0FBUCxFQUFrQjtBQUNqQkYsTUFBQUEsTUFBTSxDQUFDSyxJQUFQLENBQVlOLEtBQUssQ0FBQ0csQ0FBRCxDQUFqQjtBQUNBLFVBQUcsRUFBRVIsS0FBRixJQUFXLENBQWQsRUFBaUI7QUFDakI7O0FBRURPLElBQUFBLE1BQU0sR0FBR0YsS0FBSyxDQUFDRyxDQUFELENBQUwsQ0FBU0ksUUFBbEI7O0FBQ0EsUUFBR2IsT0FBTyxJQUFJUSxNQUFYLElBQXFCQSxNQUFNLENBQUNHLE1BQVAsR0FBZ0IsQ0FBeEMsRUFBMEM7QUFDekNILE1BQUFBLE1BQU0sR0FBR2YsSUFBSSxDQUFDSyxJQUFELEVBQU9VLE1BQVAsRUFBZVIsT0FBZixFQUF3QkMsS0FBeEIsQ0FBYjtBQUNBTSxNQUFBQSxNQUFNLEdBQUdBLE1BQU0sQ0FBQ08sTUFBUCxDQUFjTixNQUFkLENBQVQ7QUFDQVAsTUFBQUEsS0FBSyxJQUFJTyxNQUFNLENBQUNHLE1BQWhCO0FBQ0EsVUFBR1YsS0FBSyxJQUFJLENBQVosRUFBZTtBQUNmO0FBQ0Q7O0FBRUQsU0FBT00sTUFBUDtBQUNBOztBQUVELFNBQVNiLFlBQVQsQ0FBc0JJLElBQXRCLEVBQTRCUSxLQUE1QixFQUFrQztBQUNqQyxPQUFJLElBQUlHLENBQUMsR0FBRyxDQUFSLEVBQVdNLENBQUMsR0FBR1QsS0FBSyxDQUFDSyxNQUF6QixFQUFpQ0YsQ0FBQyxHQUFHTSxDQUFyQyxFQUF3Q04sQ0FBQyxFQUF6QyxFQUE0QztBQUMzQyxRQUFHWCxJQUFJLENBQUNRLEtBQUssQ0FBQ0csQ0FBRCxDQUFOLENBQVAsRUFBbUIsT0FBT0gsS0FBSyxDQUFDRyxDQUFELENBQVo7QUFDbkI7O0FBRUQsU0FBTyxJQUFQO0FBQ0E7O0FBRUQsU0FBU2QsT0FBVCxDQUFpQkcsSUFBakIsRUFBdUJRLEtBQXZCLEVBQTZCO0FBQzVCLE1BQUlVLElBQUksR0FBRyxJQUFYOztBQUVBLE9BQUksSUFBSVAsQ0FBQyxHQUFHLENBQVIsRUFBV00sQ0FBQyxHQUFHVCxLQUFLLENBQUNLLE1BQXpCLEVBQWlDRixDQUFDLEdBQUdNLENBQUosSUFBUyxDQUFDQyxJQUEzQyxFQUFpRFAsQ0FBQyxFQUFsRCxFQUFxRDtBQUNwRCxRQUFHLENBQUNyQixLQUFLLENBQUNrQixLQUFLLENBQUNHLENBQUQsQ0FBTixDQUFULEVBQW9CO0FBQ25CO0FBQ0EsS0FGRCxNQUVPLElBQUdYLElBQUksQ0FBQ1EsS0FBSyxDQUFDRyxDQUFELENBQU4sQ0FBUCxFQUFrQjtBQUN4Qk8sTUFBQUEsSUFBSSxHQUFHVixLQUFLLENBQUNHLENBQUQsQ0FBWjtBQUNBLEtBRk0sTUFFQSxJQUFHSCxLQUFLLENBQUNHLENBQUQsQ0FBTCxDQUFTSSxRQUFULENBQWtCRixNQUFsQixHQUEyQixDQUE5QixFQUFnQztBQUN0Q0ssTUFBQUEsSUFBSSxHQUFHckIsT0FBTyxDQUFDRyxJQUFELEVBQU9RLEtBQUssQ0FBQ0csQ0FBRCxDQUFMLENBQVNJLFFBQWhCLENBQWQ7QUFDQTtBQUNEOztBQUVELFNBQU9HLElBQVA7QUFDQTs7QUFFRCxTQUFTcEIsU0FBVCxDQUFtQkUsSUFBbkIsRUFBeUJRLEtBQXpCLEVBQStCO0FBQzlCLE9BQUksSUFBSUcsQ0FBQyxHQUFHLENBQVIsRUFBV00sQ0FBQyxHQUFHVCxLQUFLLENBQUNLLE1BQXpCLEVBQWlDRixDQUFDLEdBQUdNLENBQXJDLEVBQXdDTixDQUFDLEVBQXpDLEVBQTRDO0FBQzNDLFFBQ0NyQixLQUFLLENBQUNrQixLQUFLLENBQUNHLENBQUQsQ0FBTixDQUFMLEtBQ0NYLElBQUksQ0FBQ1EsS0FBSyxDQUFDRyxDQUFELENBQU4sQ0FBSixJQUNDSCxLQUFLLENBQUNHLENBQUQsQ0FBTCxDQUFTSSxRQUFULENBQWtCRixNQUFsQixHQUEyQixDQUEzQixJQUNBZixTQUFTLENBQUNFLElBQUQsRUFBT1EsS0FBSyxDQUFDRyxDQUFELENBQUwsQ0FBU0ksUUFBaEIsQ0FIWCxDQURELEVBT0M7QUFDQSxhQUFPLElBQVA7QUFDQTtBQUNEOztBQUVELFNBQU8sS0FBUDtBQUNBOztBQUVELFNBQVNoQixPQUFULENBQWlCQyxJQUFqQixFQUF1QlEsS0FBdkIsRUFBNkI7QUFDNUIsTUFBSUMsTUFBTSxHQUFHLEVBQWI7O0FBQ0EsT0FBSSxJQUFJRSxDQUFDLEdBQUcsQ0FBUixFQUFXQyxDQUFDLEdBQUdKLEtBQUssQ0FBQ0ssTUFBekIsRUFBaUNGLENBQUMsR0FBR0MsQ0FBckMsRUFBd0NELENBQUMsRUFBekMsRUFBNEM7QUFDM0MsUUFBRyxDQUFDckIsS0FBSyxDQUFDa0IsS0FBSyxDQUFDRyxDQUFELENBQU4sQ0FBVCxFQUFxQjtBQUNyQixRQUFHWCxJQUFJLENBQUNRLEtBQUssQ0FBQ0csQ0FBRCxDQUFOLENBQVAsRUFBbUJGLE1BQU0sQ0FBQ0ssSUFBUCxDQUFZTixLQUFLLENBQUNHLENBQUQsQ0FBakI7O0FBRW5CLFFBQUdILEtBQUssQ0FBQ0csQ0FBRCxDQUFMLENBQVNJLFFBQVQsQ0FBa0JGLE1BQWxCLEdBQTJCLENBQTlCLEVBQWdDO0FBQy9CSixNQUFBQSxNQUFNLEdBQUdBLE1BQU0sQ0FBQ08sTUFBUCxDQUFjakIsT0FBTyxDQUFDQyxJQUFELEVBQU9RLEtBQUssQ0FBQ0csQ0FBRCxDQUFMLENBQVNJLFFBQWhCLENBQXJCLENBQVQ7QUFDQTtBQUNEOztBQUNELFNBQU9OLE1BQVA7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbInZhciBpc1RhZyA9IHJlcXVpcmUoXCJkb21lbGVtZW50dHlwZVwiKS5pc1RhZztcblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cdGZpbHRlcjogZmlsdGVyLFxuXHRmaW5kOiBmaW5kLFxuXHRmaW5kT25lQ2hpbGQ6IGZpbmRPbmVDaGlsZCxcblx0ZmluZE9uZTogZmluZE9uZSxcblx0ZXhpc3RzT25lOiBleGlzdHNPbmUsXG5cdGZpbmRBbGw6IGZpbmRBbGxcbn07XG5cbmZ1bmN0aW9uIGZpbHRlcih0ZXN0LCBlbGVtZW50LCByZWN1cnNlLCBsaW1pdCl7XG5cdGlmKCFBcnJheS5pc0FycmF5KGVsZW1lbnQpKSBlbGVtZW50ID0gW2VsZW1lbnRdO1xuXG5cdGlmKHR5cGVvZiBsaW1pdCAhPT0gXCJudW1iZXJcIiB8fCAhaXNGaW5pdGUobGltaXQpKXtcblx0XHRsaW1pdCA9IEluZmluaXR5O1xuXHR9XG5cdHJldHVybiBmaW5kKHRlc3QsIGVsZW1lbnQsIHJlY3Vyc2UgIT09IGZhbHNlLCBsaW1pdCk7XG59XG5cbmZ1bmN0aW9uIGZpbmQodGVzdCwgZWxlbXMsIHJlY3Vyc2UsIGxpbWl0KXtcblx0dmFyIHJlc3VsdCA9IFtdLCBjaGlsZHM7XG5cblx0Zm9yKHZhciBpID0gMCwgaiA9IGVsZW1zLmxlbmd0aDsgaSA8IGo7IGkrKyl7XG5cdFx0aWYodGVzdChlbGVtc1tpXSkpe1xuXHRcdFx0cmVzdWx0LnB1c2goZWxlbXNbaV0pO1xuXHRcdFx0aWYoLS1saW1pdCA8PSAwKSBicmVhaztcblx0XHR9XG5cblx0XHRjaGlsZHMgPSBlbGVtc1tpXS5jaGlsZHJlbjtcblx0XHRpZihyZWN1cnNlICYmIGNoaWxkcyAmJiBjaGlsZHMubGVuZ3RoID4gMCl7XG5cdFx0XHRjaGlsZHMgPSBmaW5kKHRlc3QsIGNoaWxkcywgcmVjdXJzZSwgbGltaXQpO1xuXHRcdFx0cmVzdWx0ID0gcmVzdWx0LmNvbmNhdChjaGlsZHMpO1xuXHRcdFx0bGltaXQgLT0gY2hpbGRzLmxlbmd0aDtcblx0XHRcdGlmKGxpbWl0IDw9IDApIGJyZWFrO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIGZpbmRPbmVDaGlsZCh0ZXN0LCBlbGVtcyl7XG5cdGZvcih2YXIgaSA9IDAsIGwgPSBlbGVtcy5sZW5ndGg7IGkgPCBsOyBpKyspe1xuXHRcdGlmKHRlc3QoZWxlbXNbaV0pKSByZXR1cm4gZWxlbXNbaV07XG5cdH1cblxuXHRyZXR1cm4gbnVsbDtcbn1cblxuZnVuY3Rpb24gZmluZE9uZSh0ZXN0LCBlbGVtcyl7XG5cdHZhciBlbGVtID0gbnVsbDtcblxuXHRmb3IodmFyIGkgPSAwLCBsID0gZWxlbXMubGVuZ3RoOyBpIDwgbCAmJiAhZWxlbTsgaSsrKXtcblx0XHRpZighaXNUYWcoZWxlbXNbaV0pKXtcblx0XHRcdGNvbnRpbnVlO1xuXHRcdH0gZWxzZSBpZih0ZXN0KGVsZW1zW2ldKSl7XG5cdFx0XHRlbGVtID0gZWxlbXNbaV07XG5cdFx0fSBlbHNlIGlmKGVsZW1zW2ldLmNoaWxkcmVuLmxlbmd0aCA+IDApe1xuXHRcdFx0ZWxlbSA9IGZpbmRPbmUodGVzdCwgZWxlbXNbaV0uY2hpbGRyZW4pO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG5mdW5jdGlvbiBleGlzdHNPbmUodGVzdCwgZWxlbXMpe1xuXHRmb3IodmFyIGkgPSAwLCBsID0gZWxlbXMubGVuZ3RoOyBpIDwgbDsgaSsrKXtcblx0XHRpZihcblx0XHRcdGlzVGFnKGVsZW1zW2ldKSAmJiAoXG5cdFx0XHRcdHRlc3QoZWxlbXNbaV0pIHx8IChcblx0XHRcdFx0XHRlbGVtc1tpXS5jaGlsZHJlbi5sZW5ndGggPiAwICYmXG5cdFx0XHRcdFx0ZXhpc3RzT25lKHRlc3QsIGVsZW1zW2ldLmNoaWxkcmVuKVxuXHRcdFx0XHQpXG5cdFx0XHQpXG5cdFx0KXtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gZmluZEFsbCh0ZXN0LCBlbGVtcyl7XG5cdHZhciByZXN1bHQgPSBbXTtcblx0Zm9yKHZhciBpID0gMCwgaiA9IGVsZW1zLmxlbmd0aDsgaSA8IGo7IGkrKyl7XG5cdFx0aWYoIWlzVGFnKGVsZW1zW2ldKSkgY29udGludWU7XG5cdFx0aWYodGVzdChlbGVtc1tpXSkpIHJlc3VsdC5wdXNoKGVsZW1zW2ldKTtcblxuXHRcdGlmKGVsZW1zW2ldLmNoaWxkcmVuLmxlbmd0aCA+IDApe1xuXHRcdFx0cmVzdWx0ID0gcmVzdWx0LmNvbmNhdChmaW5kQWxsKHRlc3QsIGVsZW1zW2ldLmNoaWxkcmVuKSk7XG5cdFx0fVxuXHR9XG5cdHJldHVybiByZXN1bHQ7XG59XG4iXX0=