77e7847285c20b7929ad6a26148a9e43
"use strict";

var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var xml_json_1 = __importDefault(require("./maps/xml.json"));

var inverseXML = getInverseObj(xml_json_1.default);
var xmlReplacer = getInverseReplacer(inverseXML);
exports.encodeXML = getInverse(inverseXML, xmlReplacer);

var entities_json_1 = __importDefault(require("./maps/entities.json"));

var inverseHTML = getInverseObj(entities_json_1.default);
var htmlReplacer = getInverseReplacer(inverseHTML);
exports.encodeHTML = getInverse(inverseHTML, htmlReplacer);

function getInverseObj(obj) {
  return Object.keys(obj).sort().reduce(function (inverse, name) {
    inverse[obj[name]] = "&" + name + ";";
    return inverse;
  }, {});
}

function getInverseReplacer(inverse) {
  var single = [];
  var multiple = [];

  for (var _i = 0, _a = Object.keys(inverse); _i < _a.length; _i++) {
    var k = _a[_i];

    if (k.length === 1) {
      // Add value to single array
      single.push("\\" + k);
    } else {
      // Add value to multiple array
      multiple.push(k);
    }
  } // Add ranges to single characters.


  single.sort();

  for (var start = 0; start < single.length - 1; start++) {
    // Find the end of a run of characters
    var end = start;

    while (end < single.length - 1 && single[end].charCodeAt(1) + 1 === single[end + 1].charCodeAt(1)) {
      end += 1;
    }

    var count = 1 + end - start; // We want to replace at least three characters

    if (count < 3) continue;
    single.splice(start, count, single[start] + "-" + single[end]);
  }

  multiple.unshift("[" + single.join("") + "]");
  return new RegExp(multiple.join("|"), "g");
}

var reNonASCII = /[^\0-\x7F]/gu;

function singleCharReplacer(c) {
  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
  return "&#x" + c.codePointAt(0).toString(16).toUpperCase() + ";";
}

function getInverse(inverse, re) {
  return function (data) {
    return data.replace(re, function (name) {
      return inverse[name];
    }).replace(reNonASCII, singleCharReplacer);
  };
}

var reXmlChars = getInverseReplacer(inverseXML);

function escape(data) {
  return data.replace(reXmlChars, singleCharReplacer).replace(reNonASCII, singleCharReplacer);
}

exports.escape = escape;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,