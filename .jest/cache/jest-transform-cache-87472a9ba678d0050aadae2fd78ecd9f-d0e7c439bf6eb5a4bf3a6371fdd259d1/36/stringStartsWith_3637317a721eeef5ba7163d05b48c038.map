{"version":3,"sources":["../src/stringStartsWith.js"],"names":["start","validator","rest","propValue","props","stringError","string"],"mappings":";;;;;;;AAAA,IAAA,UAAA,GAAA,OAAA,CAAA,YAAA,CAAA;;AACA,IAAA,cAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,yBAAA,CAAA,CAAA;;;;;;;;AAEe,SAAA,yBAAA,CAAA,KAAA,EAA0C;AACvD,MAAI,OAAA,KAAA,KAAA,QAAA,IAA6BA,KAAK,CAALA,MAAAA,KAAjC,CAAA,EAAqD;AACnD,UAAM,IAAA,SAAA,CAAN,gCAAM,CAAN;AACD;;AAED,MAAMC,SAAS,GAAG,SAAA,gBAAA,CAAA,KAAA,EAAA,QAAA,EAAA,aAAA,EAAmE;AAAA,QAC/DE,SAD+D,GACjDC,KADiD,CAAA,QAAA,CAAA;;AAGnF,QAAID,SAAS,IAAb,IAAA,EAAuB;AACrB,aAAA,IAAA;AACD;;AALkF,SAAA,IAAA,IAAA,GAAA,SAAA,CAAA,MAAA,EAAND,IAAM,GAAA,IAAA,KAAA,CAAA,IAAA,GAAA,CAAA,GAAA,IAAA,GAAA,CAAA,GAAA,CAAA,CAAA,EAAA,IAAA,GAAA,CAAA,EAAA,IAAA,GAAA,IAAA,EAAA,IAAA,EAAA,EAAA;AAANA,MAAAA,IAAM,CAAA,IAAA,GAAA,CAAA,CAANA,GAAM,SAAA,CAAA,IAAA,CAANA;AAAM;;AAOnF,QAAMG,WAAW,GAAGC,UAAAA,CAAAA,MAAAA,CAAAA,KAAAA,CAAAA,KAAAA,CAAAA,EAAAA,CAAAA,KAAAA,EAAAA,QAAAA,EAAAA,aAAAA,EAAAA,MAAAA,CAApB,IAAoBA,CAAAA,CAApB;;AACA,QAAA,WAAA,EAAiB;AACf,aAAA,WAAA;AACD;;AAED,QAAI,CAACH,SAAS,CAATA,UAAAA,CAAD,KAACA,CAAD,IAAgCA,SAAS,CAATA,MAAAA,IAAoBH,KAAK,CAA7D,MAAA,EAAsE;AACpE,aAAO,IAAA,SAAA,CAAA,GAAA,MAAA,CAAA,aAAA,EAAA,IAAA,EAAA,MAAA,CAAA,QAAA,EAAA,yBAAA,EAAA,MAAA,CAAA,KAAA,EAAP,IAAO,CAAA,CAAP;AACD;;AACD,WAAA,IAAA;AAfF,GAAA;;AAkBAC,EAAAA,SAAS,CAATA,UAAAA,GAAuB,SAAA,wBAAA,GAA2C;AAChE,QAAMI,WAAW,GAAGC,UAAAA,CAAAA,MAAAA,CAAAA,UAAAA,CAAAA,KAAAA,CAAAA,UAAAA,CAAAA,MAAAA,EAApB,SAAoBA,CAApB;;AACA,QAAA,WAAA,EAAiB;AACf,aAAA,WAAA;AACD;;AACD,WAAOL,SAAS,CAATA,KAAAA,CAAAA,KAAAA,CAAAA,EAAP,SAAOA,CAAP;AALFA,GAAAA;;AAQA,SAAO,CAAA,GAAA,cAAA,CAAA,SAAA,CAAA,EAAA,SAAA,EAAA,qBAAA,MAAA,CAAP,KAAO,CAAA,CAAP;AACD","sourcesContent":["import { string } from 'prop-types';\nimport wrapValidator from './helpers/wrapValidator';\n\nexport default function stringStartsWithValidator(start) {\n  if (typeof start !== 'string' || start.length === 0) {\n    throw new TypeError('a non-empty string is required');\n  }\n\n  const validator = function stringStartsWith(props, propName, componentName, ...rest) {\n    const { [propName]: propValue } = props;\n\n    if (propValue == null) {\n      return null;\n    }\n\n    const stringError = string(props, propName, componentName, ...rest);\n    if (stringError) {\n      return stringError;\n    }\n\n    if (!propValue.startsWith(start) || propValue.length <= start.length) {\n      return new TypeError(`${componentName}: ${propName} does not start with \"${start}\"`);\n    }\n    return null;\n  };\n\n  validator.isRequired = function requiredStringStartsWith(...args) {\n    const stringError = string.isRequired(...args);\n    if (stringError) {\n      return stringError;\n    }\n    return validator(...args);\n  };\n\n  return wrapValidator(validator, `stringStartsWith: ${start}`);\n}\n"]}