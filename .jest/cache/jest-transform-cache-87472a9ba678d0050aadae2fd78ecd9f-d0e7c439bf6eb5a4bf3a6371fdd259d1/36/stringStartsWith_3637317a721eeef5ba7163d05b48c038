75a3901de10586772ca2995f57def965
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = stringStartsWithValidator;

var _propTypes = require("prop-types");

var _wrapValidator = _interopRequireDefault(require("./helpers/wrapValidator"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function stringStartsWithValidator(start) {
  if (typeof start !== 'string' || start.length === 0) {
    throw new TypeError('a non-empty string is required');
  }

  var validator = function stringStartsWith(props, propName, componentName) {
    var propValue = props[propName];

    if (propValue == null) {
      return null;
    }

    for (var _len = arguments.length, rest = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
      rest[_key - 3] = arguments[_key];
    }

    var stringError = _propTypes.string.apply(void 0, [props, propName, componentName].concat(rest));

    if (stringError) {
      return stringError;
    }

    if (!propValue.startsWith(start) || propValue.length <= start.length) {
      return new TypeError("".concat(componentName, ": ").concat(propName, " does not start with \"").concat(start, "\""));
    }

    return null;
  };

  validator.isRequired = function requiredStringStartsWith() {
    var stringError = _propTypes.string.isRequired.apply(_propTypes.string, arguments);

    if (stringError) {
      return stringError;
    }

    return validator.apply(void 0, arguments);
  };

  return (0, _wrapValidator["default"])(validator, "stringStartsWith: ".concat(start));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9zdHJpbmdTdGFydHNXaXRoLmpzIl0sIm5hbWVzIjpbInN0YXJ0IiwidmFsaWRhdG9yIiwicmVzdCIsInByb3BWYWx1ZSIsInByb3BzIiwic3RyaW5nRXJyb3IiLCJzdHJpbmciXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSxJQUFBLFVBQUEsR0FBQSxPQUFBLENBQUEsWUFBQSxDQUFBOztBQUNBLElBQUEsY0FBQSxHQUFBLHNCQUFBLENBQUEsT0FBQSxDQUFBLHlCQUFBLENBQUEsQ0FBQTs7Ozs7Ozs7QUFFZSxTQUFBLHlCQUFBLENBQUEsS0FBQSxFQUEwQztBQUN2RCxNQUFJLE9BQUEsS0FBQSxLQUFBLFFBQUEsSUFBNkJBLEtBQUssQ0FBTEEsTUFBQUEsS0FBakMsQ0FBQSxFQUFxRDtBQUNuRCxVQUFNLElBQUEsU0FBQSxDQUFOLGdDQUFNLENBQU47QUFDRDs7QUFFRCxNQUFNQyxTQUFTLEdBQUcsU0FBQSxnQkFBQSxDQUFBLEtBQUEsRUFBQSxRQUFBLEVBQUEsYUFBQSxFQUFtRTtBQUFBLFFBQy9ERSxTQUQrRCxHQUNqREMsS0FEaUQsQ0FBQSxRQUFBLENBQUE7O0FBR25GLFFBQUlELFNBQVMsSUFBYixJQUFBLEVBQXVCO0FBQ3JCLGFBQUEsSUFBQTtBQUNEOztBQUxrRixTQUFBLElBQUEsSUFBQSxHQUFBLFNBQUEsQ0FBQSxNQUFBLEVBQU5ELElBQU0sR0FBQSxJQUFBLEtBQUEsQ0FBQSxJQUFBLEdBQUEsQ0FBQSxHQUFBLElBQUEsR0FBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBLEVBQUEsSUFBQSxHQUFBLENBQUEsRUFBQSxJQUFBLEdBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxFQUFBO0FBQU5BLE1BQUFBLElBQU0sQ0FBQSxJQUFBLEdBQUEsQ0FBQSxDQUFOQSxHQUFNLFNBQUEsQ0FBQSxJQUFBLENBQU5BO0FBQU07O0FBT25GLFFBQU1HLFdBQVcsR0FBR0MsVUFBQUEsQ0FBQUEsTUFBQUEsQ0FBQUEsS0FBQUEsQ0FBQUEsS0FBQUEsQ0FBQUEsRUFBQUEsQ0FBQUEsS0FBQUEsRUFBQUEsUUFBQUEsRUFBQUEsYUFBQUEsRUFBQUEsTUFBQUEsQ0FBcEIsSUFBb0JBLENBQUFBLENBQXBCOztBQUNBLFFBQUEsV0FBQSxFQUFpQjtBQUNmLGFBQUEsV0FBQTtBQUNEOztBQUVELFFBQUksQ0FBQ0gsU0FBUyxDQUFUQSxVQUFBQSxDQUFELEtBQUNBLENBQUQsSUFBZ0NBLFNBQVMsQ0FBVEEsTUFBQUEsSUFBb0JILEtBQUssQ0FBN0QsTUFBQSxFQUFzRTtBQUNwRSxhQUFPLElBQUEsU0FBQSxDQUFBLEdBQUEsTUFBQSxDQUFBLGFBQUEsRUFBQSxJQUFBLEVBQUEsTUFBQSxDQUFBLFFBQUEsRUFBQSx5QkFBQSxFQUFBLE1BQUEsQ0FBQSxLQUFBLEVBQVAsSUFBTyxDQUFBLENBQVA7QUFDRDs7QUFDRCxXQUFBLElBQUE7QUFmRixHQUFBOztBQWtCQUMsRUFBQUEsU0FBUyxDQUFUQSxVQUFBQSxHQUF1QixTQUFBLHdCQUFBLEdBQTJDO0FBQ2hFLFFBQU1JLFdBQVcsR0FBR0MsVUFBQUEsQ0FBQUEsTUFBQUEsQ0FBQUEsVUFBQUEsQ0FBQUEsS0FBQUEsQ0FBQUEsVUFBQUEsQ0FBQUEsTUFBQUEsRUFBcEIsU0FBb0JBLENBQXBCOztBQUNBLFFBQUEsV0FBQSxFQUFpQjtBQUNmLGFBQUEsV0FBQTtBQUNEOztBQUNELFdBQU9MLFNBQVMsQ0FBVEEsS0FBQUEsQ0FBQUEsS0FBQUEsQ0FBQUEsRUFBUCxTQUFPQSxDQUFQO0FBTEZBLEdBQUFBOztBQVFBLFNBQU8sQ0FBQSxHQUFBLGNBQUEsQ0FBQSxTQUFBLENBQUEsRUFBQSxTQUFBLEVBQUEscUJBQUEsTUFBQSxDQUFQLEtBQU8sQ0FBQSxDQUFQO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBzdHJpbmcgfSBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB3cmFwVmFsaWRhdG9yIGZyb20gJy4vaGVscGVycy93cmFwVmFsaWRhdG9yJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3RyaW5nU3RhcnRzV2l0aFZhbGlkYXRvcihzdGFydCkge1xuICBpZiAodHlwZW9mIHN0YXJ0ICE9PSAnc3RyaW5nJyB8fCBzdGFydC5sZW5ndGggPT09IDApIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdhIG5vbi1lbXB0eSBzdHJpbmcgaXMgcmVxdWlyZWQnKTtcbiAgfVxuXG4gIGNvbnN0IHZhbGlkYXRvciA9IGZ1bmN0aW9uIHN0cmluZ1N0YXJ0c1dpdGgocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCAuLi5yZXN0KSB7XG4gICAgY29uc3QgeyBbcHJvcE5hbWVdOiBwcm9wVmFsdWUgfSA9IHByb3BzO1xuXG4gICAgaWYgKHByb3BWYWx1ZSA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBjb25zdCBzdHJpbmdFcnJvciA9IHN0cmluZyhwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIC4uLnJlc3QpO1xuICAgIGlmIChzdHJpbmdFcnJvcikge1xuICAgICAgcmV0dXJuIHN0cmluZ0Vycm9yO1xuICAgIH1cblxuICAgIGlmICghcHJvcFZhbHVlLnN0YXJ0c1dpdGgoc3RhcnQpIHx8IHByb3BWYWx1ZS5sZW5ndGggPD0gc3RhcnQubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gbmV3IFR5cGVFcnJvcihgJHtjb21wb25lbnROYW1lfTogJHtwcm9wTmFtZX0gZG9lcyBub3Qgc3RhcnQgd2l0aCBcIiR7c3RhcnR9XCJgKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgdmFsaWRhdG9yLmlzUmVxdWlyZWQgPSBmdW5jdGlvbiByZXF1aXJlZFN0cmluZ1N0YXJ0c1dpdGgoLi4uYXJncykge1xuICAgIGNvbnN0IHN0cmluZ0Vycm9yID0gc3RyaW5nLmlzUmVxdWlyZWQoLi4uYXJncyk7XG4gICAgaWYgKHN0cmluZ0Vycm9yKSB7XG4gICAgICByZXR1cm4gc3RyaW5nRXJyb3I7XG4gICAgfVxuICAgIHJldHVybiB2YWxpZGF0b3IoLi4uYXJncyk7XG4gIH07XG5cbiAgcmV0dXJuIHdyYXBWYWxpZGF0b3IodmFsaWRhdG9yLCBgc3RyaW5nU3RhcnRzV2l0aDogJHtzdGFydH1gKTtcbn1cbiJdfQ==