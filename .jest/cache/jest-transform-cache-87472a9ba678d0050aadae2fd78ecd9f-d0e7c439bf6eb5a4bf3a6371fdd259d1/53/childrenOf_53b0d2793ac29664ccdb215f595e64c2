49c23a42e6e57878ea37fd395110e194
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = childrenOf;

var _renderableChildren = _interopRequireDefault(require("./helpers/renderableChildren"));

var _wrapValidator = _interopRequireDefault(require("./helpers/wrapValidator"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(source, true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(source).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function validateChildren(propType, children, props) {
  for (var _len = arguments.length, rest = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
    rest[_key - 3] = arguments[_key];
  }

  var error;
  children.some(function (child) {
    error = propType.apply(void 0, [_objectSpread({}, props, {
      children: child
    }), 'children'].concat(rest));
    return error;
  });
  return error || null;
}

function childrenOf(propType) {
  function childrenOfPropType(props, propName, componentName) {
    if (propName !== 'children') {
      return new TypeError("".concat(componentName, " is using the childrenOf validator on non-children prop \"").concat(propName, "\""));
    }

    var propValue = props[propName];

    if (propValue == null) {
      return null;
    }

    var children = (0, _renderableChildren["default"])(propValue);

    if (children.length === 0) {
      return null;
    }

    for (var _len2 = arguments.length, rest = new Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {
      rest[_key2 - 3] = arguments[_key2];
    }

    return validateChildren.apply(void 0, [propType, children, props, componentName].concat(rest));
  }

  childrenOfPropType.isRequired = function (props, propName, componentName) {
    if (propName !== 'children') {
      return new TypeError("".concat(componentName, " is using the childrenOf validator on non-children prop \"").concat(propName, "\""));
    }

    var children = (0, _renderableChildren["default"])(props[propName]);

    if (children.length === 0) {
      return new TypeError("`".concat(componentName, "` requires at least one node of type ").concat(propType.typeName || propType.name));
    }

    for (var _len3 = arguments.length, rest = new Array(_len3 > 3 ? _len3 - 3 : 0), _key3 = 3; _key3 < _len3; _key3++) {
      rest[_key3 - 3] = arguments[_key3];
    }

    return validateChildren.apply(void 0, [propType, children, props, componentName].concat(rest));
  };

  return (0, _wrapValidator["default"])(childrenOfPropType, 'childrenOf', propType);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jaGlsZHJlbk9mLmpzIl0sIm5hbWVzIjpbInJlc3QiLCJjaGlsZHJlbiIsImVycm9yIiwiY2hpbGQiLCJwcm9wTmFtZSIsInByb3BWYWx1ZSIsInByb3BzIiwidmFsaWRhdGVDaGlsZHJlbiIsImNoaWxkcmVuT2ZQcm9wVHlwZSIsInByb3BUeXBlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsSUFBQSxtQkFBQSxHQUFBLHNCQUFBLENBQUEsT0FBQSxDQUFBLDhCQUFBLENBQUEsQ0FBQTs7QUFDQSxJQUFBLGNBQUEsR0FBQSxzQkFBQSxDQUFBLE9BQUEsQ0FBQSx5QkFBQSxDQUFBLENBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUVBLFNBQUEsZ0JBQUEsQ0FBQSxRQUFBLEVBQUEsUUFBQSxFQUFBLEtBQUEsRUFBOEQ7QUFBQSxPQUFBLElBQUEsSUFBQSxHQUFBLFNBQUEsQ0FBQSxNQUFBLEVBQU5BLElBQU0sR0FBQSxJQUFBLEtBQUEsQ0FBQSxJQUFBLEdBQUEsQ0FBQSxHQUFBLElBQUEsR0FBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBLEVBQUEsSUFBQSxHQUFBLENBQUEsRUFBQSxJQUFBLEdBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxFQUFBO0FBQU5BLElBQUFBLElBQU0sQ0FBQSxJQUFBLEdBQUEsQ0FBQSxDQUFOQSxHQUFNLFNBQUEsQ0FBQSxJQUFBLENBQU5BO0FBQU07O0FBQzVELE1BQUEsS0FBQTtBQUNBQyxFQUFBQSxRQUFRLENBQVJBLElBQUFBLENBQWMsVUFBQSxLQUFBLEVBQVc7QUFDdkJDLElBQUFBLEtBQUssR0FBRyxRQUFRLENBQVIsS0FBQSxDQUFBLEtBQUEsQ0FBQSxFQUFBLENBQUEsYUFBQSxDQUFBLEVBQUEsRUFBQSxLQUFBLEVBQUE7QUFBcUJELE1BQUFBLFFBQVEsRUFBRUU7QUFBL0IsS0FBQSxDQUFBLEVBQUEsVUFBQSxFQUFBLE1BQUEsQ0FBUkQsSUFBUSxDQUFBLENBQVJBO0FBQ0EsV0FBQSxLQUFBO0FBRkZELEdBQUFBO0FBS0EsU0FBT0MsS0FBSyxJQUFaLElBQUE7QUFDRDs7QUFFYyxTQUFBLFVBQUEsQ0FBQSxRQUFBLEVBQThCO0FBQzNDLFdBQUEsa0JBQUEsQ0FBQSxLQUFBLEVBQUEsUUFBQSxFQUFBLGFBQUEsRUFBcUU7QUFDbkUsUUFBSUUsUUFBUSxLQUFaLFVBQUEsRUFBNkI7QUFDM0IsYUFBTyxJQUFBLFNBQUEsQ0FBQSxHQUFBLE1BQUEsQ0FBQSxhQUFBLEVBQUEsNERBQUEsRUFBQSxNQUFBLENBQUEsUUFBQSxFQUFQLElBQU8sQ0FBQSxDQUFQO0FBQ0Q7O0FBSGtFLFFBSy9DQyxTQUwrQyxHQUtqQ0MsS0FMaUMsQ0FBQSxRQUFBLENBQUE7O0FBT25FLFFBQUlELFNBQVMsSUFBYixJQUFBLEVBQXVCO0FBQ3JCLGFBQUEsSUFBQTtBQUNEOztBQUNELFFBQU1KLFFBQVEsR0FBRyxDQUFBLEdBQUEsbUJBQUEsQ0FBQSxTQUFBLENBQUEsRUFBakIsU0FBaUIsQ0FBakI7O0FBQ0EsUUFBSUEsUUFBUSxDQUFSQSxNQUFBQSxLQUFKLENBQUEsRUFBMkI7QUFDekIsYUFBQSxJQUFBO0FBQ0Q7O0FBYmtFLFNBQUEsSUFBQSxLQUFBLEdBQUEsU0FBQSxDQUFBLE1BQUEsRUFBTkQsSUFBTSxHQUFBLElBQUEsS0FBQSxDQUFBLEtBQUEsR0FBQSxDQUFBLEdBQUEsS0FBQSxHQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsRUFBQSxLQUFBLEdBQUEsQ0FBQSxFQUFBLEtBQUEsR0FBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEVBQUE7QUFBTkEsTUFBQUEsSUFBTSxDQUFBLEtBQUEsR0FBQSxDQUFBLENBQU5BLEdBQU0sU0FBQSxDQUFBLEtBQUEsQ0FBTkE7QUFBTTs7QUFlbkUsV0FBT08sZ0JBQWdCLENBQWhCQSxLQUFBQSxDQUFBQSxLQUFBQSxDQUFBQSxFQUFBQSxDQUFBQSxRQUFBQSxFQUFBQSxRQUFBQSxFQUFBQSxLQUFBQSxFQUFBQSxhQUFBQSxFQUFBQSxNQUFBQSxDQUFQLElBQU9BLENBQUFBLENBQVA7QUFDRDs7QUFFREMsRUFBQUEsa0JBQWtCLENBQWxCQSxVQUFBQSxHQUFnQyxVQUFBLEtBQUEsRUFBQSxRQUFBLEVBQUEsYUFBQSxFQUE2QztBQUMzRSxRQUFJSixRQUFRLEtBQVosVUFBQSxFQUE2QjtBQUMzQixhQUFPLElBQUEsU0FBQSxDQUFBLEdBQUEsTUFBQSxDQUFBLGFBQUEsRUFBQSw0REFBQSxFQUFBLE1BQUEsQ0FBQSxRQUFBLEVBQVAsSUFBTyxDQUFBLENBQVA7QUFDRDs7QUFFRCxRQUFNSCxRQUFRLEdBQUcsQ0FBQSxHQUFBLG1CQUFBLENBQUEsU0FBQSxDQUFBLEVBQW1CSyxLQUFLLENBQXpDLFFBQXlDLENBQXhCLENBQWpCOztBQUNBLFFBQUlMLFFBQVEsQ0FBUkEsTUFBQUEsS0FBSixDQUFBLEVBQTJCO0FBQ3pCLGFBQU8sSUFBQSxTQUFBLENBQUEsSUFBQSxNQUFBLENBQUEsYUFBQSxFQUFBLHVDQUFBLEVBQUEsTUFBQSxDQUF5RVEsUUFBUSxDQUFSQSxRQUFBQSxJQUFxQkEsUUFBUSxDQUE3RyxJQUFPLENBQUEsQ0FBUDtBQUNEOztBQVIwRSxTQUFBLElBQUEsS0FBQSxHQUFBLFNBQUEsQ0FBQSxNQUFBLEVBQVRULElBQVMsR0FBQSxJQUFBLEtBQUEsQ0FBQSxLQUFBLEdBQUEsQ0FBQSxHQUFBLEtBQUEsR0FBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBLEVBQUEsS0FBQSxHQUFBLENBQUEsRUFBQSxLQUFBLEdBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxFQUFBO0FBQVRBLE1BQUFBLElBQVMsQ0FBQSxLQUFBLEdBQUEsQ0FBQSxDQUFUQSxHQUFTLFNBQUEsQ0FBQSxLQUFBLENBQVRBO0FBQVM7O0FBVTNFLFdBQU9PLGdCQUFnQixDQUFoQkEsS0FBQUEsQ0FBQUEsS0FBQUEsQ0FBQUEsRUFBQUEsQ0FBQUEsUUFBQUEsRUFBQUEsUUFBQUEsRUFBQUEsS0FBQUEsRUFBQUEsYUFBQUEsRUFBQUEsTUFBQUEsQ0FBUCxJQUFPQSxDQUFBQSxDQUFQO0FBVkZDLEdBQUFBOztBQWFBLFNBQU8sQ0FBQSxHQUFBLGNBQUEsQ0FBQSxTQUFBLENBQUEsRUFBQSxrQkFBQSxFQUFBLFlBQUEsRUFBUCxRQUFPLENBQVA7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCByZW5kZXJhYmxlQ2hpbGRyZW4gZnJvbSAnLi9oZWxwZXJzL3JlbmRlcmFibGVDaGlsZHJlbic7XG5pbXBvcnQgd3JhcFZhbGlkYXRvciBmcm9tICcuL2hlbHBlcnMvd3JhcFZhbGlkYXRvcic7XG5cbmZ1bmN0aW9uIHZhbGlkYXRlQ2hpbGRyZW4ocHJvcFR5cGUsIGNoaWxkcmVuLCBwcm9wcywgLi4ucmVzdCkge1xuICBsZXQgZXJyb3I7XG4gIGNoaWxkcmVuLnNvbWUoKGNoaWxkKSA9PiB7XG4gICAgZXJyb3IgPSBwcm9wVHlwZSh7IC4uLnByb3BzLCBjaGlsZHJlbjogY2hpbGQgfSwgJ2NoaWxkcmVuJywgLi4ucmVzdCk7XG4gICAgcmV0dXJuIGVycm9yO1xuICB9KTtcblxuICByZXR1cm4gZXJyb3IgfHwgbnVsbDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY2hpbGRyZW5PZihwcm9wVHlwZSkge1xuICBmdW5jdGlvbiBjaGlsZHJlbk9mUHJvcFR5cGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCAuLi5yZXN0KSB7XG4gICAgaWYgKHByb3BOYW1lICE9PSAnY2hpbGRyZW4nKSB7XG4gICAgICByZXR1cm4gbmV3IFR5cGVFcnJvcihgJHtjb21wb25lbnROYW1lfSBpcyB1c2luZyB0aGUgY2hpbGRyZW5PZiB2YWxpZGF0b3Igb24gbm9uLWNoaWxkcmVuIHByb3AgXCIke3Byb3BOYW1lfVwiYCk7XG4gICAgfVxuXG4gICAgY29uc3QgeyBbcHJvcE5hbWVdOiBwcm9wVmFsdWUgfSA9IHByb3BzO1xuXG4gICAgaWYgKHByb3BWYWx1ZSA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgY29uc3QgY2hpbGRyZW4gPSByZW5kZXJhYmxlQ2hpbGRyZW4ocHJvcFZhbHVlKTtcbiAgICBpZiAoY2hpbGRyZW4ubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsaWRhdGVDaGlsZHJlbihwcm9wVHlwZSwgY2hpbGRyZW4sIHByb3BzLCBjb21wb25lbnROYW1lLCAuLi5yZXN0KTtcbiAgfVxuXG4gIGNoaWxkcmVuT2ZQcm9wVHlwZS5pc1JlcXVpcmVkID0gKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgLi4ucmVzdCkgPT4ge1xuICAgIGlmIChwcm9wTmFtZSAhPT0gJ2NoaWxkcmVuJykge1xuICAgICAgcmV0dXJuIG5ldyBUeXBlRXJyb3IoYCR7Y29tcG9uZW50TmFtZX0gaXMgdXNpbmcgdGhlIGNoaWxkcmVuT2YgdmFsaWRhdG9yIG9uIG5vbi1jaGlsZHJlbiBwcm9wIFwiJHtwcm9wTmFtZX1cImApO1xuICAgIH1cblxuICAgIGNvbnN0IGNoaWxkcmVuID0gcmVuZGVyYWJsZUNoaWxkcmVuKHByb3BzW3Byb3BOYW1lXSk7XG4gICAgaWYgKGNoaWxkcmVuLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIG5ldyBUeXBlRXJyb3IoYFxcYCR7Y29tcG9uZW50TmFtZX1cXGAgcmVxdWlyZXMgYXQgbGVhc3Qgb25lIG5vZGUgb2YgdHlwZSAke3Byb3BUeXBlLnR5cGVOYW1lIHx8IHByb3BUeXBlLm5hbWV9YCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbGlkYXRlQ2hpbGRyZW4ocHJvcFR5cGUsIGNoaWxkcmVuLCBwcm9wcywgY29tcG9uZW50TmFtZSwgLi4ucmVzdCk7XG4gIH07XG5cbiAgcmV0dXJuIHdyYXBWYWxpZGF0b3IoY2hpbGRyZW5PZlByb3BUeXBlLCAnY2hpbGRyZW5PZicsIHByb3BUeXBlKTtcbn1cbiJdfQ==