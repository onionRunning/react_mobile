9cd6c2d6eca09c5606e6b872f9dbc2bf
var arrayEach = require('./_arrayEach'),
    arrayIncludes = require('./_arrayIncludes');
/** Used to compose bitmasks for function metadata. */


var WRAP_BIND_FLAG = 1,
    WRAP_BIND_KEY_FLAG = 2,
    WRAP_CURRY_FLAG = 8,
    WRAP_CURRY_RIGHT_FLAG = 16,
    WRAP_PARTIAL_FLAG = 32,
    WRAP_PARTIAL_RIGHT_FLAG = 64,
    WRAP_ARY_FLAG = 128,
    WRAP_REARG_FLAG = 256,
    WRAP_FLIP_FLAG = 512;
/** Used to associate wrap methods with their bit flags. */

var wrapFlags = [['ary', WRAP_ARY_FLAG], ['bind', WRAP_BIND_FLAG], ['bindKey', WRAP_BIND_KEY_FLAG], ['curry', WRAP_CURRY_FLAG], ['curryRight', WRAP_CURRY_RIGHT_FLAG], ['flip', WRAP_FLIP_FLAG], ['partial', WRAP_PARTIAL_FLAG], ['partialRight', WRAP_PARTIAL_RIGHT_FLAG], ['rearg', WRAP_REARG_FLAG]];
/**
 * Updates wrapper `details` based on `bitmask` flags.
 *
 * @private
 * @returns {Array} details The details to modify.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @returns {Array} Returns `details`.
 */

function updateWrapDetails(details, bitmask) {
  arrayEach(wrapFlags, function (pair) {
    var value = '_.' + pair[0];

    if (bitmask & pair[1] && !arrayIncludes(details, value)) {
      details.push(value);
    }
  });
  return details.sort();
}

module.exports = updateWrapDetails;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIl91cGRhdGVXcmFwRGV0YWlscy5qcyJdLCJuYW1lcyI6WyJhcnJheUVhY2giLCJyZXF1aXJlIiwiYXJyYXlJbmNsdWRlcyIsIldSQVBfQklORF9GTEFHIiwiV1JBUF9CSU5EX0tFWV9GTEFHIiwiV1JBUF9DVVJSWV9GTEFHIiwiV1JBUF9DVVJSWV9SSUdIVF9GTEFHIiwiV1JBUF9QQVJUSUFMX0ZMQUciLCJXUkFQX1BBUlRJQUxfUklHSFRfRkxBRyIsIldSQVBfQVJZX0ZMQUciLCJXUkFQX1JFQVJHX0ZMQUciLCJXUkFQX0ZMSVBfRkxBRyIsIndyYXBGbGFncyIsInVwZGF0ZVdyYXBEZXRhaWxzIiwiZGV0YWlscyIsImJpdG1hc2siLCJwYWlyIiwidmFsdWUiLCJwdXNoIiwic29ydCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBLElBQUlBLFNBQVMsR0FBR0MsT0FBTyxDQUFDLGNBQUQsQ0FBdkI7QUFBQSxJQUNJQyxhQUFhLEdBQUdELE9BQU8sQ0FBQyxrQkFBRCxDQUQzQjtBQUdBOzs7QUFDQSxJQUFJRSxjQUFjLEdBQUcsQ0FBckI7QUFBQSxJQUNJQyxrQkFBa0IsR0FBRyxDQUR6QjtBQUFBLElBRUlDLGVBQWUsR0FBRyxDQUZ0QjtBQUFBLElBR0lDLHFCQUFxQixHQUFHLEVBSDVCO0FBQUEsSUFJSUMsaUJBQWlCLEdBQUcsRUFKeEI7QUFBQSxJQUtJQyx1QkFBdUIsR0FBRyxFQUw5QjtBQUFBLElBTUlDLGFBQWEsR0FBRyxHQU5wQjtBQUFBLElBT0lDLGVBQWUsR0FBRyxHQVB0QjtBQUFBLElBUUlDLGNBQWMsR0FBRyxHQVJyQjtBQVVBOztBQUNBLElBQUlDLFNBQVMsR0FBRyxDQUNkLENBQUMsS0FBRCxFQUFRSCxhQUFSLENBRGMsRUFFZCxDQUFDLE1BQUQsRUFBU04sY0FBVCxDQUZjLEVBR2QsQ0FBQyxTQUFELEVBQVlDLGtCQUFaLENBSGMsRUFJZCxDQUFDLE9BQUQsRUFBVUMsZUFBVixDQUpjLEVBS2QsQ0FBQyxZQUFELEVBQWVDLHFCQUFmLENBTGMsRUFNZCxDQUFDLE1BQUQsRUFBU0ssY0FBVCxDQU5jLEVBT2QsQ0FBQyxTQUFELEVBQVlKLGlCQUFaLENBUGMsRUFRZCxDQUFDLGNBQUQsRUFBaUJDLHVCQUFqQixDQVJjLEVBU2QsQ0FBQyxPQUFELEVBQVVFLGVBQVYsQ0FUYyxDQUFoQjtBQVlBOzs7Ozs7Ozs7QUFRQSxTQUFTRyxpQkFBVCxDQUEyQkMsT0FBM0IsRUFBb0NDLE9BQXBDLEVBQTZDO0FBQzNDZixFQUFBQSxTQUFTLENBQUNZLFNBQUQsRUFBWSxVQUFTSSxJQUFULEVBQWU7QUFDbEMsUUFBSUMsS0FBSyxHQUFHLE9BQU9ELElBQUksQ0FBQyxDQUFELENBQXZCOztBQUNBLFFBQUtELE9BQU8sR0FBR0MsSUFBSSxDQUFDLENBQUQsQ0FBZixJQUF1QixDQUFDZCxhQUFhLENBQUNZLE9BQUQsRUFBVUcsS0FBVixDQUF6QyxFQUEyRDtBQUN6REgsTUFBQUEsT0FBTyxDQUFDSSxJQUFSLENBQWFELEtBQWI7QUFDRDtBQUNGLEdBTFEsQ0FBVDtBQU1BLFNBQU9ILE9BQU8sQ0FBQ0ssSUFBUixFQUFQO0FBQ0Q7O0FBRURDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQlIsaUJBQWpCIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGFycmF5RWFjaCA9IHJlcXVpcmUoJy4vX2FycmF5RWFjaCcpLFxuICAgIGFycmF5SW5jbHVkZXMgPSByZXF1aXJlKCcuL19hcnJheUluY2x1ZGVzJyk7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIGZ1bmN0aW9uIG1ldGFkYXRhLiAqL1xudmFyIFdSQVBfQklORF9GTEFHID0gMSxcbiAgICBXUkFQX0JJTkRfS0VZX0ZMQUcgPSAyLFxuICAgIFdSQVBfQ1VSUllfRkxBRyA9IDgsXG4gICAgV1JBUF9DVVJSWV9SSUdIVF9GTEFHID0gMTYsXG4gICAgV1JBUF9QQVJUSUFMX0ZMQUcgPSAzMixcbiAgICBXUkFQX1BBUlRJQUxfUklHSFRfRkxBRyA9IDY0LFxuICAgIFdSQVBfQVJZX0ZMQUcgPSAxMjgsXG4gICAgV1JBUF9SRUFSR19GTEFHID0gMjU2LFxuICAgIFdSQVBfRkxJUF9GTEFHID0gNTEyO1xuXG4vKiogVXNlZCB0byBhc3NvY2lhdGUgd3JhcCBtZXRob2RzIHdpdGggdGhlaXIgYml0IGZsYWdzLiAqL1xudmFyIHdyYXBGbGFncyA9IFtcbiAgWydhcnknLCBXUkFQX0FSWV9GTEFHXSxcbiAgWydiaW5kJywgV1JBUF9CSU5EX0ZMQUddLFxuICBbJ2JpbmRLZXknLCBXUkFQX0JJTkRfS0VZX0ZMQUddLFxuICBbJ2N1cnJ5JywgV1JBUF9DVVJSWV9GTEFHXSxcbiAgWydjdXJyeVJpZ2h0JywgV1JBUF9DVVJSWV9SSUdIVF9GTEFHXSxcbiAgWydmbGlwJywgV1JBUF9GTElQX0ZMQUddLFxuICBbJ3BhcnRpYWwnLCBXUkFQX1BBUlRJQUxfRkxBR10sXG4gIFsncGFydGlhbFJpZ2h0JywgV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUddLFxuICBbJ3JlYXJnJywgV1JBUF9SRUFSR19GTEFHXVxuXTtcblxuLyoqXG4gKiBVcGRhdGVzIHdyYXBwZXIgYGRldGFpbHNgIGJhc2VkIG9uIGBiaXRtYXNrYCBmbGFncy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHJldHVybnMge0FycmF5fSBkZXRhaWxzIFRoZSBkZXRhaWxzIHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGNyZWF0ZVdyYXBgIGZvciBtb3JlIGRldGFpbHMuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGRldGFpbHNgLlxuICovXG5mdW5jdGlvbiB1cGRhdGVXcmFwRGV0YWlscyhkZXRhaWxzLCBiaXRtYXNrKSB7XG4gIGFycmF5RWFjaCh3cmFwRmxhZ3MsIGZ1bmN0aW9uKHBhaXIpIHtcbiAgICB2YXIgdmFsdWUgPSAnXy4nICsgcGFpclswXTtcbiAgICBpZiAoKGJpdG1hc2sgJiBwYWlyWzFdKSAmJiAhYXJyYXlJbmNsdWRlcyhkZXRhaWxzLCB2YWx1ZSkpIHtcbiAgICAgIGRldGFpbHMucHVzaCh2YWx1ZSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGRldGFpbHMuc29ydCgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHVwZGF0ZVdyYXBEZXRhaWxzO1xuIl19