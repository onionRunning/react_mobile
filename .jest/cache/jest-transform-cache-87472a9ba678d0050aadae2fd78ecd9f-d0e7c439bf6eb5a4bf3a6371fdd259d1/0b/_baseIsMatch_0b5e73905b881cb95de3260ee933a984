ec74921e4decd8a509c5cccf2b9d3c23
var Stack = require('./_Stack'),
    baseIsEqual = require('./_baseIsEqual');
/** Used to compose bitmasks for value comparisons. */


var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;
/**
 * The base implementation of `_.isMatch` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to inspect.
 * @param {Object} source The object of property values to match.
 * @param {Array} matchData The property names, values, and compare flags to match.
 * @param {Function} [customizer] The function to customize comparisons.
 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
 */

function baseIsMatch(object, source, matchData, customizer) {
  var index = matchData.length,
      length = index,
      noCustomizer = !customizer;

  if (object == null) {
    return !length;
  }

  object = Object(object);

  while (index--) {
    var data = matchData[index];

    if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
      return false;
    }
  }

  while (++index < length) {
    data = matchData[index];
    var key = data[0],
        objValue = object[key],
        srcValue = data[1];

    if (noCustomizer && data[2]) {
      if (objValue === undefined && !(key in object)) {
        return false;
      }
    } else {
      var stack = new Stack();

      if (customizer) {
        var result = customizer(objValue, srcValue, key, object, source, stack);
      }

      if (!(result === undefined ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result)) {
        return false;
      }
    }
  }

  return true;
}

module.exports = baseIsMatch;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIl9iYXNlSXNNYXRjaC5qcyJdLCJuYW1lcyI6WyJTdGFjayIsInJlcXVpcmUiLCJiYXNlSXNFcXVhbCIsIkNPTVBBUkVfUEFSVElBTF9GTEFHIiwiQ09NUEFSRV9VTk9SREVSRURfRkxBRyIsImJhc2VJc01hdGNoIiwib2JqZWN0Iiwic291cmNlIiwibWF0Y2hEYXRhIiwiY3VzdG9taXplciIsImluZGV4IiwibGVuZ3RoIiwibm9DdXN0b21pemVyIiwiT2JqZWN0IiwiZGF0YSIsImtleSIsIm9ialZhbHVlIiwic3JjVmFsdWUiLCJ1bmRlZmluZWQiLCJzdGFjayIsInJlc3VsdCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBLElBQUlBLEtBQUssR0FBR0MsT0FBTyxDQUFDLFVBQUQsQ0FBbkI7QUFBQSxJQUNJQyxXQUFXLEdBQUdELE9BQU8sQ0FBQyxnQkFBRCxDQUR6QjtBQUdBOzs7QUFDQSxJQUFJRSxvQkFBb0IsR0FBRyxDQUEzQjtBQUFBLElBQ0lDLHNCQUFzQixHQUFHLENBRDdCO0FBR0E7Ozs7Ozs7Ozs7O0FBVUEsU0FBU0MsV0FBVCxDQUFxQkMsTUFBckIsRUFBNkJDLE1BQTdCLEVBQXFDQyxTQUFyQyxFQUFnREMsVUFBaEQsRUFBNEQ7QUFDMUQsTUFBSUMsS0FBSyxHQUFHRixTQUFTLENBQUNHLE1BQXRCO0FBQUEsTUFDSUEsTUFBTSxHQUFHRCxLQURiO0FBQUEsTUFFSUUsWUFBWSxHQUFHLENBQUNILFVBRnBCOztBQUlBLE1BQUlILE1BQU0sSUFBSSxJQUFkLEVBQW9CO0FBQ2xCLFdBQU8sQ0FBQ0ssTUFBUjtBQUNEOztBQUNETCxFQUFBQSxNQUFNLEdBQUdPLE1BQU0sQ0FBQ1AsTUFBRCxDQUFmOztBQUNBLFNBQU9JLEtBQUssRUFBWixFQUFnQjtBQUNkLFFBQUlJLElBQUksR0FBR04sU0FBUyxDQUFDRSxLQUFELENBQXBCOztBQUNBLFFBQUtFLFlBQVksSUFBSUUsSUFBSSxDQUFDLENBQUQsQ0FBckIsR0FDSUEsSUFBSSxDQUFDLENBQUQsQ0FBSixLQUFZUixNQUFNLENBQUNRLElBQUksQ0FBQyxDQUFELENBQUwsQ0FEdEIsR0FFSSxFQUFFQSxJQUFJLENBQUMsQ0FBRCxDQUFKLElBQVdSLE1BQWIsQ0FGUixFQUdNO0FBQ0osYUFBTyxLQUFQO0FBQ0Q7QUFDRjs7QUFDRCxTQUFPLEVBQUVJLEtBQUYsR0FBVUMsTUFBakIsRUFBeUI7QUFDdkJHLElBQUFBLElBQUksR0FBR04sU0FBUyxDQUFDRSxLQUFELENBQWhCO0FBQ0EsUUFBSUssR0FBRyxHQUFHRCxJQUFJLENBQUMsQ0FBRCxDQUFkO0FBQUEsUUFDSUUsUUFBUSxHQUFHVixNQUFNLENBQUNTLEdBQUQsQ0FEckI7QUFBQSxRQUVJRSxRQUFRLEdBQUdILElBQUksQ0FBQyxDQUFELENBRm5COztBQUlBLFFBQUlGLFlBQVksSUFBSUUsSUFBSSxDQUFDLENBQUQsQ0FBeEIsRUFBNkI7QUFDM0IsVUFBSUUsUUFBUSxLQUFLRSxTQUFiLElBQTBCLEVBQUVILEdBQUcsSUFBSVQsTUFBVCxDQUE5QixFQUFnRDtBQUM5QyxlQUFPLEtBQVA7QUFDRDtBQUNGLEtBSkQsTUFJTztBQUNMLFVBQUlhLEtBQUssR0FBRyxJQUFJbkIsS0FBSixFQUFaOztBQUNBLFVBQUlTLFVBQUosRUFBZ0I7QUFDZCxZQUFJVyxNQUFNLEdBQUdYLFVBQVUsQ0FBQ08sUUFBRCxFQUFXQyxRQUFYLEVBQXFCRixHQUFyQixFQUEwQlQsTUFBMUIsRUFBa0NDLE1BQWxDLEVBQTBDWSxLQUExQyxDQUF2QjtBQUNEOztBQUNELFVBQUksRUFBRUMsTUFBTSxLQUFLRixTQUFYLEdBQ0VoQixXQUFXLENBQUNlLFFBQUQsRUFBV0QsUUFBWCxFQUFxQmIsb0JBQW9CLEdBQUdDLHNCQUE1QyxFQUFvRUssVUFBcEUsRUFBZ0ZVLEtBQWhGLENBRGIsR0FFRUMsTUFGSixDQUFKLEVBR087QUFDTCxlQUFPLEtBQVA7QUFDRDtBQUNGO0FBQ0Y7O0FBQ0QsU0FBTyxJQUFQO0FBQ0Q7O0FBRURDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQmpCLFdBQWpCIiwic291cmNlc0NvbnRlbnQiOlsidmFyIFN0YWNrID0gcmVxdWlyZSgnLi9fU3RhY2snKSxcbiAgICBiYXNlSXNFcXVhbCA9IHJlcXVpcmUoJy4vX2Jhc2VJc0VxdWFsJyk7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIHZhbHVlIGNvbXBhcmlzb25zLiAqL1xudmFyIENPTVBBUkVfUEFSVElBTF9GTEFHID0gMSxcbiAgICBDT01QQVJFX1VOT1JERVJFRF9GTEFHID0gMjtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc01hdGNoYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHZhbHVlcyB0byBtYXRjaC5cbiAqIEBwYXJhbSB7QXJyYXl9IG1hdGNoRGF0YSBUaGUgcHJvcGVydHkgbmFtZXMsIHZhbHVlcywgYW5kIGNvbXBhcmUgZmxhZ3MgdG8gbWF0Y2guXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgb2JqZWN0YCBpcyBhIG1hdGNoLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc01hdGNoKG9iamVjdCwgc291cmNlLCBtYXRjaERhdGEsIGN1c3RvbWl6ZXIpIHtcbiAgdmFyIGluZGV4ID0gbWF0Y2hEYXRhLmxlbmd0aCxcbiAgICAgIGxlbmd0aCA9IGluZGV4LFxuICAgICAgbm9DdXN0b21pemVyID0gIWN1c3RvbWl6ZXI7XG5cbiAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgcmV0dXJuICFsZW5ndGg7XG4gIH1cbiAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG4gIHdoaWxlIChpbmRleC0tKSB7XG4gICAgdmFyIGRhdGEgPSBtYXRjaERhdGFbaW5kZXhdO1xuICAgIGlmICgobm9DdXN0b21pemVyICYmIGRhdGFbMl0pXG4gICAgICAgICAgPyBkYXRhWzFdICE9PSBvYmplY3RbZGF0YVswXV1cbiAgICAgICAgICA6ICEoZGF0YVswXSBpbiBvYmplY3QpXG4gICAgICAgICkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGRhdGEgPSBtYXRjaERhdGFbaW5kZXhdO1xuICAgIHZhciBrZXkgPSBkYXRhWzBdLFxuICAgICAgICBvYmpWYWx1ZSA9IG9iamVjdFtrZXldLFxuICAgICAgICBzcmNWYWx1ZSA9IGRhdGFbMV07XG5cbiAgICBpZiAobm9DdXN0b21pemVyICYmIGRhdGFbMl0pIHtcbiAgICAgIGlmIChvYmpWYWx1ZSA9PT0gdW5kZWZpbmVkICYmICEoa2V5IGluIG9iamVjdCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgc3RhY2sgPSBuZXcgU3RhY2s7XG4gICAgICBpZiAoY3VzdG9taXplcikge1xuICAgICAgICB2YXIgcmVzdWx0ID0gY3VzdG9taXplcihvYmpWYWx1ZSwgc3JjVmFsdWUsIGtleSwgb2JqZWN0LCBzb3VyY2UsIHN0YWNrKTtcbiAgICAgIH1cbiAgICAgIGlmICghKHJlc3VsdCA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgICA/IGJhc2VJc0VxdWFsKHNyY1ZhbHVlLCBvYmpWYWx1ZSwgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgfCBDT01QQVJFX1VOT1JERVJFRF9GTEFHLCBjdXN0b21pemVyLCBzdGFjaylcbiAgICAgICAgICAgIDogcmVzdWx0XG4gICAgICAgICAgKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VJc01hdGNoO1xuIl19