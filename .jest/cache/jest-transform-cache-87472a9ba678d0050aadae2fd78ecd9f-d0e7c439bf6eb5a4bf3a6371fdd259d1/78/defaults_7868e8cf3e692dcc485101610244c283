2c6e6d24fbce71b5b87dea293c4fc06f
var baseRest = require('./_baseRest'),
    eq = require('./eq'),
    isIterateeCall = require('./_isIterateeCall'),
    keysIn = require('./keysIn');
/** Used for built-in method references. */


var objectProto = Object.prototype;
/** Used to check objects for own properties. */

var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Assigns own and inherited enumerable string keyed properties of source
 * objects to the destination object for all destination properties that
 * resolve to `undefined`. Source objects are applied from left to right.
 * Once a property is set, additional values of the same property are ignored.
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} [sources] The source objects.
 * @returns {Object} Returns `object`.
 * @see _.defaultsDeep
 * @example
 *
 * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
 * // => { 'a': 1, 'b': 2 }
 */

var defaults = baseRest(function (object, sources) {
  object = Object(object);
  var index = -1;
  var length = sources.length;
  var guard = length > 2 ? sources[2] : undefined;

  if (guard && isIterateeCall(sources[0], sources[1], guard)) {
    length = 1;
  }

  while (++index < length) {
    var source = sources[index];
    var props = keysIn(source);
    var propsIndex = -1;
    var propsLength = props.length;

    while (++propsIndex < propsLength) {
      var key = props[propsIndex];
      var value = object[key];

      if (value === undefined || eq(value, objectProto[key]) && !hasOwnProperty.call(object, key)) {
        object[key] = source[key];
      }
    }
  }

  return object;
});
module.exports = defaults;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRlZmF1bHRzLmpzIl0sIm5hbWVzIjpbImJhc2VSZXN0IiwicmVxdWlyZSIsImVxIiwiaXNJdGVyYXRlZUNhbGwiLCJrZXlzSW4iLCJvYmplY3RQcm90byIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiZGVmYXVsdHMiLCJvYmplY3QiLCJzb3VyY2VzIiwiaW5kZXgiLCJsZW5ndGgiLCJndWFyZCIsInVuZGVmaW5lZCIsInNvdXJjZSIsInByb3BzIiwicHJvcHNJbmRleCIsInByb3BzTGVuZ3RoIiwia2V5IiwidmFsdWUiLCJjYWxsIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUEsUUFBUSxHQUFHQyxPQUFPLENBQUMsYUFBRCxDQUF0QjtBQUFBLElBQ0lDLEVBQUUsR0FBR0QsT0FBTyxDQUFDLE1BQUQsQ0FEaEI7QUFBQSxJQUVJRSxjQUFjLEdBQUdGLE9BQU8sQ0FBQyxtQkFBRCxDQUY1QjtBQUFBLElBR0lHLE1BQU0sR0FBR0gsT0FBTyxDQUFDLFVBQUQsQ0FIcEI7QUFLQTs7O0FBQ0EsSUFBSUksV0FBVyxHQUFHQyxNQUFNLENBQUNDLFNBQXpCO0FBRUE7O0FBQ0EsSUFBSUMsY0FBYyxHQUFHSCxXQUFXLENBQUNHLGNBQWpDO0FBRUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFxQkEsSUFBSUMsUUFBUSxHQUFHVCxRQUFRLENBQUMsVUFBU1UsTUFBVCxFQUFpQkMsT0FBakIsRUFBMEI7QUFDaERELEVBQUFBLE1BQU0sR0FBR0osTUFBTSxDQUFDSSxNQUFELENBQWY7QUFFQSxNQUFJRSxLQUFLLEdBQUcsQ0FBQyxDQUFiO0FBQ0EsTUFBSUMsTUFBTSxHQUFHRixPQUFPLENBQUNFLE1BQXJCO0FBQ0EsTUFBSUMsS0FBSyxHQUFHRCxNQUFNLEdBQUcsQ0FBVCxHQUFhRixPQUFPLENBQUMsQ0FBRCxDQUFwQixHQUEwQkksU0FBdEM7O0FBRUEsTUFBSUQsS0FBSyxJQUFJWCxjQUFjLENBQUNRLE9BQU8sQ0FBQyxDQUFELENBQVIsRUFBYUEsT0FBTyxDQUFDLENBQUQsQ0FBcEIsRUFBeUJHLEtBQXpCLENBQTNCLEVBQTREO0FBQzFERCxJQUFBQSxNQUFNLEdBQUcsQ0FBVDtBQUNEOztBQUVELFNBQU8sRUFBRUQsS0FBRixHQUFVQyxNQUFqQixFQUF5QjtBQUN2QixRQUFJRyxNQUFNLEdBQUdMLE9BQU8sQ0FBQ0MsS0FBRCxDQUFwQjtBQUNBLFFBQUlLLEtBQUssR0FBR2IsTUFBTSxDQUFDWSxNQUFELENBQWxCO0FBQ0EsUUFBSUUsVUFBVSxHQUFHLENBQUMsQ0FBbEI7QUFDQSxRQUFJQyxXQUFXLEdBQUdGLEtBQUssQ0FBQ0osTUFBeEI7O0FBRUEsV0FBTyxFQUFFSyxVQUFGLEdBQWVDLFdBQXRCLEVBQW1DO0FBQ2pDLFVBQUlDLEdBQUcsR0FBR0gsS0FBSyxDQUFDQyxVQUFELENBQWY7QUFDQSxVQUFJRyxLQUFLLEdBQUdYLE1BQU0sQ0FBQ1UsR0FBRCxDQUFsQjs7QUFFQSxVQUFJQyxLQUFLLEtBQUtOLFNBQVYsSUFDQ2IsRUFBRSxDQUFDbUIsS0FBRCxFQUFRaEIsV0FBVyxDQUFDZSxHQUFELENBQW5CLENBQUYsSUFBK0IsQ0FBQ1osY0FBYyxDQUFDYyxJQUFmLENBQW9CWixNQUFwQixFQUE0QlUsR0FBNUIsQ0FEckMsRUFDd0U7QUFDdEVWLFFBQUFBLE1BQU0sQ0FBQ1UsR0FBRCxDQUFOLEdBQWNKLE1BQU0sQ0FBQ0ksR0FBRCxDQUFwQjtBQUNEO0FBQ0Y7QUFDRjs7QUFFRCxTQUFPVixNQUFQO0FBQ0QsQ0E3QnNCLENBQXZCO0FBK0JBYSxNQUFNLENBQUNDLE9BQVAsR0FBaUJmLFFBQWpCIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGJhc2VSZXN0ID0gcmVxdWlyZSgnLi9fYmFzZVJlc3QnKSxcbiAgICBlcSA9IHJlcXVpcmUoJy4vZXEnKSxcbiAgICBpc0l0ZXJhdGVlQ2FsbCA9IHJlcXVpcmUoJy4vX2lzSXRlcmF0ZWVDYWxsJyksXG4gICAga2V5c0luID0gcmVxdWlyZSgnLi9rZXlzSW4nKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBBc3NpZ25zIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgb2Ygc291cmNlXG4gKiBvYmplY3RzIHRvIHRoZSBkZXN0aW5hdGlvbiBvYmplY3QgZm9yIGFsbCBkZXN0aW5hdGlvbiBwcm9wZXJ0aWVzIHRoYXRcbiAqIHJlc29sdmUgdG8gYHVuZGVmaW5lZGAuIFNvdXJjZSBvYmplY3RzIGFyZSBhcHBsaWVkIGZyb20gbGVmdCB0byByaWdodC5cbiAqIE9uY2UgYSBwcm9wZXJ0eSBpcyBzZXQsIGFkZGl0aW9uYWwgdmFsdWVzIG9mIHRoZSBzYW1lIHByb3BlcnR5IGFyZSBpZ25vcmVkLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBzaW5jZSAwLjEuMFxuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAqIEBwYXJhbSB7Li4uT2JqZWN0fSBbc291cmNlc10gVGhlIHNvdXJjZSBvYmplY3RzLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqIEBzZWUgXy5kZWZhdWx0c0RlZXBcbiAqIEBleGFtcGxlXG4gKlxuICogXy5kZWZhdWx0cyh7ICdhJzogMSB9LCB7ICdiJzogMiB9LCB7ICdhJzogMyB9KTtcbiAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIgfVxuICovXG52YXIgZGVmYXVsdHMgPSBiYXNlUmVzdChmdW5jdGlvbihvYmplY3QsIHNvdXJjZXMpIHtcbiAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG5cbiAgdmFyIGluZGV4ID0gLTE7XG4gIHZhciBsZW5ndGggPSBzb3VyY2VzLmxlbmd0aDtcbiAgdmFyIGd1YXJkID0gbGVuZ3RoID4gMiA/IHNvdXJjZXNbMl0gOiB1bmRlZmluZWQ7XG5cbiAgaWYgKGd1YXJkICYmIGlzSXRlcmF0ZWVDYWxsKHNvdXJjZXNbMF0sIHNvdXJjZXNbMV0sIGd1YXJkKSkge1xuICAgIGxlbmd0aCA9IDE7XG4gIH1cblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBzb3VyY2UgPSBzb3VyY2VzW2luZGV4XTtcbiAgICB2YXIgcHJvcHMgPSBrZXlzSW4oc291cmNlKTtcbiAgICB2YXIgcHJvcHNJbmRleCA9IC0xO1xuICAgIHZhciBwcm9wc0xlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuICAgIHdoaWxlICgrK3Byb3BzSW5kZXggPCBwcm9wc0xlbmd0aCkge1xuICAgICAgdmFyIGtleSA9IHByb3BzW3Byb3BzSW5kZXhdO1xuICAgICAgdmFyIHZhbHVlID0gb2JqZWN0W2tleV07XG5cbiAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICAgICAgKGVxKHZhbHVlLCBvYmplY3RQcm90b1trZXldKSAmJiAhaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkpKSB7XG4gICAgICAgIG9iamVjdFtrZXldID0gc291cmNlW2tleV07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG9iamVjdDtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRlZmF1bHRzO1xuIl19