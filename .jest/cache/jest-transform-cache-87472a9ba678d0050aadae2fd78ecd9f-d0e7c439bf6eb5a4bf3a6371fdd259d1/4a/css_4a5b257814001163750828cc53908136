ff3a71cd9ec47fd5d12a44f780b7509f
var domEach = require('../utils').domEach,
    _ = {
  pick: require('lodash/pick')
};

var toString = Object.prototype.toString;
/**
 * Set / Get css.
 *
 * @param {String|Object} prop
 * @param {String} val
 * @return {self}
 * @api public
 */

exports.css = function (prop, val) {
  if (arguments.length === 2 || // When `prop` is a "plain" object
  toString.call(prop) === '[object Object]') {
    return domEach(this, function (idx, el) {
      setCss(el, prop, val, idx);
    });
  } else {
    return getCss(this[0], prop);
  }
};
/**
 * Set styles of all elements.
 *
 * @param {String|Object} prop
 * @param {String} val
 * @param {Number} idx - optional index within the selection
 * @return {self}
 * @api private
 */


function setCss(el, prop, val, idx) {
  if ('string' == typeof prop) {
    var styles = getCss(el);

    if (typeof val === 'function') {
      val = val.call(el, idx, styles[prop]);
    }

    if (val === '') {
      delete styles[prop];
    } else if (val != null) {
      styles[prop] = val;
    }

    el.attribs.style = stringify(styles);
  } else if ('object' == typeof prop) {
    Object.keys(prop).forEach(function (k) {
      setCss(el, k, prop[k]);
    });
  }
}
/**
 * Get parsed styles of the first element.
 *
 * @param {String} prop
 * @return {Object}
 * @api private
 */


function getCss(el, prop) {
  var styles = parse(el.attribs.style);

  if (typeof prop === 'string') {
    return styles[prop];
  } else if (Array.isArray(prop)) {
    return _.pick(styles, prop);
  } else {
    return styles;
  }
}
/**
 * Stringify `obj` to styles.
 *
 * @param {Object} obj
 * @return {Object}
 * @api private
 */


function stringify(obj) {
  return Object.keys(obj || {}).reduce(function (str, prop) {
    return str += '' + (str ? ' ' : '') + prop + ': ' + obj[prop] + ';';
  }, '');
}
/**
 * Parse `styles`.
 *
 * @param {String} styles
 * @return {Object}
 * @api private
 */


function parse(styles) {
  styles = (styles || '').trim();
  if (!styles) return {};
  return styles.split(';').reduce(function (obj, str) {
    var n = str.indexOf(':'); // skip if there is no :, or if it is the first/last character

    if (n < 1 || n === str.length - 1) return obj;
    obj[str.slice(0, n).trim()] = str.slice(n + 1).trim();
    return obj;
  }, {});
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNzcy5qcyJdLCJuYW1lcyI6WyJkb21FYWNoIiwicmVxdWlyZSIsIl8iLCJwaWNrIiwidG9TdHJpbmciLCJPYmplY3QiLCJwcm90b3R5cGUiLCJleHBvcnRzIiwiY3NzIiwicHJvcCIsInZhbCIsImFyZ3VtZW50cyIsImxlbmd0aCIsImNhbGwiLCJpZHgiLCJlbCIsInNldENzcyIsImdldENzcyIsInN0eWxlcyIsImF0dHJpYnMiLCJzdHlsZSIsInN0cmluZ2lmeSIsImtleXMiLCJmb3JFYWNoIiwiayIsInBhcnNlIiwiQXJyYXkiLCJpc0FycmF5Iiwib2JqIiwicmVkdWNlIiwic3RyIiwidHJpbSIsInNwbGl0IiwibiIsImluZGV4T2YiLCJzbGljZSJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUEsT0FBTyxHQUFHQyxPQUFPLENBQUMsVUFBRCxDQUFQLENBQW9CRCxPQUFsQztBQUFBLElBQ0lFLENBQUMsR0FBRztBQUNGQyxFQUFBQSxJQUFJLEVBQUVGLE9BQU8sQ0FBQyxhQUFEO0FBRFgsQ0FEUjs7QUFLQSxJQUFJRyxRQUFRLEdBQUdDLE1BQU0sQ0FBQ0MsU0FBUCxDQUFpQkYsUUFBaEM7QUFFQTs7Ozs7Ozs7O0FBU0FHLE9BQU8sQ0FBQ0MsR0FBUixHQUFjLFVBQVNDLElBQVQsRUFBZUMsR0FBZixFQUFvQjtBQUNoQyxNQUFJQyxTQUFTLENBQUNDLE1BQVYsS0FBcUIsQ0FBckIsSUFDRjtBQUNDUixFQUFBQSxRQUFRLENBQUNTLElBQVQsQ0FBY0osSUFBZCxNQUF3QixpQkFGM0IsRUFFK0M7QUFDN0MsV0FBT1QsT0FBTyxDQUFDLElBQUQsRUFBTyxVQUFTYyxHQUFULEVBQWNDLEVBQWQsRUFBa0I7QUFDckNDLE1BQUFBLE1BQU0sQ0FBQ0QsRUFBRCxFQUFLTixJQUFMLEVBQVdDLEdBQVgsRUFBZ0JJLEdBQWhCLENBQU47QUFDRCxLQUZhLENBQWQ7QUFHRCxHQU5ELE1BTU87QUFDTCxXQUFPRyxNQUFNLENBQUMsS0FBSyxDQUFMLENBQUQsRUFBVVIsSUFB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QSxJQUFBQSxHQUFHLENBQUNFLEdBQUcsQ0FBQ0ssS0FBSixDQUFVLENBQVYsRUFBWUYsQ0FBWixFQUFlRixJQUFmLEVBQUQsQ0FBSCxHQUE2QkQsR0FBRyxDQUFDSyxLQUFKLENBQVVGLENBQUMsR0FBQyxDQUFaLEVBQWVGLElBQWYsRUFBN0I7QUFDQSxXQUFPSCxHQUFQO0FBQ0QsR0FSSSxFQVFGLEVBUkUsQ0FBUDtBQVNEIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGRvbUVhY2ggPSByZXF1aXJlKCcuLi91dGlscycpLmRvbUVhY2gsXG4gICAgXyA9IHtcbiAgICAgIHBpY2s6IHJlcXVpcmUoJ2xvZGFzaC9waWNrJyksXG4gICAgfTtcblxudmFyIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxuLyoqXG4gKiBTZXQgLyBHZXQgY3NzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfE9iamVjdH0gcHJvcFxuICogQHBhcmFtIHtTdHJpbmd9IHZhbFxuICogQHJldHVybiB7c2VsZn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5jc3MgPSBmdW5jdGlvbihwcm9wLCB2YWwpIHtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDIgfHxcbiAgICAvLyBXaGVuIGBwcm9wYCBpcyBhIFwicGxhaW5cIiBvYmplY3RcbiAgICAodG9TdHJpbmcuY2FsbChwcm9wKSA9PT0gJ1tvYmplY3QgT2JqZWN0XScpKSB7XG4gICAgcmV0dXJuIGRvbUVhY2godGhpcywgZnVuY3Rpb24oaWR4LCBlbCkge1xuICAgICAgc2V0Q3NzKGVsLCBwcm9wLCB2YWwsIGlkeCk7XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGdldENzcyh0aGlzWzBdLCBwcm9wKTtcbiAgfVxufTtcblxuLyoqXG4gKiBTZXQgc3R5bGVzIG9mIGFsbCBlbGVtZW50cy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ3xPYmplY3R9IHByb3BcbiAqIEBwYXJhbSB7U3RyaW5nfSB2YWxcbiAqIEBwYXJhbSB7TnVtYmVyfSBpZHggLSBvcHRpb25hbCBpbmRleCB3aXRoaW4gdGhlIHNlbGVjdGlvblxuICogQHJldHVybiB7c2VsZn1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHNldENzcyhlbCwgcHJvcCwgdmFsLCBpZHgpIHtcbiAgaWYgKCdzdHJpbmcnID09IHR5cGVvZiBwcm9wKSB7XG4gICAgdmFyIHN0eWxlcyA9IGdldENzcyhlbCk7XG4gICAgaWYgKHR5cGVvZiB2YWwgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHZhbCA9IHZhbC5jYWxsKGVsLCBpZHgsIHN0eWxlc1twcm9wXSk7XG4gICAgfVxuXG4gICAgaWYgKHZhbCA9PT0gJycpIHtcbiAgICAgIGRlbGV0ZSBzdHlsZXNbcHJvcF07XG4gICAgfSBlbHNlIGlmICh2YWwgIT0gbnVsbCkge1xuICAgICAgc3R5bGVzW3Byb3BdID0gdmFsO1xuICAgIH1cblxuICAgIGVsLmF0dHJpYnMuc3R5bGUgPSBzdHJpbmdpZnkoc3R5bGVzKTtcbiAgfSBlbHNlIGlmICgnb2JqZWN0JyA9PSB0eXBlb2YgcHJvcCkge1xuICAgIE9iamVjdC5rZXlzKHByb3ApLmZvckVhY2goZnVuY3Rpb24oayl7XG4gICAgICBzZXRDc3MoZWwsIGssIHByb3Bba10pO1xuICAgIH0pO1xuICB9XG59XG5cbi8qKlxuICogR2V0IHBhcnNlZCBzdHlsZXMgb2YgdGhlIGZpcnN0IGVsZW1lbnQuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHByb3BcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGdldENzcyhlbCwgcHJvcCkge1xuICB2YXIgc3R5bGVzID0gcGFyc2UoZWwuYXR0cmlicy5zdHlsZSk7XG4gIGlmICh0eXBlb2YgcHJvcCA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gc3R5bGVzW3Byb3BdO1xuICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkocHJvcCkpIHtcbiAgICByZXR1cm4gXy5waWNrKHN0eWxlcywgcHJvcCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHN0eWxlcztcbiAgfVxufVxuXG4vKipcbiAqIFN0cmluZ2lmeSBgb2JqYCB0byBzdHlsZXMuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9ialxuICogQHJldHVybiB7T2JqZWN0fVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gc3RyaW5naWZ5KG9iaikge1xuICByZXR1cm4gT2JqZWN0LmtleXMob2JqIHx8IHt9KVxuICAgIC5yZWR1Y2UoZnVuY3Rpb24oc3RyLCBwcm9wKXtcbiAgICAgIHJldHVybiBzdHIgKz0gJydcbiAgICAgICAgKyAoc3RyID8gJyAnIDogJycpXG4gICAgICAgICsgcHJvcFxuICAgICAgICArICc6ICdcbiAgICAgICAgKyBvYmpbcHJvcF1cbiAgICAgICAgKyAnOyc7XG4gICAgfSwgJycpO1xufVxuXG4vKipcbiAqIFBhcnNlIGBzdHlsZXNgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHlsZXNcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHBhcnNlKHN0eWxlcykge1xuICBzdHlsZXMgPSAoc3R5bGVzIHx8ICcnKS50cmltKCk7XG5cbiAgaWYgKCFzdHlsZXMpIHJldHVybiB7fTtcblxuICByZXR1cm4gc3R5bGVzXG4gICAgLnNwbGl0KCc7JylcbiAgICAucmVkdWNlKGZ1bmN0aW9uKG9iaiwgc3RyKXtcbiAgICAgIHZhciBuID0gc3RyLmluZGV4T2YoJzonKTtcbiAgICAgIC8vIHNraXAgaWYgdGhlcmUgaXMgbm8gOiwgb3IgaWYgaXQgaXMgdGhlIGZpcnN0L2xhc3QgY2hhcmFjdGVyXG4gICAgICBpZiAobiA8IDEgfHwgbiA9PT0gc3RyLmxlbmd0aC0xKSByZXR1cm4gb2JqO1xuICAgICAgb2JqW3N0ci5zbGljZSgwLG4pLnRyaW0oKV0gPSBzdHIuc2xpY2UobisxKS50cmltKCk7XG4gICAgICByZXR1cm4gb2JqO1xuICAgIH0sIHt9KTtcbn1cbiJdfQ==