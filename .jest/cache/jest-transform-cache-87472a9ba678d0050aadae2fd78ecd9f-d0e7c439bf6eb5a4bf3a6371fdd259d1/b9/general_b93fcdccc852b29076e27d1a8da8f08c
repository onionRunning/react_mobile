63fa10e196ae827e8de3db85cda25943
var DomUtils = require("domutils"),
    isTag = DomUtils.isTag,
    getParent = DomUtils.getParent,
    getChildren = DomUtils.getChildren,
    getSiblings = DomUtils.getSiblings,
    getName = DomUtils.getName;
/*
	all available rules
*/


module.exports = {
  __proto__: null,
  attribute: require("./attributes.js").compile,
  pseudo: require("./pseudos.js").compile,
  //tags
  tag: function (next, data) {
    var name = data.name;
    return function tag(elem) {
      return getName(elem) === name && next(elem);
    };
  },
  //traversal
  descendant: function (next, rule, options, context, acceptSelf) {
    return function descendant(elem) {
      if (acceptSelf && next(elem)) return true;
      var found = false;

      while (!found && (elem = getParent(elem))) {
        found = next(elem);
      }

      return found;
    };
  },
  parent: function (next, data, options) {
    if (options && options.strict) throw SyntaxError("Parent selector isn't part of CSS3");
    return function parent(elem) {
      return getChildren(elem).some(test);
    };

    function test(elem) {
      return isTag(elem) && next(elem);
    }
  },
  child: function (next) {
    return function child(elem) {
      var parent = getParent(elem);
      return !!parent && next(parent);
    };
  },
  sibling: function (next) {
    return function sibling(elem) {
      var siblings = getSiblings(elem);

      for (var i = 0; i < siblings.length; i++) {
        if (isTag(siblings[i])) {
          if (siblings[i] === elem) break;
          if (next(siblings[i])) return true;
        }
      }

      return false;
    };
  },
  adjacent: function (next) {
    return function adjacent(elem) {
      var siblings = getSiblings(elem),
          lastElement;

      for (var i = 0; i < siblings.length; i++) {
        if (isTag(siblings[i])) {
          if (siblings[i] === elem) break;
          lastElement = siblings[i];
        }
      }

      return !!lastElement && next(lastElement);
    };
  },
  universal: function (next) {
    return next;
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdlbmVyYWwuanMiXSwibmFtZXMiOlsiRG9tVXRpbHMiLCJyZXF1aXJlIiwiaXNUYWciLCJnZXRQYXJlbnQiLCJnZXRDaGlsZHJlbiIsImdldFNpYmxpbmdzIiwiZ2V0TmFtZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJfX3Byb3RvX18iLCJhdHRyaWJ1dGUiLCJjb21waWxlIiwicHNldWRvIiwidGFnIiwibmV4dCIsImRhdGEiLCJuYW1lIiwiZWxlbSIsImRlc2NlbmRhbnQiLCJydWxlIiwib3B0aW9ucyIsImNvbnRleHQiLCJhY2NlcHRTZWxmIiwiZm91bmQiLCJwYXJlbnQiLCJzdHJpY3QiLCJTeW50YXhFcnJvciIsInNvbWUiLCJ0ZXN0IiwiY2hpbGQiLCJzaWJsaW5nIiwic2libGluZ3MiLCJpIiwibGVuZ3RoIiwiYWRqYWNlbnQiLCJsYXN0RWxlbWVudCIsInVuaXZlcnNhbCJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUEsUUFBUSxHQUFNQyxPQUFPLENBQUMsVUFBRCxDQUF6QjtBQUFBLElBQ0lDLEtBQUssR0FBU0YsUUFBUSxDQUFDRSxLQUQzQjtBQUFBLElBRUlDLFNBQVMsR0FBS0gsUUFBUSxDQUFDRyxTQUYzQjtBQUFBLElBR0lDLFdBQVcsR0FBR0osUUFBUSxDQUFDSSxXQUgzQjtBQUFBLElBSUlDLFdBQVcsR0FBR0wsUUFBUSxDQUFDSyxXQUozQjtBQUFBLElBS0lDLE9BQU8sR0FBT04sUUFBUSxDQUFDTSxPQUwzQjtBQU9BOzs7OztBQUdBQyxNQUFNLENBQUNDLE9BQVAsR0FBaUI7QUFDaEJDLEVBQUFBLFNBQVMsRUFBRSxJQURLO0FBR2hCQyxFQUFBQSxTQUFTLEVBQUVULE9BQU8sQ0FBQyxpQkFBRCxDQUFQLENBQTJCVSxPQUh0QjtBQUloQkMsRUFBQUEsTUFBTSxFQUFFWCxPQUFPLENBQUMsY0FBRCxDQUFQLENBQXdCVSxPQUpoQjtBQU1oQjtBQUNBRSxFQUFBQSxHQUFHLEVBQUUsVUFBU0MsSUFBVCxFQUFlQyxJQUFmLEVBQW9CO0FBQ3hC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QyxZQUFHOUIsS0FBSyxDQUFDNkIsUUFBUSxDQUFDQyxDQUFELENBQVQsQ0FBUixFQUFzQjtBQUNyQixjQUFHRCxRQUFRLENBQUNDLENBQUQsQ0FBUixLQUFnQmYsSUFBbkIsRUFBeUI7QUFDekJrQixVQUFBQSxXQUFXLEdBQUdKLFFBQVEsQ0FBQ0MsQ0FBRCxDQUF0QjtBQUNBO0FBQ0Q7O0FBRUQsYUFBTyxDQUFDLENBQUNHLFdBQUYsSUFBaUJyQixJQUFJLENBQUNxQixXQUFELENBQTVCO0FBQ0EsS0FaRDtBQWFBLEdBMUVlO0FBMkVoQkMsRUFBQUEsU0FBUyxFQUFFLFVBQVN0QixJQUFULEVBQWM7QUFDeEIsV0FBT0EsSUFBUDtBQUNBO0FBN0VlLENBQWpCIiwic291cmNlc0NvbnRlbnQiOlsidmFyIERvbVV0aWxzICAgID0gcmVxdWlyZShcImRvbXV0aWxzXCIpLFxuICAgIGlzVGFnICAgICAgID0gRG9tVXRpbHMuaXNUYWcsXG4gICAgZ2V0UGFyZW50ICAgPSBEb21VdGlscy5nZXRQYXJlbnQsXG4gICAgZ2V0Q2hpbGRyZW4gPSBEb21VdGlscy5nZXRDaGlsZHJlbixcbiAgICBnZXRTaWJsaW5ncyA9IERvbVV0aWxzLmdldFNpYmxpbmdzLFxuICAgIGdldE5hbWUgICAgID0gRG9tVXRpbHMuZ2V0TmFtZTtcblxuLypcblx0YWxsIGF2YWlsYWJsZSBydWxlc1xuKi9cbm1vZHVsZS5leHBvcnRzID0ge1xuXHRfX3Byb3RvX186IG51bGwsXG5cblx0YXR0cmlidXRlOiByZXF1aXJlKFwiLi9hdHRyaWJ1dGVzLmpzXCIpLmNvbXBpbGUsXG5cdHBzZXVkbzogcmVxdWlyZShcIi4vcHNldWRvcy5qc1wiKS5jb21waWxlLFxuXG5cdC8vdGFnc1xuXHR0YWc6IGZ1bmN0aW9uKG5leHQsIGRhdGEpe1xuXHRcdHZhciBuYW1lID0gZGF0YS5uYW1lO1xuXHRcdHJldHVybiBmdW5jdGlvbiB0YWcoZWxlbSl7XG5cdFx0XHRyZXR1cm4gZ2V0TmFtZShlbGVtKSA9PT0gbmFtZSAmJiBuZXh0KGVsZW0pO1xuXHRcdH07XG5cdH0sXG5cblx0Ly90cmF2ZXJzYWxcblx0ZGVzY2VuZGFudDogZnVuY3Rpb24obmV4dCwgcnVsZSwgb3B0aW9ucywgY29udGV4dCwgYWNjZXB0U2VsZil7XG5cdFx0cmV0dXJuIGZ1bmN0aW9uIGRlc2NlbmRhbnQoZWxlbSl7XG5cblx0XHRcdGlmIChhY2NlcHRTZWxmICYmIG5leHQoZWxlbSkpIHJldHVybiB0cnVlO1xuXG5cdFx0XHR2YXIgZm91bmQgPSBmYWxzZTtcblxuXHRcdFx0d2hpbGUoIWZvdW5kICYmIChlbGVtID0gZ2V0UGFyZW50KGVsZW0pKSl7XG5cdFx0XHRcdGZvdW5kID0gbmV4dChlbGVtKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGZvdW5kO1xuXHRcdH07XG5cdH0sXG5cdHBhcmVudDogZnVuY3Rpb24obmV4dCwgZGF0YSwgb3B0aW9ucyl7XG5cdFx0aWYob3B0aW9ucyAmJiBvcHRpb25zLnN0cmljdCkgdGhyb3cgU3ludGF4RXJyb3IoXCJQYXJlbnQgc2VsZWN0b3IgaXNuJ3QgcGFydCBvZiBDU1MzXCIpO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIHBhcmVudChlbGVtKXtcblx0XHRcdHJldHVybiBnZXRDaGlsZHJlbihlbGVtKS5zb21lKHRlc3QpO1xuXHRcdH07XG5cblx0XHRmdW5jdGlvbiB0ZXN0KGVsZW0pe1xuXHRcdFx0cmV0dXJuIGlzVGFnKGVsZW0pICYmIG5leHQoZWxlbSk7XG5cdFx0fVxuXHR9LFxuXHRjaGlsZDogZnVuY3Rpb24obmV4dCl7XG5cdFx0cmV0dXJuIGZ1bmN0aW9uIGNoaWxkKGVsZW0pe1xuXHRcdFx0dmFyIHBhcmVudCA9IGdldFBhcmVudChlbGVtKTtcblx0XHRcdHJldHVybiAhIXBhcmVudCAmJiBuZXh0KHBhcmVudCk7XG5cdFx0fTtcblx0fSxcblx0c2libGluZzogZnVuY3Rpb24obmV4dCl7XG5cdFx0cmV0dXJuIGZ1bmN0aW9uIHNpYmxpbmcoZWxlbSl7XG5cdFx0XHR2YXIgc2libGluZ3MgPSBnZXRTaWJsaW5ncyhlbGVtKTtcblxuXHRcdFx0Zm9yKHZhciBpID0gMDsgaSA8IHNpYmxpbmdzLmxlbmd0aDsgaSsrKXtcblx0XHRcdFx0aWYoaXNUYWcoc2libGluZ3NbaV0pKXtcblx0XHRcdFx0XHRpZihzaWJsaW5nc1tpXSA9PT0gZWxlbSkgYnJlYWs7XG5cdFx0XHRcdFx0aWYobmV4dChzaWJsaW5nc1tpXSkpIHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9O1xuXHR9LFxuXHRhZGphY2VudDogZnVuY3Rpb24obmV4dCl7XG5cdFx0cmV0dXJuIGZ1bmN0aW9uIGFkamFjZW50KGVsZW0pe1xuXHRcdFx0dmFyIHNpYmxpbmdzID0gZ2V0U2libGluZ3MoZWxlbSksXG5cdFx0XHQgICAgbGFzdEVsZW1lbnQ7XG5cblx0XHRcdGZvcih2YXIgaSA9IDA7IGkgPCBzaWJsaW5ncy5sZW5ndGg7IGkrKyl7XG5cdFx0XHRcdGlmKGlzVGFnKHNpYmxpbmdzW2ldKSl7XG5cdFx0XHRcdFx0aWYoc2libGluZ3NbaV0gPT09IGVsZW0pIGJyZWFrO1xuXHRcdFx0XHRcdGxhc3RFbGVtZW50ID0gc2libGluZ3NbaV07XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuICEhbGFzdEVsZW1lbnQgJiYgbmV4dChsYXN0RWxlbWVudCk7XG5cdFx0fTtcblx0fSxcblx0dW5pdmVyc2FsOiBmdW5jdGlvbihuZXh0KXtcblx0XHRyZXR1cm4gbmV4dDtcblx0fVxufTsiXX0=