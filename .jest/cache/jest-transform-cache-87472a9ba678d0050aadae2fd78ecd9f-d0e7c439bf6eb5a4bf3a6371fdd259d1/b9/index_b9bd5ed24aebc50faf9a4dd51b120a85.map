{"version":3,"sources":["../src/index.js"],"names":["zeroWidthSpace","specialProperty","semaphore","Symbol","value","forbidExtraProps","isBranded","propTypes","unknownProps"],"mappings":";;;qBAgBwBK,gB;;;;;;AAhBxB,IAAA,IAAA,GAAA,OAAA,CAAA,KAAA,CAAA;;;;AAEA,IAAA,cAAA,GAAA,OAAA,CAAA,yBAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAML,cAAAA,GAAN,QAAA;AACA,IAAMC,eAAAA,GAAAA,uBAAN,cAAA;AACA,IAAMC,SAAAA,GAAY,OAAA,MAAA,KAAA,UAAA,IAAgC,OAAOC,MAAAA,CAAP,KAAOA,CAAP,KAAhC,UAAA,GAAsEA,MAAAA,CAAAA,KAAAA,CAAAA,CAAtE,eAAsEA,CAAtE;AAAuG;AAAzH,eAAA;;AAEA,SAAA,KAAA,CAAA,EAAA,EAAmB;AACjB,SAAO,CAAA,GAAA,QAAA,CAAA,SAAA,CAAA,EAAA,EAAA,EAAA,eAAA,CAAA,EAAA,EAAA,eAAA,EAAP,SAAO,CAAA,CAAP;AACD;;AAED,SAAA,SAAA,CAAA,KAAA,EAA0B;AACxB,SAAOC,KAAAA,IAASA,KAAAA,CAAAA,eAAAA,CAAAA,KAAhB,SAAA;AACD;;AAEc,SAAA,gBAAA,CAAA,SAAA,EAAqC;AAClD,MAAI,CAAC,CAAA,GAAA,eAAA,CAAA,SAAA,CAAA,EAAL,SAAK,CAAL,EAA+B;AAC7B,UAAM,IAAA,SAAA,CAAN,mCAAM,CAAN;AACD;;AACD,MAAI,CAAA,GAAA,KAAA,CAAA,SAAA,CAAA,EAAA,SAAA,EAAA,eAAA,KAAmC,CAACE,SAAAA,CAAUC,SAAAA,CAAlD,eAAkDA,CAAVD,CAAxC,EAA+E;AAC7E,UAAM,IAAA,SAAA,CAAN,iKAAM,CAAN;AACD;;AAED,SAAA,CAAA,GAAA,QAAA,CAAA,SAAA,CAAA,EAAA,EAAA,EAAA,SAAA,EAAA,eAAA,CAAA,EAAA,EAAA,eAAA,EAGqB,KAAA,CAAA,YAAA;AAAM,aAAA,kBAAA,CAAA,KAAA,EAAA,CAAA,EAAA,aAAA,EAAqD;AAC5E,UAAME,YAAAA,GAAe,MAAA,CAAA,IAAA,CAAA,KAAA,EAAA,MAAA,CAA0B,UAAA,IAAA,EAAA;AAAA,eAAQ,CAAC,CAAA,GAAA,KAAA,CAAA,SAAA,CAAA,EAAA,SAAA,EAAT,IAAS,CAAT;AAA/C,OAAqB,CAArB;;AACA,UAAIA,YAAAA,CAAAA,MAAAA,GAAJ,CAAA,EAA6B;AAC3B,eAAO,IAAA,SAAA,CAAA,MAAA,CAAA,aAAA,CAAA,GAAA,yBAAA,GAAA,MAAA,CAAwDA,YAAAA,CAAAA,IAAAA,CAA/D,IAA+DA,CAAxD,CAAA,CAAP;AACD;;AACD,aAAA,IAAA;AACD;;AANkB,WAAA,kBAAA;AAHrB,GAGqB,EAAA,CAHrB,CAAA,CAAA;AAWD","sourcesContent":["import has from 'has';\n\nimport isPlainObject from './helpers/isPlainObject';\n\nconst zeroWidthSpace = '\\u200b';\nconst specialProperty = `prop-types-exact: ${zeroWidthSpace}`;\nconst semaphore = typeof Symbol === 'function' && typeof Symbol['for'] === 'function' ? Symbol['for'](specialProperty) : /* istanbul ignore next */ specialProperty;\n\nfunction brand(fn) {\n  return Object.assign(fn, { [specialProperty]: semaphore });\n}\n\nfunction isBranded(value) {\n  return value && value[specialProperty] === semaphore;\n}\n\nexport default function forbidExtraProps(propTypes) {\n  if (!isPlainObject(propTypes)) {\n    throw new TypeError('given propTypes must be an object');\n  }\n  if (has(propTypes, specialProperty) && !isBranded(propTypes[specialProperty])) {\n    throw new TypeError('Against all odds, you created a propType for a prop that uses both the zero-width space and our custom string - which, sadly, conflicts with `prop-types-exact`');\n  }\n\n  return {\n    ...propTypes,\n    // eslint-disable-next-line prefer-arrow-callback\n    [specialProperty]: brand(function forbidUnknownProps(props, _, componentName) {\n      const unknownProps = Object.keys(props).filter(prop => !has(propTypes, prop));\n      if (unknownProps.length > 0) {\n        return new TypeError(`${componentName}: unknown props found: ${unknownProps.join(', ')}`);\n      }\n      return null;\n    }),\n  };\n}\n"]}