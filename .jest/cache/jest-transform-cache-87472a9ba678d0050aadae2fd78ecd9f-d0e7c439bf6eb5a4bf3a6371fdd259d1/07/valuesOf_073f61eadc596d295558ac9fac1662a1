1e1ec9406cbea3e1da9123b964b9ae9f
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = valuesOfValidator;

var _isPrimitive = _interopRequireDefault(require("./helpers/isPrimitive"));

var _wrapValidator = _interopRequireDefault(require("./helpers/wrapValidator"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
} // code adapted from https://github.com/facebook/react/blob/14156e56b9cf18ac86963185c5af4abddf3ff811/src/isomorphic/classic/types/ReactPropTypes.js#L307-L340


function valuesOfValidator(propType) {
  if (typeof propType !== 'function') {
    throw new TypeError('objectOf: propType must be a function');
  }

  var validator = function valuesOf(props, propName, componentName, location, propFullName) {
    for (var _len = arguments.length, rest = new Array(_len > 5 ? _len - 5 : 0), _key = 5; _key < _len; _key++) {
      rest[_key - 5] = arguments[_key];
    }

    var propValue = props[propName];

    if (propValue == null || (0, _isPrimitive["default"])(propValue)) {
      return null;
    }

    var firstError;
    Object.keys(propValue).some(function (key) {
      firstError = propType.apply(void 0, [propValue, key, componentName, location, "".concat(propFullName, ".").concat(key)].concat(rest));
      return firstError;
    });
    return firstError || null;
  };

  validator.isRequired = function valuesOfRequired(props, propName, componentName) {
    var propValue = props[propName];

    if (propValue == null) {
      return new TypeError("".concat(componentName, ": ").concat(propName, " is required."));
    }

    for (var _len2 = arguments.length, rest = new Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {
      rest[_key2 - 3] = arguments[_key2];
    }

    return validator.apply(void 0, [props, propName, componentName].concat(rest));
  };

  return (0, _wrapValidator["default"])(validator, 'valuesOf', propType);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy92YWx1ZXNPZi5qcyJdLCJuYW1lcyI6WyJ2YWxpZGF0b3IiLCJyZXN0IiwicHJvcFZhbHVlIiwicHJvcHMiLCJPYmplY3QiLCJmaXJzdEVycm9yIiwicHJvcFR5cGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSxJQUFBLFlBQUEsR0FBQSxzQkFBQSxDQUFBLE9BQUEsQ0FBQSx1QkFBQSxDQUFBLENBQUE7O0FBQ0EsSUFBQSxjQUFBLEdBQUEsc0JBQUEsQ0FBQSxPQUFBLENBQUEseUJBQUEsQ0FBQSxDQUFBOzs7Ozs7RUFFQTs7O0FBRWUsU0FBQSxpQkFBQSxDQUFBLFFBQUEsRUFBcUM7QUFDbEQsTUFBSSxPQUFBLFFBQUEsS0FBSixVQUFBLEVBQW9DO0FBQ2xDLFVBQU0sSUFBQSxTQUFBLENBQU4sdUNBQU0sQ0FBTjtBQUNEOztBQUVELE1BQU1BLFNBQVMsR0FBRyxTQUFBLFFBQUEsQ0FBQSxLQUFBLEVBQUEsUUFBQSxFQUFBLGFBQUEsRUFBQSxRQUFBLEVBQUEsWUFBQSxFQU9oQjtBQUFBLFNBQUEsSUFBQSxJQUFBLEdBQUEsU0FBQSxDQUFBLE1BQUEsRUFER0MsSUFDSCxHQUFBLElBQUEsS0FBQSxDQUFBLElBQUEsR0FBQSxDQUFBLEdBQUEsSUFBQSxHQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsRUFBQSxJQUFBLEdBQUEsQ0FBQSxFQUFBLElBQUEsR0FBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLEVBQUE7QUFER0EsTUFBQUEsSUFDSCxDQUFBLElBQUEsR0FBQSxDQUFBLENBREdBLEdBQ0gsU0FBQSxDQUFBLElBQUEsQ0FER0E7QUFDSDs7QUFBQSxRQUNvQkMsU0FEcEIsR0FDa0NDLEtBRGxDLENBQUEsUUFBQSxDQUFBOztBQUVBLFFBQUlELFNBQVMsSUFBVEEsSUFBQUEsSUFBcUIsQ0FBQSxHQUFBLFlBQUEsQ0FBQSxTQUFBLENBQUEsRUFBekIsU0FBeUIsQ0FBekIsRUFBaUQ7QUFDL0MsYUFBQSxJQUFBO0FBQ0Q7O0FBRUQsUUFBQSxVQUFBO0FBQ0FFLElBQUFBLE1BQU0sQ0FBTkEsSUFBQUEsQ0FBQUEsU0FBQUEsRUFBQUEsSUFBQUEsQ0FBNEIsVUFBQSxHQUFBLEVBQVM7QUFDbkNDLE1BQUFBLFVBQVUsR0FBR0MsUUFBUSxDQUFSQSxLQUFBQSxDQUFBQSxLQUFBQSxDQUFBQSxFQUFBQSxDQUFBQSxTQUFBQSxFQUFBQSxHQUFBQSxFQUFBQSxhQUFBQSxFQUFBQSxRQUFBQSxFQUFBQSxHQUFBQSxNQUFBQSxDQUFBQSxZQUFBQSxFQUFBQSxHQUFBQSxFQUFBQSxNQUFBQSxDQUFBQSxHQUFBQSxDQUFBQSxFQUFBQSxNQUFBQSxDQUFiRCxJQUFhQyxDQUFBQSxDQUFiRDtBQVFBLGFBQUEsVUFBQTtBQVRGRCxLQUFBQTtBQVdBLFdBQU9DLFVBQVUsSUFBakIsSUFBQTtBQXpCRixHQUFBOztBQTJCQUwsRUFBQUEsU0FBUyxDQUFUQSxVQUFBQSxHQUF1QixTQUFBLGdCQUFBLENBQUEsS0FBQSxFQUFBLFFBQUEsRUFBQSxhQUFBLEVBQW1FO0FBQUEsUUFDcEVFLFNBRG9FLEdBQ3REQyxLQURzRCxDQUFBLFFBQUEsQ0FBQTs7QUFFeEYsUUFBSUQsU0FBUyxJQUFiLElBQUEsRUFBdUI7QUFDckIsYUFBTyxJQUFBLFNBQUEsQ0FBQSxHQUFBLE1BQUEsQ0FBQSxhQUFBLEVBQUEsSUFBQSxFQUFBLE1BQUEsQ0FBQSxRQUFBLEVBQVAsZUFBTyxDQUFBLENBQVA7QUFDRDs7QUFKdUYsU0FBQSxJQUFBLEtBQUEsR0FBQSxTQUFBLENBQUEsTUFBQSxFQUFORCxJQUFNLEdBQUEsSUFBQSxLQUFBLENBQUEsS0FBQSxHQUFBLENBQUEsR0FBQSxLQUFBLEdBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQSxFQUFBLEtBQUEsR0FBQSxDQUFBLEVBQUEsS0FBQSxHQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsRUFBQTtBQUFOQSxNQUFBQSxJQUFNLENBQUEsS0FBQSxHQUFBLENBQUEsQ0FBTkEsR0FBTSxTQUFBLENBQUEsS0FBQSxDQUFOQTtBQUFNOztBQUt4RixXQUFPRCxTQUFTLENBQVRBLEtBQUFBLENBQUFBLEtBQUFBLENBQUFBLEVBQUFBLENBQUFBLEtBQUFBLEVBQUFBLFFBQUFBLEVBQUFBLGFBQUFBLEVBQUFBLE1BQUFBLENBQVAsSUFBT0EsQ0FBQUEsQ0FBUDtBQUxGQSxHQUFBQTs7QUFRQSxTQUFPLENBQUEsR0FBQSxjQUFBLENBQUEsU0FBQSxDQUFBLEVBQUEsU0FBQSxFQUFBLFVBQUEsRUFBUCxRQUFPLENBQVA7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBpc1ByaW1pdGl2ZSBmcm9tICcuL2hlbHBlcnMvaXNQcmltaXRpdmUnO1xuaW1wb3J0IHdyYXBWYWxpZGF0b3IgZnJvbSAnLi9oZWxwZXJzL3dyYXBWYWxpZGF0b3InO1xuXG4vLyBjb2RlIGFkYXB0ZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvYmxvYi8xNDE1NmU1NmI5Y2YxOGFjODY5NjMxODVjNWFmNGFiZGRmM2ZmODExL3NyYy9pc29tb3JwaGljL2NsYXNzaWMvdHlwZXMvUmVhY3RQcm9wVHlwZXMuanMjTDMwNy1MMzQwXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHZhbHVlc09mVmFsaWRhdG9yKHByb3BUeXBlKSB7XG4gIGlmICh0eXBlb2YgcHJvcFR5cGUgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdvYmplY3RPZjogcHJvcFR5cGUgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG4gIH1cblxuICBjb25zdCB2YWxpZGF0b3IgPSBmdW5jdGlvbiB2YWx1ZXNPZihcbiAgICBwcm9wcyxcbiAgICBwcm9wTmFtZSxcbiAgICBjb21wb25lbnROYW1lLFxuICAgIGxvY2F0aW9uLFxuICAgIHByb3BGdWxsTmFtZSxcbiAgICAuLi5yZXN0XG4gICkge1xuICAgIGNvbnN0IHsgW3Byb3BOYW1lXTogcHJvcFZhbHVlIH0gPSBwcm9wcztcbiAgICBpZiAocHJvcFZhbHVlID09IG51bGwgfHwgaXNQcmltaXRpdmUocHJvcFZhbHVlKSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgbGV0IGZpcnN0RXJyb3I7XG4gICAgT2JqZWN0LmtleXMocHJvcFZhbHVlKS5zb21lKChrZXkpID0+IHtcbiAgICAgIGZpcnN0RXJyb3IgPSBwcm9wVHlwZShcbiAgICAgICAgcHJvcFZhbHVlLFxuICAgICAgICBrZXksXG4gICAgICAgIGNvbXBvbmVudE5hbWUsXG4gICAgICAgIGxvY2F0aW9uLFxuICAgICAgICBgJHtwcm9wRnVsbE5hbWV9LiR7a2V5fWAsXG4gICAgICAgIC4uLnJlc3QsXG4gICAgICApO1xuICAgICAgcmV0dXJuIGZpcnN0RXJyb3I7XG4gICAgfSk7XG4gICAgcmV0dXJuIGZpcnN0RXJyb3IgfHwgbnVsbDtcbiAgfTtcbiAgdmFsaWRhdG9yLmlzUmVxdWlyZWQgPSBmdW5jdGlvbiB2YWx1ZXNPZlJlcXVpcmVkKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgLi4ucmVzdCkge1xuICAgIGNvbnN0IHsgW3Byb3BOYW1lXTogcHJvcFZhbHVlIH0gPSBwcm9wcztcbiAgICBpZiAocHJvcFZhbHVlID09IG51bGwpIHtcbiAgICAgIHJldHVybiBuZXcgVHlwZUVycm9yKGAke2NvbXBvbmVudE5hbWV9OiAke3Byb3BOYW1lfSBpcyByZXF1aXJlZC5gKTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbGlkYXRvcihwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIC4uLnJlc3QpO1xuICB9O1xuXG4gIHJldHVybiB3cmFwVmFsaWRhdG9yKHZhbGlkYXRvciwgJ3ZhbHVlc09mJywgcHJvcFR5cGUpO1xufVxuIl19