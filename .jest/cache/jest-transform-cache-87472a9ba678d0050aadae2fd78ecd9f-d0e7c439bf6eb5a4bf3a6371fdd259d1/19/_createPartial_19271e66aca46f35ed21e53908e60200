632b9a8307329d5f967cbc2ee9474ca3
var apply = require('./_apply'),
    createCtor = require('./_createCtor'),
    root = require('./_root');
/** Used to compose bitmasks for function metadata. */


var WRAP_BIND_FLAG = 1;
/**
 * Creates a function that wraps `func` to invoke it with the `this` binding
 * of `thisArg` and `partials` prepended to the arguments it receives.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {Array} partials The arguments to prepend to those provided to
 *  the new function.
 * @returns {Function} Returns the new wrapped function.
 */

function createPartial(func, bitmask, thisArg, partials) {
  var isBind = bitmask & WRAP_BIND_FLAG,
      Ctor = createCtor(func);

  function wrapper() {
    var argsIndex = -1,
        argsLength = arguments.length,
        leftIndex = -1,
        leftLength = partials.length,
        args = Array(leftLength + argsLength),
        fn = this && this !== root && this instanceof wrapper ? Ctor : func;

    while (++leftIndex < leftLength) {
      args[leftIndex] = partials[leftIndex];
    }

    while (argsLength--) {
      args[leftIndex++] = arguments[++argsIndex];
    }

    return apply(fn, isBind ? thisArg : this, args);
  }

  return wrapper;
}

module.exports = createPartial;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIl9jcmVhdGVQYXJ0aWFsLmpzIl0sIm5hbWVzIjpbImFwcGx5IiwicmVxdWlyZSIsImNyZWF0ZUN0b3IiLCJyb290IiwiV1JBUF9CSU5EX0ZMQUciLCJjcmVhdGVQYXJ0aWFsIiwiZnVuYyIsImJpdG1hc2siLCJ0aGlzQXJnIiwicGFydGlhbHMiLCJpc0JpbmQiLCJDdG9yIiwid3JhcHBlciIsImFyZ3NJbmRleCIsImFyZ3NMZW5ndGgiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJsZWZ0SW5kZXgiLCJsZWZ0TGVuZ3RoIiwiYXJncyIsIkFycmF5IiwiZm4iLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFJQSxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxVQUFELENBQW5CO0FBQUEsSUFDSUMsVUFBVSxHQUFHRCxPQUFPLENBQUMsZUFBRCxDQUR4QjtBQUFBLElBRUlFLElBQUksR0FBR0YsT0FBTyxDQUFDLFNBQUQsQ0FGbEI7QUFJQTs7O0FBQ0EsSUFBSUcsY0FBYyxHQUFHLENBQXJCO0FBRUE7Ozs7Ozs7Ozs7Ozs7QUFZQSxTQUFTQyxhQUFULENBQXVCQyxJQUF2QixFQUE2QkMsT0FBN0IsRUFBc0NDLE9BQXRDLEVBQStDQyxRQUEvQyxFQUF5RDtBQUN2RCxNQUFJQyxNQUFNLEdBQUdILE9BQU8sR0FBR0gsY0FBdkI7QUFBQSxNQUNJTyxJQUFJLEdBQUdULFVBQVUsQ0FBQ0ksSUFBRCxDQURyQjs7QUFHQSxXQUFTTSxPQUFULEdBQW1CO0FBQ2pCLFFBQUlDLFNBQVMsR0FBRyxDQUFDLENBQWpCO0FBQUEsUUFDSUMsVUFBVSxHQUFHQyxTQUFTLENBQUNDLE1BRDNCO0FBQUEsUUFFSUMsU0FBUyxHQUFHLENBQUMsQ0FGakI7QUFBQSxRQUdJQyxVQUFVLEdBQUdULFFBQVEsQ0FBQ08sTUFIMUI7QUFBQSxRQUlJRyxJQUFJLEdBQUdDLEtBQUssQ0FBQ0YsVUFBVSxHQUFHSixVQUFkLENBSmhCO0FBQUEsUUFLSU8sRUFBRSxHQUFJLFFBQVEsU0FBU2xCLElBQWpCLElBQXlCLGdCQUFnQlMsT0FBMUMsR0FBcURELElBQXJELEdBQTRETCxJQUxyRTs7QUFPQSxXQUFPLEVBQUVXLFNBQUYsR0FBY0MsVUFBckIsRUFBaUM7QUFDL0JDLE1BQUFBLElBQUksQ0FBQ0YsU0FBRCxDQUFKLEdBQWtCUixRQUFRLENBQUNRLFNBQUQsQ0FBMUI7QUFDRDs7QUFDRCxXQUFPSCxVQUFVLEVBQWpCLEVBQXFCO0FBQ25CSyxNQUFBQSxJQUFJLENBQUNGLFNBQVMsRUFBVixDQUFKLEdBQW9CRixTQUFTLENBQUMsRUFBRUYsU0FBSCxDQUE3QjtBQUNEOztBQUNELFdBQU9iLEtBQUssQ0FBQ3FCLEVBQUQsRUFBS1gsTUFBTSxHQUFHRixPQUFILEdBQWEsSUFBeEIsRUFBOEJXLElBQTlCLENBQVo7QUFDRDs7QUFDRCxTQUFPUCxPQUFQO0FBQ0Q7O0FBRURVLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQmxCLGFBQWpCIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGFwcGx5ID0gcmVxdWlyZSgnLi9fYXBwbHknKSxcbiAgICBjcmVhdGVDdG9yID0gcmVxdWlyZSgnLi9fY3JlYXRlQ3RvcicpLFxuICAgIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIGZ1bmN0aW9uIG1ldGFkYXRhLiAqL1xudmFyIFdSQVBfQklORF9GTEFHID0gMTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCB3cmFwcyBgZnVuY2AgdG8gaW52b2tlIGl0IHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nXG4gKiBvZiBgdGhpc0FyZ2AgYW5kIGBwYXJ0aWFsc2AgcHJlcGVuZGVkIHRvIHRoZSBhcmd1bWVudHMgaXQgcmVjZWl2ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBjcmVhdGVXcmFwYCBmb3IgbW9yZSBkZXRhaWxzLlxuICogQHBhcmFtIHsqfSB0aGlzQXJnIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gKiBAcGFyYW0ge0FycmF5fSBwYXJ0aWFscyBUaGUgYXJndW1lbnRzIHRvIHByZXBlbmQgdG8gdGhvc2UgcHJvdmlkZWQgdG9cbiAqICB0aGUgbmV3IGZ1bmN0aW9uLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgd3JhcHBlZCBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlUGFydGlhbChmdW5jLCBiaXRtYXNrLCB0aGlzQXJnLCBwYXJ0aWFscykge1xuICB2YXIgaXNCaW5kID0gYml0bWFzayAmIFdSQVBfQklORF9GTEFHLFxuICAgICAgQ3RvciA9IGNyZWF0ZUN0b3IoZnVuYyk7XG5cbiAgZnVuY3Rpb24gd3JhcHBlcigpIHtcbiAgICB2YXIgYXJnc0luZGV4ID0gLTEsXG4gICAgICAgIGFyZ3NMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoLFxuICAgICAgICBsZWZ0SW5kZXggPSAtMSxcbiAgICAgICAgbGVmdExlbmd0aCA9IHBhcnRpYWxzLmxlbmd0aCxcbiAgICAgICAgYXJncyA9IEFycmF5KGxlZnRMZW5ndGggKyBhcmdzTGVuZ3RoKSxcbiAgICAgICAgZm4gPSAodGhpcyAmJiB0aGlzICE9PSByb290ICYmIHRoaXMgaW5zdGFuY2VvZiB3cmFwcGVyKSA/IEN0b3IgOiBmdW5jO1xuXG4gICAgd2hpbGUgKCsrbGVmdEluZGV4IDwgbGVmdExlbmd0aCkge1xuICAgICAgYXJnc1tsZWZ0SW5kZXhdID0gcGFydGlhbHNbbGVmdEluZGV4XTtcbiAgICB9XG4gICAgd2hpbGUgKGFyZ3NMZW5ndGgtLSkge1xuICAgICAgYXJnc1tsZWZ0SW5kZXgrK10gPSBhcmd1bWVudHNbKythcmdzSW5kZXhdO1xuICAgIH1cbiAgICByZXR1cm4gYXBwbHkoZm4sIGlzQmluZCA/IHRoaXNBcmcgOiB0aGlzLCBhcmdzKTtcbiAgfVxuICByZXR1cm4gd3JhcHBlcjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVQYXJ0aWFsO1xuIl19