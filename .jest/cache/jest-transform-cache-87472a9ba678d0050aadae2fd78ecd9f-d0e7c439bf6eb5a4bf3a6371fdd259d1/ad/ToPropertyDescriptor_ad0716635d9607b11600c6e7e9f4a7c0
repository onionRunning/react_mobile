115e02c1d550935cffb535fd6201bc6c
'use strict';

var has = require('has');

var GetIntrinsic = require('../GetIntrinsic');

var $TypeError = GetIntrinsic('%TypeError%');

var Type = require('./Type');

var ToBoolean = require('./ToBoolean');

var IsCallable = require('./IsCallable'); // https://ecma-international.org/ecma-262/5.1/#sec-8.10.5


module.exports = function ToPropertyDescriptor(Obj) {
  if (Type(Obj) !== 'Object') {
    throw new $TypeError('ToPropertyDescriptor requires an object');
  }

  var desc = {};

  if (has(Obj, 'enumerable')) {
    desc['[[Enumerable]]'] = ToBoolean(Obj.enumerable);
  }

  if (has(Obj, 'configurable')) {
    desc['[[Configurable]]'] = ToBoolean(Obj.configurable);
  }

  if (has(Obj, 'value')) {
    desc['[[Value]]'] = Obj.value;
  }

  if (has(Obj, 'writable')) {
    desc['[[Writable]]'] = ToBoolean(Obj.writable);
  }

  if (has(Obj, 'get')) {
    var getter = Obj.get;

    if (typeof getter !== 'undefined' && !IsCallable(getter)) {
      throw new TypeError('getter must be a function');
    }

    desc['[[Get]]'] = getter;
  }

  if (has(Obj, 'set')) {
    var setter = Obj.set;

    if (typeof setter !== 'undefined' && !IsCallable(setter)) {
      throw new $TypeError('setter must be a function');
    }

    desc['[[Set]]'] = setter;
  }

  if ((has(desc, '[[Get]]') || has(desc, '[[Set]]')) && (has(desc, '[[Value]]') || has(desc, '[[Writable]]'))) {
    throw new $TypeError('Invalid property descriptor. Cannot both specify accessors and a value or writable attribute');
  }

  return desc;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlRvUHJvcGVydHlEZXNjcmlwdG9yLmpzIl0sIm5hbWVzIjpbImhhcyIsInJlcXVpcmUiLCJHZXRJbnRyaW5zaWMiLCIkVHlwZUVycm9yIiwiVHlwZSIsIlRvQm9vbGVhbiIsIklzQ2FsbGFibGUiLCJtb2R1bGUiLCJleHBvcnRzIiwiVG9Qcm9wZXJ0eURlc2NyaXB0b3IiLCJPYmoiLCJkZXNjIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsInZhbHVlIiwid3JpdGFibGUiLCJnZXR0ZXIiLCJnZXQiLCJUeXBlRXJyb3IiLCJzZXR0ZXIiLCJzZXQiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQUlBLEdBQUcsR0FBR0MsT0FBTyxDQUFDLEtBQUQsQ0FBakI7O0FBRUEsSUFBSUMsWUFBWSxHQUFHRCxPQUFPLENBQUMsaUJBQUQsQ0FBMUI7O0FBRUEsSUFBSUUsVUFBVSxHQUFHRCxZQUFZLENBQUMsYUFBRCxDQUE3Qjs7QUFFQSxJQUFJRSxJQUFJLEdBQUdILE9BQU8sQ0FBQyxRQUFELENBQWxCOztBQUNBLElBQUlJLFNBQVMsR0FBR0osT0FBTyxDQUFDLGFBQUQsQ0FBdkI7O0FBQ0EsSUFBSUssVUFBVSxHQUFHTCxPQUFPLENBQUMsY0FBRCxDQUF4QixDLENBRUE7OztBQUVBTSxNQUFNLENBQUNDLE9BQVAsR0FBaUIsU0FBU0Msb0JBQVQsQ0FBOEJDLEdBQTlCLEVBQW1DO0FBQ25ELE1BQUlOLElBQUksQ0FBQ00sR0FBRCxDQUFKLEtBQWMsUUFBbEIsRUFBNEI7QUFDM0IsVUFBTSxJQUFJUCxVQUFKLENBQWUseUNBQWYsQ0FBTjtBQUNBOztBQUVELE1BQUlRLElBQUksR0FBRyxFQUFYOztBQUNBLE1BQUlYLEdBQUcsQ0FBQ1UsR0FBRCxFQUFNLFlBQU4sQ0FBUCxFQUE0QjtBQUMzQkMsSUFBQUEsSUFBSSxDQUFDLGdCQUFELENBQUosR0FBeUJOLFNBQVMsQ0FBQ0ssR0FBRyxDQUFDRSxVQUFMLENBQWxDO0FBQ0E7O0FBQ0QsTUFBSVosR0FBRyxDQUFDVSxHQUFELEVBQU0sY0FBTixDQUFQLEVBQThCO0FBQzdCQyxJQUFBQSxJQUFJLENBQUMsa0JBQUQsQ0FBSixHQUEyQk4sU0FBUyxDQUFDSyxHQUFHLENBQUNHLFlBQUwsQ0FBcEM7QUFDQTs7QUFDRCxNQUFJYixHQUFHLENBQUNVLEdBQUQsRUFBTSxPQUFOLENBQVAsRUFBdUI7QUFDdEJDLElBQUFBLElBQUksQ0FBQyxXQUFELENBQUosR0FBb0JELEdBQUcsQ0FBQ0ksS0FBeEI7QUFDQTs7QUFDRCxNQUFJZCxHQUFHLENBQUNVLEdBQUQsRUFBTSxVQUFOLENBQVAsRUFBMEI7QUFDekJDLElBQUFBLElBQUksQ0FBQyxjQUFELENBQUosR0FBdUJOLFNBQVMsQ0FBQ0ssR0FBRyxDQUFDSyxRQUFMLENBQWhDO0FBQ0E7O0FBQ0QsTUFBSWYsR0FBRyxDQUFDVSxHQUFELEVBQU0sS0FBTixDQUFQLEVBQXFCO0FBQ3BCLFFBQUlNLE1BQU0sR0FBR04sR0FBRyxDQUFDTyxHQUFqQjs7QUFDQSxRQUFJLE9BQU9ELE1BQVAsS0FBa0IsV0FBbEIsSUFBaUMsQ0FBQ1YsVUFBVSxDQUFDVSxNQUFELENBQWhELEVBQTBEO0FBQ3pELFlBQU0sSUFBSUUsU0FBSixDQUFjLDJCQUFkLENBQU47QUFDQTs7QUFDRFAsSUFBQUEsSUFBSSxDQUFDLFNBQUQsQ0FBSixHQUFrQkssTUFBbEI7QUFDQTs7QUFDRCxNQUFJaEIsR0FBRyxDQUFDVSxHQUFELEVBQU0sS0FBTixDQUFQLEVBQXFCO0FBQ3BCLFFBQUlTLE1BQU0sR0FBR1QsR0FBRyxDQUFDVSxHQUFqQjs7QUFDQSxRQUFJLE9BQU9ELE1BQVAsS0FBa0IsV0FBbEIsSUFBaUMsQ0FBQ2IsVUFBVSxDQUFDYSxNQUFELENBQWhELEVBQTBEO0FBQ3pELFlBQU0sSUFBSWhCLFVBQUosQ0FBZSwyQkFBZixDQUFOO0FBQ0E7O0FBQ0RRLElBQUFBLElBQUksQ0FBQyxTQUFELENBQUosR0FBa0JRLE1BQWxCO0FBQ0E7O0FBRUQsTUFBSSxDQUFDbkIsR0FBRyxDQUFDVyxJQUFELEVBQU8sU0FBUCxDQUFILElBQXdCWCxHQUFHLENBQUNXLElBQUQsRUFBTyxTQUFQLENBQTVCLE1BQW1EWCxHQUFHLENBQUNXLElBQUQsRUFBTyxXQUFQLENBQUgsSUFBMEJYLEdBQUcsQ0FBQ1csSUFBRCxFQUFPLGNBQVAsQ0FBaEYsQ0FBSixFQUE2RztBQUM1RyxVQUFNLElBQUlSLFVBQUosQ0FBZSw4RkFBZixDQUFOO0FBQ0E7O0FBQ0QsU0FBT1EsSUFBUDtBQUNBLENBckNEIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaGFzID0gcmVxdWlyZSgnaGFzJyk7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCcuLi9HZXRJbnRyaW5zaWMnKTtcblxudmFyICRUeXBlRXJyb3IgPSBHZXRJbnRyaW5zaWMoJyVUeXBlRXJyb3IlJyk7XG5cbnZhciBUeXBlID0gcmVxdWlyZSgnLi9UeXBlJyk7XG52YXIgVG9Cb29sZWFuID0gcmVxdWlyZSgnLi9Ub0Jvb2xlYW4nKTtcbnZhciBJc0NhbGxhYmxlID0gcmVxdWlyZSgnLi9Jc0NhbGxhYmxlJyk7XG5cbi8vIGh0dHBzOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi81LjEvI3NlYy04LjEwLjVcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBUb1Byb3BlcnR5RGVzY3JpcHRvcihPYmopIHtcblx0aWYgKFR5cGUoT2JqKSAhPT0gJ09iamVjdCcpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignVG9Qcm9wZXJ0eURlc2NyaXB0b3IgcmVxdWlyZXMgYW4gb2JqZWN0Jyk7XG5cdH1cblxuXHR2YXIgZGVzYyA9IHt9O1xuXHRpZiAoaGFzKE9iaiwgJ2VudW1lcmFibGUnKSkge1xuXHRcdGRlc2NbJ1tbRW51bWVyYWJsZV1dJ10gPSBUb0Jvb2xlYW4oT2JqLmVudW1lcmFibGUpO1xuXHR9XG5cdGlmIChoYXMoT2JqLCAnY29uZmlndXJhYmxlJykpIHtcblx0XHRkZXNjWydbW0NvbmZpZ3VyYWJsZV1dJ10gPSBUb0Jvb2xlYW4oT2JqLmNvbmZpZ3VyYWJsZSk7XG5cdH1cblx0aWYgKGhhcyhPYmosICd2YWx1ZScpKSB7XG5cdFx0ZGVzY1snW1tWYWx1ZV1dJ10gPSBPYmoudmFsdWU7XG5cdH1cblx0aWYgKGhhcyhPYmosICd3cml0YWJsZScpKSB7XG5cdFx0ZGVzY1snW1tXcml0YWJsZV1dJ10gPSBUb0Jvb2xlYW4oT2JqLndyaXRhYmxlKTtcblx0fVxuXHRpZiAoaGFzKE9iaiwgJ2dldCcpKSB7XG5cdFx0dmFyIGdldHRlciA9IE9iai5nZXQ7XG5cdFx0aWYgKHR5cGVvZiBnZXR0ZXIgIT09ICd1bmRlZmluZWQnICYmICFJc0NhbGxhYmxlKGdldHRlcikpIHtcblx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ2dldHRlciBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcblx0XHR9XG5cdFx0ZGVzY1snW1tHZXRdXSddID0gZ2V0dGVyO1xuXHR9XG5cdGlmIChoYXMoT2JqLCAnc2V0JykpIHtcblx0XHR2YXIgc2V0dGVyID0gT2JqLnNldDtcblx0XHRpZiAodHlwZW9mIHNldHRlciAhPT0gJ3VuZGVmaW5lZCcgJiYgIUlzQ2FsbGFibGUoc2V0dGVyKSkge1xuXHRcdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ3NldHRlciBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcblx0XHR9XG5cdFx0ZGVzY1snW1tTZXRdXSddID0gc2V0dGVyO1xuXHR9XG5cblx0aWYgKChoYXMoZGVzYywgJ1tbR2V0XV0nKSB8fCBoYXMoZGVzYywgJ1tbU2V0XV0nKSkgJiYgKGhhcyhkZXNjLCAnW1tWYWx1ZV1dJykgfHwgaGFzKGRlc2MsICdbW1dyaXRhYmxlXV0nKSkpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignSW52YWxpZCBwcm9wZXJ0eSBkZXNjcmlwdG9yLiBDYW5ub3QgYm90aCBzcGVjaWZ5IGFjY2Vzc29ycyBhbmQgYSB2YWx1ZSBvciB3cml0YWJsZSBhdHRyaWJ1dGUnKTtcblx0fVxuXHRyZXR1cm4gZGVzYztcbn07XG4iXX0=