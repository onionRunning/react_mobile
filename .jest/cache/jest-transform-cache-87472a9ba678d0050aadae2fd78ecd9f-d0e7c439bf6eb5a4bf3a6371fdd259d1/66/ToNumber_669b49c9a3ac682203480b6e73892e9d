41a8351b4f34d440297509b0dc1da9e4
'use strict';

var GetIntrinsic = require('../GetIntrinsic');

var $TypeError = GetIntrinsic('%TypeError%');
var $Number = GetIntrinsic('%Number%');
var $RegExp = GetIntrinsic('%RegExp%');
var $parseInteger = GetIntrinsic('%parseInt%');

var callBound = require('../helpers/callBound');

var regexTester = require('../helpers/regexTester');

var isPrimitive = require('../helpers/isPrimitive');

var $strSlice = callBound('String.prototype.slice');
var isBinary = regexTester(/^0b[01]+$/i);
var isOctal = regexTester(/^0o[0-7]+$/i);
var isInvalidHexLiteral = regexTester(/^[-+]0x[0-9a-f]+$/i);
var nonWS = ['\u0085', '\u200b', '\ufffe'].join('');
var nonWSregex = new $RegExp('[' + nonWS + ']', 'g');
var hasNonWS = regexTester(nonWSregex); // whitespace from: https://es5.github.io/#x15.5.4.20
// implementation from https://github.com/es-shims/es5-shim/blob/v3.4.0/es5-shim.js#L1304-L1324

var ws = ['\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003', '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028', '\u2029\uFEFF'].join('');
var trimRegex = new RegExp('(^[' + ws + ']+)|([' + ws + ']+$)', 'g');
var $replace = callBound('String.prototype.replace');

var $trim = function (value) {
  return $replace(value, trimRegex, '');
};

var ToPrimitive = require('./ToPrimitive'); // https://www.ecma-international.org/ecma-262/6.0/#sec-tonumber


module.exports = function ToNumber(argument) {
  var value = isPrimitive(argument) ? argument : ToPrimitive(argument, $Number);

  if (typeof value === 'symbol') {
    throw new $TypeError('Cannot convert a Symbol value to a number');
  }

  if (typeof value === 'string') {
    if (isBinary(value)) {
      return ToNumber($parseInteger($strSlice(value, 2), 2));
    } else if (isOctal(value)) {
      return ToNumber($parseInteger($strSlice(value, 2), 8));
    } else if (hasNonWS(value) || isInvalidHexLiteral(value)) {
      return NaN;
    } else {
      var trimmed = $trim(value);

      if (trimmed !== value) {
        return ToNumber(trimmed);
      }
    }
  }

  return $Number(value);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlRvTnVtYmVyLmpzIl0sIm5hbWVzIjpbIkdldEludHJpbnNpYyIsInJlcXVpcmUiLCIkVHlwZUVycm9yIiwiJE51bWJlciIsIiRSZWdFeHAiLCIkcGFyc2VJbnRlZ2VyIiwiY2FsbEJvdW5kIiwicmVnZXhUZXN0ZXIiLCJpc1ByaW1pdGl2ZSIsIiRzdHJTbGljZSIsImlzQmluYXJ5IiwiaXNPY3RhbCIsImlzSW52YWxpZEhleExpdGVyYWwiLCJub25XUyIsImpvaW4iLCJub25XU3JlZ2V4IiwiaGFzTm9uV1MiLCJ3cyIsInRyaW1SZWdleCIsIlJlZ0V4cCIsIiRyZXBsYWNlIiwiJHRyaW0iLCJ2YWx1ZSIsIlRvUHJpbWl0aXZlIiwibW9kdWxlIiwiZXhwb3J0cyIsIlRvTnVtYmVyIiwiYXJndW1lbnQiLCJOYU4iLCJ0cmltbWVkIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFJQSxZQUFZLEdBQUdDLE9BQU8sQ0FBQyxpQkFBRCxDQUExQjs7QUFFQSxJQUFJQyxVQUFVLEdBQUdGLFlBQVksQ0FBQyxhQUFELENBQTdCO0FBQ0EsSUFBSUcsT0FBTyxHQUFHSCxZQUFZLENBQUMsVUFBRCxDQUExQjtBQUNBLElBQUlJLE9BQU8sR0FBR0osWUFBWSxDQUFDLFVBQUQsQ0FBMUI7QUFDQSxJQUFJSyxhQUFhLEdBQUdMLFlBQVksQ0FBQyxZQUFELENBQWhDOztBQUVBLElBQUlNLFNBQVMsR0FBR0wsT0FBTyxDQUFDLHNCQUFELENBQXZCOztBQUNBLElBQUlNLFdBQVcsR0FBR04sT0FBTyxDQUFDLHdCQUFELENBQXpCOztBQUNBLElBQUlPLFdBQVcsR0FBR1AsT0FBTyxDQUFDLHdCQUFELENBQXpCOztBQUVBLElBQUlRLFNBQVMsR0FBR0gsU0FBUyxDQUFDLHdCQUFELENBQXpCO0FBQ0EsSUFBSUksUUFBUSxHQUFHSCxXQUFXLENBQUMsWUFBRCxDQUExQjtBQUNBLElBQUlJLE9BQU8sR0FBR0osV0FBVyxDQUFDLGFBQUQsQ0FBekI7QUFDQSxJQUFJSyxtQkFBbUIsR0FBR0wsV0FBVyxDQUFDLG9CQUFELENBQXJDO0FBQ0EsSUFBSU0sS0FBSyxHQUFHLENBQUMsUUFBRCxFQUFXLFFBQVgsRUFBcUIsUUFBckIsRUFBK0JDLElBQS9CLENBQW9DLEVBQXBDLENBQVo7QUFDQSxJQUFJQyxVQUFVLEdBQUcsSUFBSVgsT0FBSixDQUFZLE1BQU1TLEtBQU4sR0FBYyxHQUExQixFQUErQixHQUEvQixDQUFqQjtBQUNBLElBQUlHLFFBQVEsR0FBR1QsV0FBVyxDQUFDUSxVQUFELENBQTFCLEMsQ0FFQTtBQUNBOztBQUNBLElBQUlFLEVBQUUsR0FBRyxDQUNSLGtFQURRLEVBRVIsb0VBRlEsRUFHUixjQUhRLEVBSVBILElBSk8sQ0FJRixFQUpFLENBQVQ7QUFLQSxJQUFJSSxTQUFTLEdBQUcsSUFBSUMsTUFBSixDQUFXLFFBQVFGLEVBQVIsR0FBYSxRQUFiLEdBQXdCQSxFQUF4QixHQUE2QixNQUF4QyxFQUFnRCxHQUFoRCxDQUFoQjtBQUNBLElBQUlHLFFBQVEsR0FBR2QsU0FBUyxDQUFDLDBCQUFELENBQXhCOztBQUNBLElBQUllLEtBQUssR0FBRyxVQUFVQyxLQUFWLEVBQWlCO0FBQzVCLFNBQU9GLFFBQVEsQ0FBQ0UsS0FBRCxFQUFRSixTQUFSLEVBQW1CLEVBQW5CLENBQWY7QUFDQSxDQUZEOztBQUlBLElBQUlLLFdBQVcsR0FBR3RCLE9BQU8sQ0FBQyxlQUFELENBQXpCLEMsQ0FFQTs7O0FBRUF1QixNQUFNLENBQUNDLE9BQVAsR0FBaUIsU0FBU0MsUUFBVCxDQUFrQkMsUUFBbEIsRUFBNEI7QUFDNUMsTUFBSUwsS0FBSyxHQUFHZCxXQUFXLENBQUNtQixRQUFELENBQVgsR0FBd0JBLFFBQXhCLEdBQW1DSixXQUFXLENBQUNJLFFBQUQsRUFBV3hCLE9BQVgsQ0FBMUQ7O0FBQ0EsTUFBSSxPQUFPbUIsS0FBUCxLQUFpQixRQUFyQixFQUErQjtBQUM5QixVQUFNLElBQUlwQixVQUFKLENBQWUsMkNBQWYsQ0FBTjtBQUNBOztBQUNELE1BQUksT0FBT29CLEtBQVAsS0FBaUIsUUFBckIsRUFBK0I7QUFDOUIsUUFBSVosUUFBUSxDQUFDWSxLQUFELENBQVosRUFBcUI7QUFDcEIsYUFBT0ksUUFBUSxDQUFDckIsYUFBYSxDQUFDSSxTQUFTLENBQUNhLEtBQUQsRUFBUSxDQUFSLENBQVYsRUFBc0IsQ0FBdEIsQ0FBZCxDQUFmO0FBQ0EsS0FGRCxNQUVPLElBQUlYLE9BQU8sQ0FBQ1csS0FBRCxDQUFYLEVBQW9CO0FBQzFCLGFBQU9JLFFBQVEsQ0FBQ3JCLGFBQWEsQ0FBQ0ksU0FBUyxDQUFDYSxLQUFELEVBQVEsQ0FBUixDQUFWLEVBQXNCLENBQXRCLENBQWQsQ0FBZjtBQUNBLEtBRk0sTUFFQSxJQUFJTixRQUFRLENBQUNNLEtBQUQsQ0FBUixJQUFtQlYsbUJBQW1CLENBQUNVLEtBQUQsQ0FBMUMsRUFBbUQ7QUFDekQsYUFBT00sR0FBUDtBQUNBLEtBRk0sTUFFQTtBQUNOLFVBQUlDLE9BQU8sR0FBR1IsS0FBSyxDQUFDQyxLQUFELENBQW5COztBQUNBLFVBQUlPLE9BQU8sS0FBS1AsS0FBaEIsRUFBdUI7QUFDdEIsZUFBT0ksUUFBUSxDQUFDRyxPQUFELENBQWY7QUFDQTtBQUNEO0FBQ0Q7O0FBQ0QsU0FBTzFCLE9BQU8sQ0FBQ21CLEtBQUQsQ0FBZDtBQUNBLENBcEJEIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnLi4vR2V0SW50cmluc2ljJyk7XG5cbnZhciAkVHlwZUVycm9yID0gR2V0SW50cmluc2ljKCclVHlwZUVycm9yJScpO1xudmFyICROdW1iZXIgPSBHZXRJbnRyaW5zaWMoJyVOdW1iZXIlJyk7XG52YXIgJFJlZ0V4cCA9IEdldEludHJpbnNpYygnJVJlZ0V4cCUnKTtcbnZhciAkcGFyc2VJbnRlZ2VyID0gR2V0SW50cmluc2ljKCclcGFyc2VJbnQlJyk7XG5cbnZhciBjYWxsQm91bmQgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2NhbGxCb3VuZCcpO1xudmFyIHJlZ2V4VGVzdGVyID0gcmVxdWlyZSgnLi4vaGVscGVycy9yZWdleFRlc3RlcicpO1xudmFyIGlzUHJpbWl0aXZlID0gcmVxdWlyZSgnLi4vaGVscGVycy9pc1ByaW1pdGl2ZScpO1xuXG52YXIgJHN0clNsaWNlID0gY2FsbEJvdW5kKCdTdHJpbmcucHJvdG90eXBlLnNsaWNlJyk7XG52YXIgaXNCaW5hcnkgPSByZWdleFRlc3RlcigvXjBiWzAxXSskL2kpO1xudmFyIGlzT2N0YWwgPSByZWdleFRlc3RlcigvXjBvWzAtN10rJC9pKTtcbnZhciBpc0ludmFsaWRIZXhMaXRlcmFsID0gcmVnZXhUZXN0ZXIoL15bLStdMHhbMC05YS1mXSskL2kpO1xudmFyIG5vbldTID0gWydcXHUwMDg1JywgJ1xcdTIwMGInLCAnXFx1ZmZmZSddLmpvaW4oJycpO1xudmFyIG5vbldTcmVnZXggPSBuZXcgJFJlZ0V4cCgnWycgKyBub25XUyArICddJywgJ2cnKTtcbnZhciBoYXNOb25XUyA9IHJlZ2V4VGVzdGVyKG5vbldTcmVnZXgpO1xuXG4vLyB3aGl0ZXNwYWNlIGZyb206IGh0dHBzOi8vZXM1LmdpdGh1Yi5pby8jeDE1LjUuNC4yMFxuLy8gaW1wbGVtZW50YXRpb24gZnJvbSBodHRwczovL2dpdGh1Yi5jb20vZXMtc2hpbXMvZXM1LXNoaW0vYmxvYi92My40LjAvZXM1LXNoaW0uanMjTDEzMDQtTDEzMjRcbnZhciB3cyA9IFtcblx0J1xceDA5XFx4MEFcXHgwQlxceDBDXFx4MERcXHgyMFxceEEwXFx1MTY4MFxcdTE4MEVcXHUyMDAwXFx1MjAwMVxcdTIwMDJcXHUyMDAzJyxcblx0J1xcdTIwMDRcXHUyMDA1XFx1MjAwNlxcdTIwMDdcXHUyMDA4XFx1MjAwOVxcdTIwMEFcXHUyMDJGXFx1MjA1RlxcdTMwMDBcXHUyMDI4Jyxcblx0J1xcdTIwMjlcXHVGRUZGJ1xuXS5qb2luKCcnKTtcbnZhciB0cmltUmVnZXggPSBuZXcgUmVnRXhwKCcoXlsnICsgd3MgKyAnXSspfChbJyArIHdzICsgJ10rJCknLCAnZycpO1xudmFyICRyZXBsYWNlID0gY2FsbEJvdW5kKCdTdHJpbmcucHJvdG90eXBlLnJlcGxhY2UnKTtcbnZhciAkdHJpbSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuXHRyZXR1cm4gJHJlcGxhY2UodmFsdWUsIHRyaW1SZWdleCwgJycpO1xufTtcblxudmFyIFRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9Ub1ByaW1pdGl2ZScpO1xuXG4vLyBodHRwczovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLXRvbnVtYmVyXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gVG9OdW1iZXIoYXJndW1lbnQpIHtcblx0dmFyIHZhbHVlID0gaXNQcmltaXRpdmUoYXJndW1lbnQpID8gYXJndW1lbnQgOiBUb1ByaW1pdGl2ZShhcmd1bWVudCwgJE51bWJlcik7XG5cdGlmICh0eXBlb2YgdmFsdWUgPT09ICdzeW1ib2wnKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0Nhbm5vdCBjb252ZXJ0IGEgU3ltYm9sIHZhbHVlIHRvIGEgbnVtYmVyJyk7XG5cdH1cblx0aWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcblx0XHRpZiAoaXNCaW5hcnkodmFsdWUpKSB7XG5cdFx0XHRyZXR1cm4gVG9OdW1iZXIoJHBhcnNlSW50ZWdlcigkc3RyU2xpY2UodmFsdWUsIDIpLCAyKSk7XG5cdFx0fSBlbHNlIGlmIChpc09jdGFsKHZhbHVlKSkge1xuXHRcdFx0cmV0dXJuIFRvTnVtYmVyKCRwYXJzZUludGVnZXIoJHN0clNsaWNlKHZhbHVlLCAyKSwgOCkpO1xuXHRcdH0gZWxzZSBpZiAoaGFzTm9uV1ModmFsdWUpIHx8IGlzSW52YWxpZEhleExpdGVyYWwodmFsdWUpKSB7XG5cdFx0XHRyZXR1cm4gTmFOO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR2YXIgdHJpbW1lZCA9ICR0cmltKHZhbHVlKTtcblx0XHRcdGlmICh0cmltbWVkICE9PSB2YWx1ZSkge1xuXHRcdFx0XHRyZXR1cm4gVG9OdW1iZXIodHJpbW1lZCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdHJldHVybiAkTnVtYmVyKHZhbHVlKTtcbn07XG4iXX0=