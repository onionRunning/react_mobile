12d86899b75a50da73e0de053274b51a
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
}); // @flow

/*:: import type {
  CombinatorTokenType,
  SelectorTokenType
} from './types';*/

var escapeValue = function escapeValue(value
/*: string*/
)
/*: string*/
{
  return JSON.stringify(value);
};

var renderSelector = function renderSelector(selectorToken
/*: SelectorTokenType*/
) {
  var tokens = selectorToken.body;
  var parts = [];
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = tokens[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var token = _step.value;
      var part = void 0;

      if (token.type === 'universalSelector') {
        part = '*';
      } else if (token.type === 'typeSelector') {
        part = token.name;
      } else if (token.type === 'idSelector') {
        part = '#' + token.name;
      } else if (token.type === 'classSelector') {
        part = '.' + token.name;
      } else if (token.type === 'attributePresenceSelector') {
        part = '[' + token.name + ']';
      } else if (token.type === 'attributeValueSelector') {
        part = '[' + token.name + token.operator + escapeValue(token.value) + ']';
      } else if (token.type === 'pseudoClassSelector') {
        part = ':' + token.name;

        if (token.parameters.length) {
          part += '(' + token.parameters.map(escapeValue).join(', ') + ')';
        }
      } else if (token.type === 'pseudoElementSelector') {
        part = '::' + token.name;
      } else {
        throw new Error('Unknown token.');
      }

      parts.push(part);
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return parts.join('');
};

exports.default = function () {
  var generate = function generate(tokens
  /*: Array<SelectorTokenType | CombinatorTokenType>*/
  )
  /*: string*/
  {
    /**
     * @todo Think of a better name. This array contains selectors or combinators.
     */
    var sequences
    /*: Array<string>*/
    = [];
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = tokens[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        var token = _step2.value;

        if (token.type === 'selector') {
          sequences.push(renderSelector(token));
        } else if (token.type === 'descendantCombinator') {
          sequences.push(' ');
        } else if (token.type === 'childCombinator') {
          sequences.push(' > ');
        } else if (token.type === 'adjacentSiblingCombinator') {
          sequences.push(' + ');
        } else if (token.type === 'generalSiblingCombinator') {
          sequences.push(' ~ ');
        } else {
          throw new Error('Unknown token.');
        }
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2.return) {
          _iterator2.return();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }

    return sequences.join('');
  };

  return {
    generate: generate
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jcmVhdGVHZW5lcmF0b3IuanMiXSwibmFtZXMiOlsiZXNjYXBlVmFsdWUiLCJKU09OIiwicmVuZGVyU2VsZWN0b3IiLCJ0b2tlbnMiLCJzZWxlY3RvclRva2VuIiwicGFydHMiLCJ0b2tlbiIsInBhcnQiLCJnZW5lcmF0ZSIsInNlcXVlbmNlcyJdLCJtYXBwaW5ncyI6Ijs7OztJQUFBOzs7Ozs7O0FBT0EsSUFBTUEsV0FBQUEsR0FBYyxTQUFkQSxXQUFjLENBQUE7QUFBQTtBQUFBO0FBQUE7QUFBMkI7QUFDN0MsU0FBT0MsSUFBQUEsQ0FBQUEsU0FBQUEsQ0FBUCxLQUFPQSxDQUFQO0FBREYsQ0FBQTs7QUFJQSxJQUFNQyxjQUFBQSxHQUFpQixTQUFqQkEsY0FBaUIsQ0FBQTtBQUFBO0FBQUEsRUFBc0M7QUFDM0QsTUFBTUMsTUFBQUEsR0FBU0MsYUFBQUEsQ0FBZixJQUFBO0FBQ0EsTUFBTUMsS0FBQUEsR0FBTixFQUFBO0FBRjJELE1BQUEseUJBQUEsR0FBQSxJQUFBO0FBQUEsTUFBQSxpQkFBQSxHQUFBLEtBQUE7QUFBQSxNQUFBLGNBQUEsR0FBQSxTQUFBOztBQUFBLE1BQUE7QUFJM0QsU0FBQSxJQUFBLFNBQUEsR0FBb0JGLE1BQXBCLENBQUEsTUFBQSxDQUFBLFFBQUEsQ0FBb0JBLEVBQXBCLEVBQUEsS0FBQSxFQUFBLEVBQUEseUJBQUEsR0FBQSxDQUFBLEtBQUEsR0FBQSxTQUFBLENBQUEsSUFBQSxFQUFBLEVBQUEsSUFBQSxDQUFBLEVBQUEseUJBQUEsR0FBQSxJQUFBLEVBQTRCO0FBQUEsVUFBakJHLEtBQWlCLEdBQUEsS0FBQSxDQUFBLEtBQUE7QUFDMUIsVUFBSUMsSUFBQUEsR0FBQUEsS0FBSixDQUFBOztBQUVBLFVBQUlELEtBQUFBLENBQUFBLElBQUFBLEtBQUosbUJBQUEsRUFBd0M7QUFDdENDLFFBQUFBLElBQUFBLEdBQUFBLEdBQUFBO0FBREYsT0FBQSxNQUVPLElBQUlELEtBQUFBLENBQUFBLElBQUFBLEtBQUosY0FBQSxFQUFtQztBQUN4Q0MsUUFBQUEsSUFBQUEsR0FBT0QsS0FBQUEsQ0FBUEMsSUFBQUE7QUFESyxPQUFBLE1BRUEsSUFBSUQsS0FBQUEsQ0FBQUEsSUFBQUEsS0FBSixZQUFBLEVBQWlDO0FBQ3RDQyxRQUFBQSxJQUFBQSxHQUFPLE1BQU1ELEtBQUFBLENBQWJDLElBQUFBO0FBREssT0FBQSxNQUVBLElBQUlELEtBQUFBLENBQUFBLElBQUFBLEtBQUosZUFBQSxFQUFvQztBQUN6Q0MsUUFBQUEsSUFBQUEsR0FBTyxNQUFNRCxLQUFBQSxDQUFiQyxJQUFBQTtBQURLLE9BQUEsTUFFQSxJQUFJRCxLQUFBQSxDQUFBQSxJQUFBQSxLQUFKLDJCQUFBLEVBQWdEO0FBQ3JEQyxRQUFBQSxJQUFBQSxHQUFPLE1BQU1ELEtBQUFBLENBQU4sSUFBQSxHQUFQQyxHQUFBQTtBQURLLE9BQUEsTUFFQSxJQUFJRCxLQUFBQSxDQUFBQSxJQUFBQSxLQUFKLHdCQUFBLEVBQTZDO0FBQ2xEQyxRQUFBQSxJQUFBQSxHQUFPLE1BQU1ELEtBQUFBLENBQU4sSUFBQSxHQUFtQkEsS0FBQUEsQ0FBbkIsUUFBQSxHQUFvQ04sV0FBQUEsQ0FBWU0sS0FBQUEsQ0FBaEQsS0FBb0NOLENBQXBDLEdBQVBPLEdBQUFBO0FBREssT0FBQSxNQUVBLElBQUlELEtBQUFBLENBQUFBLElBQUFBLEtBQUoscUJBQUEsRUFBMEM7QUFDL0NDLFFBQUFBLElBQUFBLEdBQU8sTUFBTUQsS0FBQUEsQ0FBYkMsSUFBQUE7O0FBRUEsWUFBSUQsS0FBQUEsQ0FBQUEsVUFBQUEsQ0FBSixNQUFBLEVBQTZCO0FBQzNCQyxVQUFBQSxJQUFBQSxJQUFRLE1BQU1ELEtBQUFBLENBQUFBLFVBQUFBLENBQUFBLEdBQUFBLENBQUFBLFdBQUFBLEVBQUFBLElBQUFBLENBQU4sSUFBTUEsQ0FBTixHQUFSQyxHQUFBQTtBQUNEO0FBTEksT0FBQSxNQU1BLElBQUlELEtBQUFBLENBQUFBLElBQUFBLEtBQUosdUJBQUEsRUFBNEM7QUFDakRDLFFBQUFBLElBQUFBLEdBQU8sT0FBT0QsS0FBQUEsQ0FBZEMsSUFBQUE7QUFESyxPQUFBLE1BRUE7QUFDTCxjQUFNLElBQUEsS0FBQSxDQUFOLGdCQUFNLENBQU47QUFDRDs7QUFFREYsTUFBQUEsS0FBQUEsQ0FBQUEsSUFBQUEsQ0FBQUEsSUFBQUE7QUFDRDtBQWhDMEQsR0FBQSxDQUFBLE9BQUEsR0FBQSxFQUFBO0FBQUEsSUFBQSxpQkFBQSxHQUFBLElBQUE7QUFBQSxJQUFBLGNBQUEsR0FBQSxHQUFBO0FBQUEsR0FBQSxTQUFBO0FBQUEsUUFBQTtBQUFBLFVBQUEsQ0FBQSx5QkFBQSxJQUFBLFNBQUEsQ0FBQSxNQUFBLEVBQUE7QUFBQSxRQUFBLFNBQUEsQ0FBQSxNQUFBO0FBQUE7QUFBQSxLQUFBLFNBQUE7QUFBQSxVQUFBLGlCQUFBLEVBQUE7QUFBQSxjQUFBLGNBQUE7QUFBQTtBQUFBO0FBQUE7O0FBa0MzRCxTQUFPQSxLQUFBQSxDQUFBQSxJQUFBQSxDQUFQLEVBQU9BLENBQVA7QUFsQ0YsQ0FBQTs7a0JBcUNlLFlBQU07QUFDbkIsTUFBTUcsUUFBQUEsR0FBVyxTQUFYQSxRQUFXLENBQUE7QUFBQTtBQUFBO0FBQUE7QUFBb0U7QUFDbkY7OztBQUdBLFFBQU1DO0FBQUFBO0FBQUFBLE1BQU4sRUFBQTtBQUptRixRQUFBLDBCQUFBLEdBQUEsSUFBQTtBQUFBLFFBQUEsa0JBQUEsR0FBQSxLQUFBO0FBQUEsUUFBQSxlQUFBLEdBQUEsU0FBQTs7QUFBQSxRQUFBO0FBTW5GLFdBQUEsSUFBQSxVQUFBLEdBQW9CTixNQUFwQixDQUFBLE1BQUEsQ0FBQSxRQUFBLENBQW9CQSxFQUFwQixFQUFBLE1BQUEsRUFBQSxFQUFBLDBCQUFBLEdBQUEsQ0FBQSxNQUFBLEdBQUEsVUFBQSxDQUFBLElBQUEsRUFBQSxFQUFBLElBQUEsQ0FBQSxFQUFBLDBCQUFBLEdBQUEsSUFBQSxFQUE0QjtBQUFBLFlBQWpCRyxLQUFpQixHQUFBLE1BQUEsQ0FBQSxLQUFBOztBQUMxQixZQUFJQSxLQUFBQSxDQUFBQSxJQUFBQSxLQUFKLFVBQUEsRUFBK0I7QUFDN0JHLFVBQUFBLFNBQUFBLENBQUFBLElBQUFBLENBQWVQLGNBQUFBLENBQWZPLEtBQWVQLENBQWZPO0FBREYsU0FBQSxNQUVPLElBQUlILEtBQUFBLENBQUFBLElBQUFBLEtBQUosc0JBQUEsRUFBMkM7QUFDaERHLFVBQUFBLFNBQUFBLENBQUFBLElBQUFBLENBQUFBLEdBQUFBO0FBREssU0FBQSxNQUVBLElBQUlILEtBQUFBLENBQUFBLElBQUFBLEtBQUosaUJBQUEsRUFBc0M7QUFDM0NHLFVBQUFBLFNBQUFBLENBQUFBLElBQUFBLENBQUFBLEtBQUFBO0FBREssU0FBQSxNQUVBLElBQUlILEtBQUFBLENBQUFBLElBQUFBLEtBQUosMkJBQUEsRUFBZ0Q7QUFDckRHLFVBQUFBLFNBQUFBLENBQUFBLElBQUFBLENBQUFBLEtBQUFBO0FBREssU0FBQSxNQUVBLElBQUlILEtBQUFBLENBQUFBLElBQUFBLEtBQUosMEJBQUEsRUFBK0M7QUFDcERHLFVBQUFBLFNBQUFBLENBQUFBLElBQUFBLENBQUFBLEtBQUFBO0FBREssU0FBQSxNQUVBO0FBQ0wsZ0JBQU0sSUFBQSxLQUFBLENBQU4sZ0JBQU0sQ0FBTjtBQUNEO0FBQ0Y7QUFwQmtGLEtBQUEsQ0FBQSxPQUFBLEdBQUEsRUFBQTtBQUFBLE1BQUEsa0JBQUEsR0FBQSxJQUFBO0FBQUEsTUFBQSxlQUFBLEdBQUEsR0FBQTtBQUFBLEtBQUEsU0FBQTtBQUFBLFVBQUE7QUFBQSxZQUFBLENBQUEsMEJBQUEsSUFBQSxVQUFBLENBQUEsTUFBQSxFQUFBO0FBQUEsVUFBQSxVQUFBLENBQUEsTUFBQTtBQUFBO0FBQUEsT0FBQSxTQUFBO0FBQUEsWUFBQSxrQkFBQSxFQUFBO0FBQUEsZ0JBQUEsZUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFzQm5GLFdBQU9BLFNBQUFBLENBQUFBLElBQUFBLENBQVAsRUFBT0EsQ0FBUDtBQXRCRixHQUFBOztBQXlCQSxTQUFPO0FBQ0xELElBQUFBLFFBQUFBLEVBQUFBO0FBREssR0FBUCIsInNvdXJjZXNDb250ZW50IjpbIi8vIEBmbG93XG5cbmltcG9ydCB0eXBlIHtcbiAgQ29tYmluYXRvclRva2VuVHlwZSxcbiAgU2VsZWN0b3JUb2tlblR5cGVcbn0gZnJvbSAnLi90eXBlcyc7XG5cbmNvbnN0IGVzY2FwZVZhbHVlID0gKHZhbHVlOiBzdHJpbmcpOiBzdHJpbmcgPT4ge1xuICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xufTtcblxuY29uc3QgcmVuZGVyU2VsZWN0b3IgPSAoc2VsZWN0b3JUb2tlbjogU2VsZWN0b3JUb2tlblR5cGUpID0+IHtcbiAgY29uc3QgdG9rZW5zID0gc2VsZWN0b3JUb2tlbi5ib2R5O1xuICBjb25zdCBwYXJ0cyA9IFtdO1xuXG4gIGZvciAoY29uc3QgdG9rZW4gb2YgdG9rZW5zKSB7XG4gICAgbGV0IHBhcnQ7XG5cbiAgICBpZiAodG9rZW4udHlwZSA9PT0gJ3VuaXZlcnNhbFNlbGVjdG9yJykge1xuICAgICAgcGFydCA9ICcqJztcbiAgICB9IGVsc2UgaWYgKHRva2VuLnR5cGUgPT09ICd0eXBlU2VsZWN0b3InKSB7XG4gICAgICBwYXJ0ID0gdG9rZW4ubmFtZTtcbiAgICB9IGVsc2UgaWYgKHRva2VuLnR5cGUgPT09ICdpZFNlbGVjdG9yJykge1xuICAgICAgcGFydCA9ICcjJyArIHRva2VuLm5hbWU7XG4gICAgfSBlbHNlIGlmICh0b2tlbi50eXBlID09PSAnY2xhc3NTZWxlY3RvcicpIHtcbiAgICAgIHBhcnQgPSAnLicgKyB0b2tlbi5uYW1lO1xuICAgIH0gZWxzZSBpZiAodG9rZW4udHlwZSA9PT0gJ2F0dHJpYnV0ZVByZXNlbmNlU2VsZWN0b3InKSB7XG4gICAgICBwYXJ0ID0gJ1snICsgdG9rZW4ubmFtZSArICddJztcbiAgICB9IGVsc2UgaWYgKHRva2VuLnR5cGUgPT09ICdhdHRyaWJ1dGVWYWx1ZVNlbGVjdG9yJykge1xuICAgICAgcGFydCA9ICdbJyArIHRva2VuLm5hbWUgKyB0b2tlbi5vcGVyYXRvciArIGVzY2FwZVZhbHVlKHRva2VuLnZhbHVlKSArICddJztcbiAgICB9IGVsc2UgaWYgKHRva2VuLnR5cGUgPT09ICdwc2V1ZG9DbGFzc1NlbGVjdG9yJykge1xuICAgICAgcGFydCA9ICc6JyArIHRva2VuLm5hbWU7XG5cbiAgICAgIGlmICh0b2tlbi5wYXJhbWV0ZXJzLmxlbmd0aCkge1xuICAgICAgICBwYXJ0ICs9ICcoJyArIHRva2VuLnBhcmFtZXRlcnMubWFwKGVzY2FwZVZhbHVlKS5qb2luKCcsICcpICsgJyknO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodG9rZW4udHlwZSA9PT0gJ3BzZXVkb0VsZW1lbnRTZWxlY3RvcicpIHtcbiAgICAgIHBhcnQgPSAnOjonICsgdG9rZW4ubmFtZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIHRva2VuLicpO1xuICAgIH1cblxuICAgIHBhcnRzLnB1c2gocGFydCk7XG4gIH1cblxuICByZXR1cm4gcGFydHMuam9pbignJyk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCAoKSA9PiB7XG4gIGNvbnN0IGdlbmVyYXRlID0gKHRva2VuczogQXJyYXk8U2VsZWN0b3JUb2tlblR5cGUgfCBDb21iaW5hdG9yVG9rZW5UeXBlPik6IHN0cmluZyA9PiB7XG4gICAgLyoqXG4gICAgICogQHRvZG8gVGhpbmsgb2YgYSBiZXR0ZXIgbmFtZS4gVGhpcyBhcnJheSBjb250YWlucyBzZWxlY3RvcnMgb3IgY29tYmluYXRvcnMuXG4gICAgICovXG4gICAgY29uc3Qgc2VxdWVuY2VzOiBBcnJheTxzdHJpbmc+ID0gW107XG5cbiAgICBmb3IgKGNvbnN0IHRva2VuIG9mIHRva2Vucykge1xuICAgICAgaWYgKHRva2VuLnR5cGUgPT09ICdzZWxlY3RvcicpIHtcbiAgICAgICAgc2VxdWVuY2VzLnB1c2gocmVuZGVyU2VsZWN0b3IodG9rZW4pKTtcbiAgICAgIH0gZWxzZSBpZiAodG9rZW4udHlwZSA9PT0gJ2Rlc2NlbmRhbnRDb21iaW5hdG9yJykge1xuICAgICAgICBzZXF1ZW5jZXMucHVzaCgnICcpO1xuICAgICAgfSBlbHNlIGlmICh0b2tlbi50eXBlID09PSAnY2hpbGRDb21iaW5hdG9yJykge1xuICAgICAgICBzZXF1ZW5jZXMucHVzaCgnID4gJyk7XG4gICAgICB9IGVsc2UgaWYgKHRva2VuLnR5cGUgPT09ICdhZGphY2VudFNpYmxpbmdDb21iaW5hdG9yJykge1xuICAgICAgICBzZXF1ZW5jZXMucHVzaCgnICsgJyk7XG4gICAgICB9IGVsc2UgaWYgKHRva2VuLnR5cGUgPT09ICdnZW5lcmFsU2libGluZ0NvbWJpbmF0b3InKSB7XG4gICAgICAgIHNlcXVlbmNlcy5wdXNoKCcgfiAnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biB0b2tlbi4nKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc2VxdWVuY2VzLmpvaW4oJycpO1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgZ2VuZXJhdGVcbiAgfTtcbn07XG4iXX0=