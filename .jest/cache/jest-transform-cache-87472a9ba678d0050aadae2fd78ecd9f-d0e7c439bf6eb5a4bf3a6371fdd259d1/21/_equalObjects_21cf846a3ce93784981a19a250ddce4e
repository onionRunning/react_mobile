33d4620b66c4ff9358fd8edec6a75626
var getAllKeys = require('./_getAllKeys');
/** Used to compose bitmasks for value comparisons. */


var COMPARE_PARTIAL_FLAG = 1;
/** Used for built-in method references. */

var objectProto = Object.prototype;
/** Used to check objects for own properties. */

var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * A specialized version of `baseIsEqualDeep` for objects with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */

function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
      objProps = getAllKeys(object),
      objLength = objProps.length,
      othProps = getAllKeys(other),
      othLength = othProps.length;

  if (objLength != othLength && !isPartial) {
    return false;
  }

  var index = objLength;

  while (index--) {
    var key = objProps[index];

    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
      return false;
    }
  } // Assume cyclic values are equal.


  var stacked = stack.get(object);

  if (stacked && stack.get(other)) {
    return stacked == other;
  }

  var result = true;
  stack.set(object, other);
  stack.set(other, object);
  var skipCtor = isPartial;

  while (++index < objLength) {
    key = objProps[index];
    var objValue = object[key],
        othValue = other[key];

    if (customizer) {
      var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
    } // Recursively compare objects (susceptible to call stack limits).


    if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
      result = false;
      break;
    }

    skipCtor || (skipCtor = key == 'constructor');
  }

  if (result && !skipCtor) {
    var objCtor = object.constructor,
        othCtor = other.constructor; // Non `Object` object instances with different constructors are not equal.

    if (objCtor != othCtor && 'constructor' in object && 'constructor' in other && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) {
      result = false;
    }
  }

  stack['delete'](object);
  stack['delete'](other);
  return result;
}

module.exports = equalObjects;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIl9lcXVhbE9iamVjdHMuanMiXSwibmFtZXMiOlsiZ2V0QWxsS2V5cyIsInJlcXVpcmUiLCJDT01QQVJFX1BBUlRJQUxfRkxBRyIsIm9iamVjdFByb3RvIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJlcXVhbE9iamVjdHMiLCJvYmplY3QiLCJvdGhlciIsImJpdG1hc2siLCJjdXN0b21pemVyIiwiZXF1YWxGdW5jIiwic3RhY2siLCJpc1BhcnRpYWwiLCJvYmpQcm9wcyIsIm9iakxlbmd0aCIsImxlbmd0aCIsIm90aFByb3BzIiwib3RoTGVuZ3RoIiwiaW5kZXgiLCJrZXkiLCJjYWxsIiwic3RhY2tlZCIsImdldCIsInJlc3VsdCIsInNldCIsInNraXBDdG9yIiwib2JqVmFsdWUiLCJvdGhWYWx1ZSIsImNvbXBhcmVkIiwidW5kZWZpbmVkIiwib2JqQ3RvciIsImNvbnN0cnVjdG9yIiwib3RoQ3RvciIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBLElBQUlBLFVBQVUsR0FBR0MsT0FBTyxDQUFDLGVBQUQsQ0FBeEI7QUFFQTs7O0FBQ0EsSUFBSUMsb0JBQW9CLEdBQUcsQ0FBM0I7QUFFQTs7QUFDQSxJQUFJQyxXQUFXLEdBQUdDLE1BQU0sQ0FBQ0MsU0FBekI7QUFFQTs7QUFDQSxJQUFJQyxjQUFjLEdBQUdILFdBQVcsQ0FBQ0csY0FBakM7QUFFQTs7Ozs7Ozs7Ozs7Ozs7QUFhQSxTQUFTQyxZQUFULENBQXNCQyxNQUF0QixFQUE4QkMsS0FBOUIsRUFBcUNDLE9BQXJDLEVBQThDQyxVQUE5QyxFQUEwREMsU0FBMUQsRUFBcUVDLEtBQXJFLEVBQTRFO0FBQzFFLE1BQUlDLFNBQVMsR0FBR0osT0FBTyxHQUFHUixvQkFBMUI7QUFBQSxNQUNJYSxRQUFRLEdBQUdmLFVBQVUsQ0FBQ1EsTUFBRCxDQUR6QjtBQUFBLE1BRUlRLFNBQVMsR0FBR0QsUUFBUSxDQUFDRSxNQUZ6QjtBQUFBLE1BR0lDLFFBQVEsR0FBR2xC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RUFBQUEsS0FBSyxDQUFDLFFBQUQsQ0FBTCxDQUFnQkosS0FBaEI7QUFDQSxTQUFPZ0IsTUFBUDtBQUNEOztBQUVEVSxNQUFNLENBQUNDLE9BQVAsR0FBaUI3QixZQUFqQiIsInNvdXJjZXNDb250ZW50IjpbInZhciBnZXRBbGxLZXlzID0gcmVxdWlyZSgnLi9fZ2V0QWxsS2V5cycpO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciB2YWx1ZSBjb21wYXJpc29ucy4gKi9cbnZhciBDT01QQVJFX1BBUlRJQUxfRkxBRyA9IDE7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbERlZXBgIGZvciBvYmplY3RzIHdpdGggc3VwcG9ydCBmb3JcbiAqIHBhcnRpYWwgZGVlcCBjb21wYXJpc29ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge09iamVjdH0gb3RoZXIgVGhlIG90aGVyIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gKiBAcGFyYW0ge09iamVjdH0gc3RhY2sgVHJhY2tzIHRyYXZlcnNlZCBgb2JqZWN0YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBvYmplY3RzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGVxdWFsT2JqZWN0cyhvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gIHZhciBpc1BhcnRpYWwgPSBiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUcsXG4gICAgICBvYmpQcm9wcyA9IGdldEFsbEtleXMob2JqZWN0KSxcbiAgICAgIG9iakxlbmd0aCA9IG9ialByb3BzLmxlbmd0aCxcbiAgICAgIG90aFByb3BzID0gZ2V0QWxsS2V5cyhvdGhlciksXG4gICAgICBvdGhMZW5ndGggPSBvdGhQcm9wcy5sZW5ndGg7XG5cbiAgaWYgKG9iakxlbmd0aCAhPSBvdGhMZW5ndGggJiYgIWlzUGFydGlhbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgaW5kZXggPSBvYmpMZW5ndGg7XG4gIHdoaWxlIChpbmRleC0tKSB7XG4gICAgdmFyIGtleSA9IG9ialByb3BzW2luZGV4XTtcbiAgICBpZiAoIShpc1BhcnRpYWwgPyBrZXkgaW4gb3RoZXIgOiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG90aGVyLCBrZXkpKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICAvLyBBc3N1bWUgY3ljbGljIHZhbHVlcyBhcmUgZXF1YWwuXG4gIHZhciBzdGFja2VkID0gc3RhY2suZ2V0KG9iamVjdCk7XG4gIGlmIChzdGFja2VkICYmIHN0YWNrLmdldChvdGhlcikpIHtcbiAgICByZXR1cm4gc3RhY2tlZCA9PSBvdGhlcjtcbiAgfVxuICB2YXIgcmVzdWx0ID0gdHJ1ZTtcbiAgc3RhY2suc2V0KG9iamVjdCwgb3RoZXIpO1xuICBzdGFjay5zZXQob3RoZXIsIG9iamVjdCk7XG5cbiAgdmFyIHNraXBDdG9yID0gaXNQYXJ0aWFsO1xuICB3aGlsZSAoKytpbmRleCA8IG9iakxlbmd0aCkge1xuICAgIGtleSA9IG9ialByb3BzW2luZGV4XTtcbiAgICB2YXIgb2JqVmFsdWUgPSBvYmplY3Rba2V5XSxcbiAgICAgICAgb3RoVmFsdWUgPSBvdGhlcltrZXldO1xuXG4gICAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICAgIHZhciBjb21wYXJlZCA9IGlzUGFydGlhbFxuICAgICAgICA/IGN1c3RvbWl6ZXIob3RoVmFsdWUsIG9ialZhbHVlLCBrZXksIG90aGVyLCBvYmplY3QsIHN0YWNrKVxuICAgICAgICA6IGN1c3RvbWl6ZXIob2JqVmFsdWUsIG90aFZhbHVlLCBrZXksIG9iamVjdCwgb3RoZXIsIHN0YWNrKTtcbiAgICB9XG4gICAgLy8gUmVjdXJzaXZlbHkgY29tcGFyZSBvYmplY3RzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgaWYgKCEoY29tcGFyZWQgPT09IHVuZGVmaW5lZFxuICAgICAgICAgID8gKG9ialZhbHVlID09PSBvdGhWYWx1ZSB8fCBlcXVhbEZ1bmMob2JqVmFsdWUsIG90aFZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaykpXG4gICAgICAgICAgOiBjb21wYXJlZFxuICAgICAgICApKSB7XG4gICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBza2lwQ3RvciB8fCAoc2tpcEN0b3IgPSBrZXkgPT0gJ2NvbnN0cnVjdG9yJyk7XG4gIH1cbiAgaWYgKHJlc3VsdCAmJiAhc2tpcEN0b3IpIHtcbiAgICB2YXIgb2JqQ3RvciA9IG9iamVjdC5jb25zdHJ1Y3RvcixcbiAgICAgICAgb3RoQ3RvciA9IG90aGVyLmNvbnN0cnVjdG9yO1xuXG4gICAgLy8gTm9uIGBPYmplY3RgIG9iamVjdCBpbnN0YW5jZXMgd2l0aCBkaWZmZXJlbnQgY29uc3RydWN0b3JzIGFyZSBub3QgZXF1YWwuXG4gICAgaWYgKG9iakN0b3IgIT0gb3RoQ3RvciAmJlxuICAgICAgICAoJ2NvbnN0cnVjdG9yJyBpbiBvYmplY3QgJiYgJ2NvbnN0cnVjdG9yJyBpbiBvdGhlcikgJiZcbiAgICAgICAgISh0eXBlb2Ygb2JqQ3RvciA9PSAnZnVuY3Rpb24nICYmIG9iakN0b3IgaW5zdGFuY2VvZiBvYmpDdG9yICYmXG4gICAgICAgICAgdHlwZW9mIG90aEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBvdGhDdG9yIGluc3RhbmNlb2Ygb3RoQ3RvcikpIHtcbiAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgIH1cbiAgfVxuICBzdGFja1snZGVsZXRlJ10ob2JqZWN0KTtcbiAgc3RhY2tbJ2RlbGV0ZSddKG90aGVyKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlcXVhbE9iamVjdHM7XG4iXX0=