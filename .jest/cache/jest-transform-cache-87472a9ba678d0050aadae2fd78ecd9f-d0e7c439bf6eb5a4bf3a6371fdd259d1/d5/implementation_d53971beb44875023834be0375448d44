58c747f96fb09508131e3251fc8dc25b
'use strict';

var ToObject = require('es-abstract/2019/ToObject');

var ToLength = require('es-abstract/2019/ToLength');

var IsCallable = require('es-abstract/2019/IsCallable');

module.exports = function find(predicate) {
  var list = ToObject(this);
  var length = ToLength(list.length);

  if (!IsCallable(predicate)) {
    throw new TypeError('Array#find: predicate must be a function');
  }

  if (length === 0) {
    return void 0;
  }

  var thisArg;

  if (arguments.length > 0) {
    thisArg = arguments[1];
  }

  for (var i = 0, value; i < length; i++) {
    value = list[i]; // inlined for performance: if (Call(predicate, thisArg, [value, i, list])) {

    if (predicate.apply(thisArg, [value, i, list])) {
      return value;
    }
  }

  return void 0;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImltcGxlbWVudGF0aW9uLmpzIl0sIm5hbWVzIjpbIlRvT2JqZWN0IiwicmVxdWlyZSIsIlRvTGVuZ3RoIiwiSXNDYWxsYWJsZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJmaW5kIiwicHJlZGljYXRlIiwibGlzdCIsImxlbmd0aCIsIlR5cGVFcnJvciIsInRoaXNBcmciLCJhcmd1bWVudHMiLCJpIiwidmFsdWUiLCJhcHBseSJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBSUEsUUFBUSxHQUFHQyxPQUFPLENBQUMsMkJBQUQsQ0FBdEI7O0FBQ0EsSUFBSUMsUUFBUSxHQUFHRCxPQUFPLENBQUMsMkJBQUQsQ0FBdEI7O0FBQ0EsSUFBSUUsVUFBVSxHQUFHRixPQUFPLENBQUMsNkJBQUQsQ0FBeEI7O0FBRUFHLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixTQUFTQyxJQUFULENBQWNDLFNBQWQsRUFBeUI7QUFDekMsTUFBSUMsSUFBSSxHQUFHUixRQUFRLENBQUMsSUFBRCxDQUFuQjtBQUNBLE1BQUlTLE1BQU0sR0FBR1AsUUFBUSxDQUFDTSxJQUFJLENBQUNDLE1BQU4sQ0FBckI7O0FBQ0EsTUFBSSxDQUFDTixVQUFVLENBQUNJLFNBQUQsQ0FBZixFQUE0QjtBQUMzQixVQUFNLElBQUlHLFNBQUosQ0FBYywwQ0FBZCxDQUFOO0FBQ0E7O0FBQ0QsTUFBSUQsTUFBTSxLQUFLLENBQWYsRUFBa0I7QUFDakIsV0FBTyxLQUFLLENBQVo7QUFDQTs7QUFDRCxNQUFJRSxPQUFKOztBQUNBLE1BQUlDLFNBQVMsQ0FBQ0gsTUFBVixHQUFtQixDQUF2QixFQUEwQjtBQUN6QkUsSUFBQUEsT0FBTyxHQUFHQyxTQUFTLENBQUMsQ0FBRCxDQUFuQjtBQUNBOztBQUVELE9BQUssSUFBSUMsQ0FBQyxHQUFHLENBQVIsRUFBV0MsS0FBaEIsRUFBdUJELENBQUMsR0FBR0osTUFBM0IsRUFBbUNJLENBQUMsRUFBcEMsRUFBd0M7QUFDdkNDLElBQUFBLEtBQUssR0FBR04sSUFBSSxDQUFDSyxDQUFELENBQVosQ0FEdUMsQ0FFdkM7O0FBQ0EsUUFBSU4sU0FBUyxDQUFDUSxLQUFWLENBQWdCSixPQUFoQixFQUF5QixDQUFDRyxLQUFELEVBQVFELENBQVIsRUFBV0wsSUFBWCxDQUF6QixDQUFKLEVBQWdEO0FBQy9DLGFBQU9NLEtBQVA7QUFDQTtBQUNEOztBQUNELFNBQU8sS0FBSyxDQUFaO0FBQ0EsQ0F0QkQiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBUb09iamVjdCA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0LzIwMTkvVG9PYmplY3QnKTtcbnZhciBUb0xlbmd0aCA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0LzIwMTkvVG9MZW5ndGgnKTtcbnZhciBJc0NhbGxhYmxlID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAxOS9Jc0NhbGxhYmxlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZmluZChwcmVkaWNhdGUpIHtcblx0dmFyIGxpc3QgPSBUb09iamVjdCh0aGlzKTtcblx0dmFyIGxlbmd0aCA9IFRvTGVuZ3RoKGxpc3QubGVuZ3RoKTtcblx0aWYgKCFJc0NhbGxhYmxlKHByZWRpY2F0ZSkpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdBcnJheSNmaW5kOiBwcmVkaWNhdGUgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG5cdH1cblx0aWYgKGxlbmd0aCA9PT0gMCkge1xuXHRcdHJldHVybiB2b2lkIDA7XG5cdH1cblx0dmFyIHRoaXNBcmc7XG5cdGlmIChhcmd1bWVudHMubGVuZ3RoID4gMCkge1xuXHRcdHRoaXNBcmcgPSBhcmd1bWVudHNbMV07XG5cdH1cblxuXHRmb3IgKHZhciBpID0gMCwgdmFsdWU7IGkgPCBsZW5ndGg7IGkrKykge1xuXHRcdHZhbHVlID0gbGlzdFtpXTtcblx0XHQvLyBpbmxpbmVkIGZvciBwZXJmb3JtYW5jZTogaWYgKENhbGwocHJlZGljYXRlLCB0aGlzQXJnLCBbdmFsdWUsIGksIGxpc3RdKSkge1xuXHRcdGlmIChwcmVkaWNhdGUuYXBwbHkodGhpc0FyZywgW3ZhbHVlLCBpLCBsaXN0XSkpIHtcblx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIHZvaWQgMDtcbn07XG4iXX0=