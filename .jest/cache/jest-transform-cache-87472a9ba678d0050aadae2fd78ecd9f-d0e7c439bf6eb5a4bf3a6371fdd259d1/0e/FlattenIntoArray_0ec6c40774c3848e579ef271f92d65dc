07f74c378a8dd6cd5ff3f1810decf491
'use strict';

var GetIntrinsic = require('../GetIntrinsic');

var $TypeError = GetIntrinsic('%TypeError%');

var MAX_SAFE_INTEGER = require('../helpers/maxSafeInteger');

var Call = require('./Call');

var CreateDataPropertyOrThrow = require('./CreateDataPropertyOrThrow');

var Get = require('./Get');

var HasProperty = require('./HasProperty');

var IsArray = require('./IsArray');

var ToLength = require('./ToLength');

var ToString = require('./ToString'); // https://ecma-international.org/ecma-262/10.0/#sec-flattenintoarray
// eslint-disable-next-line max-params, max-statements


module.exports = function FlattenIntoArray(target, source, sourceLen, start, depth) {
  var mapperFunction;

  if (arguments.length > 5) {
    mapperFunction = arguments[5];
  }

  var targetIndex = start;
  var sourceIndex = 0;

  while (sourceIndex < sourceLen) {
    var P = ToString(sourceIndex);
    var exists = HasProperty(source, P);

    if (exists === true) {
      var element = Get(source, P);

      if (typeof mapperFunction !== 'undefined') {
        if (arguments.length <= 6) {
          throw new $TypeError('Assertion failed: thisArg is required when mapperFunction is provided');
        }

        element = Call(mapperFunction, arguments[6], [element, sourceIndex, source]);
      }

      var shouldFlatten = false;

      if (depth > 0) {
        shouldFlatten = IsArray(element);
      }

      if (shouldFlatten) {
        var elementLen = ToLength(Get(element, 'length'));
        targetIndex = FlattenIntoArray(target, element, elementLen, targetIndex, depth - 1);
      } else {
        if (targetIndex >= MAX_SAFE_INTEGER) {
          throw new $TypeError('index too large');
        }

        CreateDataPropertyOrThrow(target, ToString(targetIndex), element);
        targetIndex += 1;
      }
    }

    sourceIndex += 1;
  }

  return targetIndex;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkZsYXR0ZW5JbnRvQXJyYXkuanMiXSwibmFtZXMiOlsiR2V0SW50cmluc2ljIiwicmVxdWlyZSIsIiRUeXBlRXJyb3IiLCJNQVhfU0FGRV9JTlRFR0VSIiwiQ2FsbCIsIkNyZWF0ZURhdGFQcm9wZXJ0eU9yVGhyb3ciLCJHZXQiLCJIYXNQcm9wZXJ0eSIsIklzQXJyYXkiLCJUb0xlbmd0aCIsIlRvU3RyaW5nIiwibW9kdWxlIiwiZXhwb3J0cyIsIkZsYXR0ZW5JbnRvQXJyYXkiLCJ0YXJnZXQiLCJzb3VyY2UiLCJzb3VyY2VMZW4iLCJzdGFydCIsImRlcHRoIiwibWFwcGVyRnVuY3Rpb24iLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJ0YXJnZXRJbmRleCIsInNvdXJjZUluZGV4IiwiUCIsImV4aXN0cyIsImVsZW1lbnQiLCJzaG91bGRGbGF0dGVuIiwiZWxlbWVudExlbiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBSUEsWUFBWSxHQUFHQyxPQUFPLENBQUMsaUJBQUQsQ0FBMUI7O0FBRUEsSUFBSUMsVUFBVSxHQUFHRixZQUFZLENBQUMsYUFBRCxDQUE3Qjs7QUFFQSxJQUFJRyxnQkFBZ0IsR0FBR0YsT0FBTyxDQUFDLDJCQUFELENBQTlCOztBQUVBLElBQUlHLElBQUksR0FBR0gsT0FBTyxDQUFDLFFBQUQsQ0FBbEI7O0FBQ0EsSUFBSUkseUJBQXlCLEdBQUdKLE9BQU8sQ0FBQyw2QkFBRCxDQUF2Qzs7QUFDQSxJQUFJSyxHQUFHLEdBQUdMLE9BQU8sQ0FBQyxPQUFELENBQWpCOztBQUNBLElBQUlNLFdBQVcsR0FBR04sT0FBTyxDQUFDLGVBQUQsQ0FBekI7O0FBQ0EsSUFBSU8sT0FBTyxHQUFHUCxPQUFPLENBQUMsV0FBRCxDQUFyQjs7QUFDQSxJQUFJUSxRQUFRLEdBQUdSLE9BQU8sQ0FBQyxZQUFELENBQXRCOztBQUNBLElBQUlTLFFBQVEsR0FBR1QsT0FBTyxDQUFDLFlBQUQsQ0FBdEIsQyxDQUVBO0FBRUE7OztBQUNBVSxNQUFNLENBQUNDLE9BQVAsR0FBaUIsU0FBU0MsZ0JBQVQsQ0FBMEJDLE1BQTFCLEVBQWtDQyxNQUFsQyxFQUEwQ0MsU0FBMUMsRUFBcURDLEtBQXJELEVBQTREQyxLQUE1RCxFQUFtRTtBQUNuRixNQUFJQyxjQUFKOztBQUNBLE1BQUlDLFNBQVMsQ0FBQ0MsTUFBVixHQUFtQixDQUF2QixFQUEwQjtBQUN6QkYsSUFBQUEsY0FBYyxHQUFHQyxTQUFTLENBQUMsQ0FBRCxDQUExQjtBQUNBOztBQUVELE1BQUlFLFdBQVcsR0FBR0wsS0FBbEI7QUFDQSxNQUFJTSxXQUFXLEdBQUcsQ0FBbEI7O0FBQ0EsU0FBT0EsV0FBVyxHQUFHUCxTQUFyQixFQUFnQztBQUMvQixRQUFJUSxDQUFDLEdBQUdkLFFBQVEsQ0FBQ2EsV0FBRCxDQUFoQjtBQUNBLFFBQUlFLE1BQU0sR0FBR2xCLFdBQVcsQ0FBQ1EsTUFBRCxFQUFTUyxDQUFULENBQXhCOztBQUNBLFFBQUlDLE1BQU0sS0FBSyxJQUFmLEVBQXFCO0FBQ3BCLFVBQUlDLE9BQU8sR0FBR3BCLEdBQUcsQ0FBQ1MsTUFBRCxFQUFTUyxDQUFULENBQWpCOztBQUNBLFVBQUksT0FBT0wsY0FBUCxLQUEwQixXQUE5QixFQUEyQztBQUMxQyxZQUFJQyxTQUFTLENBQUNDLE1BQVYsSUFBb0IsQ0FBeEIsRUFBMkI7QUFDMUIsZ0JBQU0sSUFBSW5CLFVBQUosQ0FBZSx1RUFBZixDQUFOO0FBQ0E7O0FBQ0R3QixRQUFBQSxPQUFPLEdBQUd0QixJQUFJLENBQUNlLGNBQUQsRUFBaUJDLFNBQVMsQ0FBQyxDQUFELENBQTFCLEVBQStCLENBQUNNLE9BQUQsRUFBVUgsV0FBVixFQUF1QlIsTUFBdkIsQ0FBL0IsQ0FBZDtBQUNBOztBQUNELFVBQUlZLGFBQWEsR0FBRyxLQUFwQjs7QUFDQSxVQUFJVCxLQUFLLEdBQUcsQ0FBWixFQUFlO0FBQ2RTLFFBQUFBLGFBQWEsR0FBR25CLE9BQU8sQ0FBQ2tCLE9BQUQsQ0FBdkI7QUFDQTs7QUFDRCxVQUFJQyxhQUFKLEVBQW1CO0FBQ2xCLFlBQUlDLFVBQVUsR0FBR25CLFFBQVEsQ0FBQ0gsR0FBRyxDQUFDb0IsT0FBRCxFQUFVLFFBQVYsQ0FBSixDQUF6QjtBQUNBSixRQUFBQSxXQUFXLEdBQUdULGdCQUFnQixDQUFDQyxNQUFELEVBQVNZLE9BQVQsRUFBa0JFLFVBQWxCLEVBQThCTixXQUE5QixFQUEyQ0osS0FBSyxHQUFHLENBQW5ELENBQTlCO0FBQ0EsT0FIRCxNQUdPO0FBQ04sWUFBSUksV0FBVyxJQUFJbkIsZ0JBQW5CLEVBQXFDO0FBQ3BDLGdCQUFNLElBQUlELFVBQUosQ0FBZSxpQkFBZixDQUFOO0FBQ0E7O0FBQ0RHLFFBQUFBLHlCQUF5QixDQUFDUyxNQUFELEVBQVNKLFFBQVEsQ0FBQ1ksV0FBRCxDQUFqQixFQUFnQ0ksT0FBaEMsQ0FBekI7QUFDQUosUUFBQUEsV0FBVyxJQUFJLENBQWY7QUFDQTtBQUNEOztBQUNEQyxJQUFBQSxXQUFXLElBQUksQ0FBZjtBQUNBOztBQUVELFNBQU9ELFdBQVA7QUFDQSxDQXRDRCIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJy4uL0dldEludHJpbnNpYycpO1xuXG52YXIgJFR5cGVFcnJvciA9IEdldEludHJpbnNpYygnJVR5cGVFcnJvciUnKTtcblxudmFyIE1BWF9TQUZFX0lOVEVHRVIgPSByZXF1aXJlKCcuLi9oZWxwZXJzL21heFNhZmVJbnRlZ2VyJyk7XG5cbnZhciBDYWxsID0gcmVxdWlyZSgnLi9DYWxsJyk7XG52YXIgQ3JlYXRlRGF0YVByb3BlcnR5T3JUaHJvdyA9IHJlcXVpcmUoJy4vQ3JlYXRlRGF0YVByb3BlcnR5T3JUaHJvdycpO1xudmFyIEdldCA9IHJlcXVpcmUoJy4vR2V0Jyk7XG52YXIgSGFzUHJvcGVydHkgPSByZXF1aXJlKCcuL0hhc1Byb3BlcnR5Jyk7XG52YXIgSXNBcnJheSA9IHJlcXVpcmUoJy4vSXNBcnJheScpO1xudmFyIFRvTGVuZ3RoID0gcmVxdWlyZSgnLi9Ub0xlbmd0aCcpO1xudmFyIFRvU3RyaW5nID0gcmVxdWlyZSgnLi9Ub1N0cmluZycpO1xuXG4vLyBodHRwczovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvMTAuMC8jc2VjLWZsYXR0ZW5pbnRvYXJyYXlcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG1heC1wYXJhbXMsIG1heC1zdGF0ZW1lbnRzXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIEZsYXR0ZW5JbnRvQXJyYXkodGFyZ2V0LCBzb3VyY2UsIHNvdXJjZUxlbiwgc3RhcnQsIGRlcHRoKSB7XG5cdHZhciBtYXBwZXJGdW5jdGlvbjtcblx0aWYgKGFyZ3VtZW50cy5sZW5ndGggPiA1KSB7XG5cdFx0bWFwcGVyRnVuY3Rpb24gPSBhcmd1bWVudHNbNV07XG5cdH1cblxuXHR2YXIgdGFyZ2V0SW5kZXggPSBzdGFydDtcblx0dmFyIHNvdXJjZUluZGV4ID0gMDtcblx0d2hpbGUgKHNvdXJjZUluZGV4IDwgc291cmNlTGVuKSB7XG5cdFx0dmFyIFAgPSBUb1N0cmluZyhzb3VyY2VJbmRleCk7XG5cdFx0dmFyIGV4aXN0cyA9IEhhc1Byb3BlcnR5KHNvdXJjZSwgUCk7XG5cdFx0aWYgKGV4aXN0cyA9PT0gdHJ1ZSkge1xuXHRcdFx0dmFyIGVsZW1lbnQgPSBHZXQoc291cmNlLCBQKTtcblx0XHRcdGlmICh0eXBlb2YgbWFwcGVyRnVuY3Rpb24gIT09ICd1bmRlZmluZWQnKSB7XG5cdFx0XHRcdGlmIChhcmd1bWVudHMubGVuZ3RoIDw9IDYpIHtcblx0XHRcdFx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignQXNzZXJ0aW9uIGZhaWxlZDogdGhpc0FyZyBpcyByZXF1aXJlZCB3aGVuIG1hcHBlckZ1bmN0aW9uIGlzIHByb3ZpZGVkJyk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZWxlbWVudCA9IENhbGwobWFwcGVyRnVuY3Rpb24sIGFyZ3VtZW50c1s2XSwgW2VsZW1lbnQsIHNvdXJjZUluZGV4LCBzb3VyY2VdKTtcblx0XHRcdH1cblx0XHRcdHZhciBzaG91bGRGbGF0dGVuID0gZmFsc2U7XG5cdFx0XHRpZiAoZGVwdGggPiAwKSB7XG5cdFx0XHRcdHNob3VsZEZsYXR0ZW4gPSBJc0FycmF5KGVsZW1lbnQpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHNob3VsZEZsYXR0ZW4pIHtcblx0XHRcdFx0dmFyIGVsZW1lbnRMZW4gPSBUb0xlbmd0aChHZXQoZWxlbWVudCwgJ2xlbmd0aCcpKTtcblx0XHRcdFx0dGFyZ2V0SW5kZXggPSBGbGF0dGVuSW50b0FycmF5KHRhcmdldCwgZWxlbWVudCwgZWxlbWVudExlbiwgdGFyZ2V0SW5kZXgsIGRlcHRoIC0gMSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRpZiAodGFyZ2V0SW5kZXggPj0gTUFYX1NBRkVfSU5URUdFUikge1xuXHRcdFx0XHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdpbmRleCB0b28gbGFyZ2UnKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRDcmVhdGVEYXRhUHJvcGVydHlPclRocm93KHRhcmdldCwgVG9TdHJpbmcodGFyZ2V0SW5kZXgpLCBlbGVtZW50KTtcblx0XHRcdFx0dGFyZ2V0SW5kZXggKz0gMTtcblx0XHRcdH1cblx0XHR9XG5cdFx0c291cmNlSW5kZXggKz0gMTtcblx0fVxuXG5cdHJldHVybiB0YXJnZXRJbmRleDtcbn07XG4iXX0=