1a00dc4185716cca9730802fe6b4f6d0
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = nChildren;

var _react = _interopRequireDefault(require("react"));

var _propTypes = require("prop-types");

var _wrapValidator = _interopRequireDefault(require("./helpers/wrapValidator"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function nChildren(n) {
  var propType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _propTypes.node;

  if (typeof n !== 'number' || isNaN(n) || n < 0) {
    throw new TypeError('a non-negative number is required');
  }

  var validator = function nChildrenValidator(props, propName, componentName) {
    if (propName !== 'children') {
      return new TypeError("".concat(componentName, " is using the nChildren validator on a non-children prop"));
    }

    var children = props.children;

    var childrenCount = _react["default"].Children.count(children);

    if (childrenCount !== n) {
      return new RangeError("".concat(componentName, " expects to receive ").concat(n, " children, but received ").concat(childrenCount, " children."));
    }

    for (var _len = arguments.length, rest = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
      rest[_key - 3] = arguments[_key];
    }

    return propType.apply(void 0, [props, propName, componentName].concat(rest));
  };

  validator.isRequired = validator;
  return (0, _wrapValidator["default"])(validator, "nChildren:".concat(n), n);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9uQ2hpbGRyZW4uanMiXSwibmFtZXMiOlsicHJvcFR5cGUiLCJub2RlIiwiaXNOYU4iLCJuIiwidmFsaWRhdG9yIiwicmVzdCIsInByb3BOYW1lIiwiY2hpbGRyZW4iLCJwcm9wcyIsImNoaWxkcmVuQ291bnQiLCJSZWFjdCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLElBQUEsTUFBQSxHQUFBLHNCQUFBLENBQUEsT0FBQSxDQUFBLE9BQUEsQ0FBQSxDQUFBOztBQUNBLElBQUEsVUFBQSxHQUFBLE9BQUEsQ0FBQSxZQUFBLENBQUE7O0FBQ0EsSUFBQSxjQUFBLEdBQUEsc0JBQUEsQ0FBQSxPQUFBLENBQUEseUJBQUEsQ0FBQSxDQUFBOzs7Ozs7OztBQUVlLFNBQUEsU0FBQSxDQUFBLENBQUEsRUFBdUM7QUFBQSxNQUFqQkEsUUFBaUIsR0FBQSxTQUFBLENBQUEsTUFBQSxHQUFBLENBQUEsSUFBQSxTQUFBLENBQUEsQ0FBQSxDQUFBLEtBQUEsU0FBQSxHQUFBLFNBQUEsQ0FBQSxDQUFBLENBQUEsR0FBTkMsVUFBQUEsQ0FBQUEsSUFBTTs7QUFDcEQsTUFBSSxPQUFBLENBQUEsS0FBQSxRQUFBLElBQXlCQyxLQUFLLENBQTlCLENBQThCLENBQTlCLElBQXFDQyxDQUFDLEdBQTFDLENBQUEsRUFBZ0Q7QUFDOUMsVUFBTSxJQUFBLFNBQUEsQ0FBTixtQ0FBTSxDQUFOO0FBQ0Q7O0FBRUQsTUFBTUMsU0FBUyxHQUFHLFNBQUEsa0JBQUEsQ0FBQSxLQUFBLEVBQUEsUUFBQSxFQUFBLGFBQUEsRUFBcUU7QUFDckYsUUFBSUUsUUFBUSxLQUFaLFVBQUEsRUFBNkI7QUFDM0IsYUFBTyxJQUFBLFNBQUEsQ0FBQSxHQUFBLE1BQUEsQ0FBQSxhQUFBLEVBQVAsMERBQU8sQ0FBQSxDQUFQO0FBQ0Q7O0FBSG9GLFFBSzdFQyxRQUw2RSxHQUtoRUMsS0FMZ0UsQ0FBQSxRQUFBOztBQU1yRixRQUFNQyxhQUFhLEdBQUdDLE1BQUFBLENBQUFBLFNBQUFBLENBQUFBLENBQUFBLFFBQUFBLENBQUFBLEtBQUFBLENBQXRCLFFBQXNCQSxDQUF0Qjs7QUFFQSxRQUFJRCxhQUFhLEtBQWpCLENBQUEsRUFBeUI7QUFDdkIsYUFBTyxJQUFBLFVBQUEsQ0FBQSxHQUFBLE1BQUEsQ0FBQSxhQUFBLEVBQUEsc0JBQUEsRUFBQSxNQUFBLENBQUEsQ0FBQSxFQUFBLDBCQUFBLEVBQUEsTUFBQSxDQUFBLGFBQUEsRUFBUCxZQUFPLENBQUEsQ0FBUDtBQUdEOztBQVpvRixTQUFBLElBQUEsSUFBQSxHQUFBLFNBQUEsQ0FBQSxNQUFBLEVBQU5KLElBQU0sR0FBQSxJQUFBLEtBQUEsQ0FBQSxJQUFBLEdBQUEsQ0FBQSxHQUFBLElBQUEsR0FBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBLEVBQUEsSUFBQSxHQUFBLENBQUEsRUFBQSxJQUFBLEdBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxFQUFBO0FBQU5BLE1BQUFBLElBQU0sQ0FBQSxJQUFBLEdBQUEsQ0FBQSxDQUFOQSxHQUFNLFNBQUEsQ0FBQSxJQUFBLENBQU5BO0FBQU07O0FBYXJGLFdBQU9MLFFBQVEsQ0FBUkEsS0FBQUEsQ0FBQUEsS0FBQUEsQ0FBQUEsRUFBQUEsQ0FBQUEsS0FBQUEsRUFBQUEsUUFBQUEsRUFBQUEsYUFBQUEsRUFBQUEsTUFBQUEsQ0FBUCxJQUFPQSxDQUFBQSxDQUFQO0FBYkYsR0FBQTs7QUFlQUksRUFBQUEsU0FBUyxDQUFUQSxVQUFBQSxHQUFBQSxTQUFBQTtBQUVBLFNBQU8sQ0FBQSxHQUFBLGNBQUEsQ0FBQSxTQUFBLENBQUEsRUFBQSxTQUFBLEVBQUEsYUFBQSxNQUFBLENBQUEsQ0FBQSxDQUFBLEVBQVAsQ0FBTyxDQUFQO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgbm9kZSB9IGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHdyYXBWYWxpZGF0b3IgZnJvbSAnLi9oZWxwZXJzL3dyYXBWYWxpZGF0b3InO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBuQ2hpbGRyZW4obiwgcHJvcFR5cGUgPSBub2RlKSB7XG4gIGlmICh0eXBlb2YgbiAhPT0gJ251bWJlcicgfHwgaXNOYU4obikgfHwgbiA8IDApIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdhIG5vbi1uZWdhdGl2ZSBudW1iZXIgaXMgcmVxdWlyZWQnKTtcbiAgfVxuXG4gIGNvbnN0IHZhbGlkYXRvciA9IGZ1bmN0aW9uIG5DaGlsZHJlblZhbGlkYXRvcihwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIC4uLnJlc3QpIHtcbiAgICBpZiAocHJvcE5hbWUgIT09ICdjaGlsZHJlbicpIHtcbiAgICAgIHJldHVybiBuZXcgVHlwZUVycm9yKGAke2NvbXBvbmVudE5hbWV9IGlzIHVzaW5nIHRoZSBuQ2hpbGRyZW4gdmFsaWRhdG9yIG9uIGEgbm9uLWNoaWxkcmVuIHByb3BgKTtcbiAgICB9XG5cbiAgICBjb25zdCB7IGNoaWxkcmVuIH0gPSBwcm9wcztcbiAgICBjb25zdCBjaGlsZHJlbkNvdW50ID0gUmVhY3QuQ2hpbGRyZW4uY291bnQoY2hpbGRyZW4pO1xuXG4gICAgaWYgKGNoaWxkcmVuQ291bnQgIT09IG4pIHtcbiAgICAgIHJldHVybiBuZXcgUmFuZ2VFcnJvcihcbiAgICAgICAgYCR7Y29tcG9uZW50TmFtZX0gZXhwZWN0cyB0byByZWNlaXZlICR7bn0gY2hpbGRyZW4sIGJ1dCByZWNlaXZlZCAke2NoaWxkcmVuQ291bnR9IGNoaWxkcmVuLmAsXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gcHJvcFR5cGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCAuLi5yZXN0KTtcbiAgfTtcbiAgdmFsaWRhdG9yLmlzUmVxdWlyZWQgPSB2YWxpZGF0b3I7XG5cbiAgcmV0dXJuIHdyYXBWYWxpZGF0b3IodmFsaWRhdG9yLCBgbkNoaWxkcmVuOiR7bn1gLCBuKTtcbn1cbiJdfQ==