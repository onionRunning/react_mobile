9d5a9affa1ad93a08fc6f7542dc17ce6
'use strict';

var AddEntriesFromIterable = require('es-abstract/2019/AddEntriesFromIterable');

var CreateDataPropertyOrThrow = require('es-abstract/2019/CreateDataPropertyOrThrow');

var Get = require('es-abstract/2019/Get');

var IsArray = require('es-abstract/2019/IsArray');

var RequireObjectCoercible = require('es-abstract/2019/RequireObjectCoercible');

var ToPropertyKey = require('es-abstract/2019/ToPropertyKey');

var Type = require('es-abstract/2019/Type');

var adder = function addDataProperty(key, value) {
  var O = this; // eslint-disable-line no-invalid-this

  var propertyKey = ToPropertyKey(key);
  CreateDataPropertyOrThrow(O, propertyKey, value);
};

var legacyAssign = function assign(obj, entries) {
  for (var i = 0; i < entries.length; ++i) {
    var entry = entries[i];

    if (Type(entry) !== 'Object') {
      throw new TypeError('iterator returned a non-object; entry expected');
    }

    var key = Get(entry, '0');
    var value = Get(entry, '1');
    var propertyKey = ToPropertyKey(key);
    CreateDataPropertyOrThrow(obj, propertyKey, value);
  }
};

var hasSymbols = typeof Symbol === 'function' && typeof Symbol('foo') === 'symbol';

module.exports = function fromEntries(iterable) {
  RequireObjectCoercible(iterable);
  var obj = {}; // this part isn't in the spec, it's for a reasonable fallback for pre-ES6 environments

  if (!hasSymbols) {
    if (!IsArray(iterable)) {
      throw new TypeError('this environment lacks native Symbols, and can not support non-Array iterables');
    }

    legacyAssign(obj, iterable);
    return obj;
  }

  return AddEntriesFromIterable(obj, iterable, adder);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImltcGxlbWVudGF0aW9uLmpzIl0sIm5hbWVzIjpbIkFkZEVudHJpZXNGcm9tSXRlcmFibGUiLCJyZXF1aXJlIiwiQ3JlYXRlRGF0YVByb3BlcnR5T3JUaHJvdyIsIkdldCIsIklzQXJyYXkiLCJSZXF1aXJlT2JqZWN0Q29lcmNpYmxlIiwiVG9Qcm9wZXJ0eUtleSIsIlR5cGUiLCJhZGRlciIsImFkZERhdGFQcm9wZXJ0eSIsImtleSIsInZhbHVlIiwiTyIsInByb3BlcnR5S2V5IiwibGVnYWN5QXNzaWduIiwiYXNzaWduIiwib2JqIiwiZW50cmllcyIsImkiLCJsZW5ndGgiLCJlbnRyeSIsIlR5cGVFcnJvciIsImhhc1N5bWJvbHMiLCJTeW1ib2wiLCJtb2R1bGUiLCJleHBvcnRzIiwiZnJvbUVudHJpZXMiLCJpdGVyYWJsZSJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBSUEsc0JBQXNCLEdBQUdDLE9BQU8sQ0FBQyx5Q0FBRCxDQUFwQzs7QUFDQSxJQUFJQyx5QkFBeUIsR0FBR0QsT0FBTyxDQUFDLDRDQUFELENBQXZDOztBQUNBLElBQUlFLEdBQUcsR0FBR0YsT0FBTyxDQUFDLHNCQUFELENBQWpCOztBQUNBLElBQUlHLE9BQU8sR0FBR0gsT0FBTyxDQUFDLDBCQUFELENBQXJCOztBQUNBLElBQUlJLHNCQUFzQixHQUFHSixPQUFPLENBQUMseUNBQUQsQ0FBcEM7O0FBQ0EsSUFBSUssYUFBYSxHQUFHTCxPQUFPLENBQUMsZ0NBQUQsQ0FBM0I7O0FBQ0EsSUFBSU0sSUFBSSxHQUFHTixPQUFPLENBQUMsdUJBQUQsQ0FBbEI7O0FBRUEsSUFBSU8sS0FBSyxHQUFHLFNBQVNDLGVBQVQsQ0FBeUJDLEdBQXpCLEVBQThCQyxLQUE5QixFQUFxQztBQUNoRCxNQUFJQyxDQUFDLEdBQUcsSUFBUixDQURnRCxDQUNsQzs7QUFDZCxNQUFJQyxXQUFXLEdBQUdQLGFBQWEsQ0FBQ0ksR0FBRCxDQUEvQjtBQUNBUixFQUFBQSx5QkFBeUIsQ0FBQ1UsQ0FBRCxFQUFJQyxXQUFKLEVBQWlCRixLQUFqQixDQUF6QjtBQUNBLENBSkQ7O0FBTUEsSUFBSUcsWUFBWSxHQUFHLFNBQVNDLE1BQVQsQ0FBZ0JDLEdBQWhCLEVBQXFCQyxPQUFyQixFQUE4QjtBQUNoRCxPQUFLLElBQUlDLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdELE9BQU8sQ0FBQ0UsTUFBNUIsRUFBb0MsRUFBRUQsQ0FBdEMsRUFBeUM7QUFDeEMsUUFBSUUsS0FBSyxHQUFHSCxPQUFPLENBQUNDLENBQUQsQ0FBbkI7O0FBQ0EsUUFBSVgsSUFBSSxDQUFDYSxLQUFELENBQUosS0FBZ0IsUUFBcEIsRUFBOEI7QUFDN0IsWUFBTSxJQUFJQyxTQUFKLENBQWMsZ0RBQWQsQ0FBTjtBQUNBOztBQUVELFFBQUlYLEdBQUcsR0FBR1AsR0FBRyxDQUFDaUIsS0FBRCxFQUFRLEdBQVIsQ0FBYjtBQUNBLFFBQUlULEtBQUssR0FBR1IsR0FBRyxDQUFDaUIsS0FBRCxFQUFRLEdBQVIsQ0FBZjtBQUNBLFFBQUlQLFdBQVcsR0FBR1AsYUFBYSxDQUFDSSxHQUFELENBQS9CO0FBQ0FSLElBQUFBLHlCQUF5QixDQUFDYyxHQUFELEVBQU1ILFdBQU4sRUFBbUJGLEtBQW5CLENBQXpCO0FBQ0E7QUFDRCxDQVpEOztBQWNBLElBQUlXLFVBQVUsR0FBRyxPQUFPQyxNQUFQLEtBQWtCLFVBQWxCLElBQWdDLE9BQU9BLE1BQU0sQ0FBQyxLQUFELENBQWIsS0FBeUIsUUFBMUU7O0FBRUFDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixTQUFTQyxXQUFULENBQXFCQyxRQUFyQixFQUErQjtBQUMvQ3RCLEVBQUFBLHNCQUFzQixDQUFDc0IsUUFBRCxDQUF0QjtBQUVBLE1BQUlYLEdBQUcsR0FBRyxFQUFWLENBSCtDLENBSy9DOztBQUNBLE1BQUksQ0FBQ00sVUFBTCxFQUFpQjtBQUNoQixRQUFJLENBQUNsQixPQUFPLENBQUN1QixRQUFELENBQVosRUFBd0I7QUFDdkIsWUFBTSxJQUFJTixTQUFKLENBQWMsZ0ZBQWQsQ0FBTjtBQUNBOztBQUNEUCxJQUFBQSxZQUFZLENBQUNFLEdBQUQsRUFBTVcsUUFBTixDQUFaO0FBQ0EsV0FBT1gsR0FBUDtBQUNBOztBQUVELFNBQU9oQixzQkFBc0IsQ0FBQ2dCLEdBQUQsRUFBTVcsUUFBTixFQUFnQm5CLEtBQWhCLENBQTdCO0FBQ0EsQ0FmRCIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIEFkZEVudHJpZXNGcm9tSXRlcmFibGUgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC8yMDE5L0FkZEVudHJpZXNGcm9tSXRlcmFibGUnKTtcbnZhciBDcmVhdGVEYXRhUHJvcGVydHlPclRocm93ID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAxOS9DcmVhdGVEYXRhUHJvcGVydHlPclRocm93Jyk7XG52YXIgR2V0ID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAxOS9HZXQnKTtcbnZhciBJc0FycmF5ID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAxOS9Jc0FycmF5Jyk7XG52YXIgUmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0LzIwMTkvUmVxdWlyZU9iamVjdENvZXJjaWJsZScpO1xudmFyIFRvUHJvcGVydHlLZXkgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC8yMDE5L1RvUHJvcGVydHlLZXknKTtcbnZhciBUeXBlID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAxOS9UeXBlJyk7XG5cbnZhciBhZGRlciA9IGZ1bmN0aW9uIGFkZERhdGFQcm9wZXJ0eShrZXksIHZhbHVlKSB7XG5cdHZhciBPID0gdGhpczsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1pbnZhbGlkLXRoaXNcblx0dmFyIHByb3BlcnR5S2V5ID0gVG9Qcm9wZXJ0eUtleShrZXkpO1xuXHRDcmVhdGVEYXRhUHJvcGVydHlPclRocm93KE8sIHByb3BlcnR5S2V5LCB2YWx1ZSk7XG59O1xuXG52YXIgbGVnYWN5QXNzaWduID0gZnVuY3Rpb24gYXNzaWduKG9iaiwgZW50cmllcykge1xuXHRmb3IgKHZhciBpID0gMDsgaSA8IGVudHJpZXMubGVuZ3RoOyArK2kpIHtcblx0XHR2YXIgZW50cnkgPSBlbnRyaWVzW2ldO1xuXHRcdGlmIChUeXBlKGVudHJ5KSAhPT0gJ09iamVjdCcpIHtcblx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ2l0ZXJhdG9yIHJldHVybmVkIGEgbm9uLW9iamVjdDsgZW50cnkgZXhwZWN0ZWQnKTtcblx0XHR9XG5cblx0XHR2YXIga2V5ID0gR2V0KGVudHJ5LCAnMCcpO1xuXHRcdHZhciB2YWx1ZSA9IEdldChlbnRyeSwgJzEnKTtcblx0XHR2YXIgcHJvcGVydHlLZXkgPSBUb1Byb3BlcnR5S2V5KGtleSk7XG5cdFx0Q3JlYXRlRGF0YVByb3BlcnR5T3JUaHJvdyhvYmosIHByb3BlcnR5S2V5LCB2YWx1ZSk7XG5cdH1cbn07XG5cbnZhciBoYXNTeW1ib2xzID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgU3ltYm9sKCdmb28nKSA9PT0gJ3N5bWJvbCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZnJvbUVudHJpZXMoaXRlcmFibGUpIHtcblx0UmVxdWlyZU9iamVjdENvZXJjaWJsZShpdGVyYWJsZSk7XG5cblx0dmFyIG9iaiA9IHt9O1xuXG5cdC8vIHRoaXMgcGFydCBpc24ndCBpbiB0aGUgc3BlYywgaXQncyBmb3IgYSByZWFzb25hYmxlIGZhbGxiYWNrIGZvciBwcmUtRVM2IGVudmlyb25tZW50c1xuXHRpZiAoIWhhc1N5bWJvbHMpIHtcblx0XHRpZiAoIUlzQXJyYXkoaXRlcmFibGUpKSB7XG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCd0aGlzIGVudmlyb25tZW50IGxhY2tzIG5hdGl2ZSBTeW1ib2xzLCBhbmQgY2FuIG5vdCBzdXBwb3J0IG5vbi1BcnJheSBpdGVyYWJsZXMnKTtcblx0XHR9XG5cdFx0bGVnYWN5QXNzaWduKG9iaiwgaXRlcmFibGUpO1xuXHRcdHJldHVybiBvYmo7XG5cdH1cblxuXHRyZXR1cm4gQWRkRW50cmllc0Zyb21JdGVyYWJsZShvYmosIGl0ZXJhYmxlLCBhZGRlcik7XG59O1xuIl19