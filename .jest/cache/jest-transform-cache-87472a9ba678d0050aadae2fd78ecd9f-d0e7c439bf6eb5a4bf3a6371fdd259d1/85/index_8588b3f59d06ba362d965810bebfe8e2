1cdf3d4f8fa5f7cbdea2fc25ab06398d
'use strict';

var keys = require('object-keys');

var hasSymbols = typeof Symbol === 'function' && typeof Symbol('foo') === 'symbol';
var toStr = Object.prototype.toString;
var concat = Array.prototype.concat;
var origDefineProperty = Object.defineProperty;

var isFunction = function (fn) {
  return typeof fn === 'function' && toStr.call(fn) === '[object Function]';
};

var arePropertyDescriptorsSupported = function () {
  var obj = {};

  try {
    origDefineProperty(obj, 'x', {
      enumerable: false,
      value: obj
    }); // eslint-disable-next-line no-unused-vars, no-restricted-syntax

    for (var _ in obj) {
      // jscs:ignore disallowUnusedVariables
      return false;
    }

    return obj.x === obj;
  } catch (e) {
    /* this is IE 8. */
    return false;
  }
};

var supportsDescriptors = origDefineProperty && arePropertyDescriptorsSupported();

var defineProperty = function (object, name, value, predicate) {
  if (name in object && (!isFunction(predicate) || !predicate())) {
    return;
  }

  if (supportsDescriptors) {
    origDefineProperty(object, name, {
      configurable: true,
      enumerable: false,
      value: value,
      writable: true
    });
  } else {
    object[name] = value;
  }
};

var defineProperties = function (object, map) {
  var predicates = arguments.length > 2 ? arguments[2] : {};
  var props = keys(map);

  if (hasSymbols) {
    props = concat.call(props, Object.getOwnPropertySymbols(map));
  }

  for (var i = 0; i < props.length; i += 1) {
    defineProperty(object, props[i], map[props[i]], predicates[props[i]]);
  }
};

defineProperties.supportsDescriptors = !!supportsDescriptors;
module.exports = defineProperties;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbImtleXMiLCJyZXF1aXJlIiwiaGFzU3ltYm9scyIsIlN5bWJvbCIsInRvU3RyIiwiT2JqZWN0IiwicHJvdG90eXBlIiwidG9TdHJpbmciLCJjb25jYXQiLCJBcnJheSIsIm9yaWdEZWZpbmVQcm9wZXJ0eSIsImRlZmluZVByb3BlcnR5IiwiaXNGdW5jdGlvbiIsImZuIiwiY2FsbCIsImFyZVByb3BlcnR5RGVzY3JpcHRvcnNTdXBwb3J0ZWQiLCJvYmoiLCJlbnVtZXJhYmxlIiwidmFsdWUiLCJfIiwieCIsImUiLCJzdXBwb3J0c0Rlc2NyaXB0b3JzIiwib2JqZWN0IiwibmFtZSIsInByZWRpY2F0ZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiZGVmaW5lUHJvcGVydGllcyIsIm1hcCIsInByZWRpY2F0ZXMiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJwcm9wcyIsImdldE93blByb3BlcnR5U3ltYm9scyIsImkiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFJQSxJQUFJLEdBQUdDLE9BQU8sQ0FBQyxhQUFELENBQWxCOztBQUNBLElBQUlDLFVBQVUsR0FBRyxPQUFPQyxNQUFQLEtBQWtCLFVBQWxCLElBQWdDLE9BQU9BLE1BQU0sQ0FBQyxLQUFELENBQWIsS0FBeUIsUUFBMUU7QUFFQSxJQUFJQyxLQUFLLEdBQUdDLE1BQU0sQ0FBQ0MsU0FBUCxDQUFpQkMsUUFBN0I7QUFDQSxJQUFJQyxNQUFNLEdBQUdDLEtBQUssQ0FBQ0gsU0FBTixDQUFnQkUsTUFBN0I7QUFDQSxJQUFJRSxrQkFBa0IsR0FBR0wsTUFBTSxDQUFDTSxjQUFoQzs7QUFFQSxJQUFJQyxVQUFVLEdBQUcsVUFBVUMsRUFBVixFQUFjO0FBQzlCLFNBQU8sT0FBT0EsRUFBUCxLQUFjLFVBQWQsSUFBNEJULEtBQUssQ0FBQ1UsSUFBTixDQUFXRCxFQUFYLE1BQW1CLG1CQUF0RDtBQUNBLENBRkQ7O0FBSUEsSUFBSUUsK0JBQStCLEdBQUcsWUFBWTtBQUNqRCxNQUFJQyxHQUFHLEdBQUcsRUFBVjs7QUFDQSxNQUFJO0FBQ0hOLElBQUFBLGtCQUFrQixDQUFDTSxHQUFELEVBQU0sR0FBTixFQUFXO0FBQUVDLE1BQUFBLFVBQVUsRUFBRSxLQUFkO0FBQXFCQyxNQUFBQSxLQUFLLEVBQUVGO0FBQTVCLEtBQVgsQ0FBbEIsQ0FERyxDQUVIOztBQUNBLFNBQUssSUFBSUcsQ0FBVCxJQUFjSCxHQUFkLEVBQW1CO0FBQUU7QUFDcEIsYUFBTyxLQUFQO0FBQ0E7O0FBQ0QsV0FBT0EsR0FBRyxDQUFDSSxDQUFKLEtBQVVKLEdBQWpCO0FBQ0EsR0FQRCxDQU9FLE9BQU9LLENBQVAsRUFBVTtBQUFFO0FBQ2IsV0FBTyxLQUFQO0FBQ0E7QUFDRCxDQVpEOztBQWFBLElBQUlDLG1CQUFtQixHQUFHWixrQkFBa0IsSUFBSUssK0JBQStCLEVBQS9FOztBQUVBLElBQUlKLGNBQWMsR0FBRyxVQUFVWSxNQUFWLEVBQWtCQyxJQUFsQixFQUF3Qk4sS0FBeEIsRUFBK0JPLFNBQS9CLEVBQTBDO0FBQzlELE1BQUlELElBQUksSUFBSUQsTUFBUixLQUFtQixDQUFDWCxVQUFVLENBQUNhLFNBQUQsQ0FBWCxJQUEwQixDQUFDQSxTQUFTLEVBQXZELENBQUosRUFBZ0U7QUFDL0Q7QUFDQTs7QUFDRCxNQUFJSCxtQkFBSixFQUF5QjtBQUN4QlosSUFBQUEsa0JBQWtCLENBQUNhLE1BQUQsRUFBU0MsSUFBVCxFQUFlO0FBQ2hDRSxNQUFBQSxZQUFZLEVBQUUsSUFEa0I7QUFFaENULE1BQUFBLFVBQVUsRUFBRSxLQUZvQjtBQUdoQ0MsTUFBQUEsS0FBSyxFQUFFQSxLQUh5QjtBQUloQ1MsTUFBQUEsUUFBUSxFQUFFO0FBSnNCLEtBQWYsQ0FBbEI7QUFNQSxHQVBELE1BT087QUFDTkosSUFBQUEsTUFBTSxDQUFDQyxJQUFELENBQU4sR0FBZU4sS0FBZjtBQUNBO0FBQ0QsQ0FkRDs7QUFnQkEsSUFBSVUsZ0JBQWdCLEdBQUcsVUFBVUwsTUFBVixFQUFrQk0sR0FBbEIsRUFBdUI7QUFDN0MsTUFBSUMsVUFBVSxHQUFHQyxTQUFTLENBQUNDLE1BQVYsR0FBbUIsQ0FBbkIsR0FBdUJELFNBQVMsQ0FBQyxDQUFELENBQWhDLEdBQXNDLEVBQXZEO0FBQ0EsTUFBSUUsS0FBSyxHQUFHakMsSUFBSSxDQUFDNkIsR0FBRCxDQUFoQjs7QUFDQSxNQUFJM0IsVUFBSixFQUFnQjtBQUNmK0IsSUFBQUEsS0FBSyxHQUFHekIsTUFBTSxDQUFDTSxJQUFQLENBQVltQixLQUFaLEVBQW1CNUIsTUFBTSxDQUFDNkIscUJBQVAsQ0FBNkJMLEdBQTdCLENBQW5CLENBQVI7QUFDQTs7QUFDRCxPQUFLLElBQUlNLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdGLEtBQUssQ0FBQ0QsTUFBMUIsRUFBa0NHLENBQUMsSUFBSSxDQUF2QyxFQUEwQztBQUN6Q3hCLElBQUFBLGNBQWMsQ0FBQ1ksTUFBRCxFQUFTVSxLQUFLLENBQUNFLENBQUQsQ0FBZCxFQUFtQk4sR0FBRyxDQUFDSSxLQUFLLENBQUNFLENBQUQsQ0FBTixDQUF0QixFQUFrQ0wsVUFBVSxDQUFDRyxLQUFLLENBQUNFLENBQUQsQ0FBTixDQUE1QyxDQUFkO0FBQ0E7QUFDRCxDQVREOztBQVdBUCxnQkFBZ0IsQ0FBQ04sbUJBQWpCLEdBQXVDLENBQUMsQ0FBQ0EsbUJBQXpDO0FBRUFjLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQlQsZ0JBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIga2V5cyA9IHJlcXVpcmUoJ29iamVjdC1rZXlzJyk7XG52YXIgaGFzU3ltYm9scyA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIFN5bWJvbCgnZm9vJykgPT09ICdzeW1ib2wnO1xuXG52YXIgdG9TdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIGNvbmNhdCA9IEFycmF5LnByb3RvdHlwZS5jb25jYXQ7XG52YXIgb3JpZ0RlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuXG52YXIgaXNGdW5jdGlvbiA9IGZ1bmN0aW9uIChmbikge1xuXHRyZXR1cm4gdHlwZW9mIGZuID09PSAnZnVuY3Rpb24nICYmIHRvU3RyLmNhbGwoZm4pID09PSAnW29iamVjdCBGdW5jdGlvbl0nO1xufTtcblxudmFyIGFyZVByb3BlcnR5RGVzY3JpcHRvcnNTdXBwb3J0ZWQgPSBmdW5jdGlvbiAoKSB7XG5cdHZhciBvYmogPSB7fTtcblx0dHJ5IHtcblx0XHRvcmlnRGVmaW5lUHJvcGVydHkob2JqLCAneCcsIHsgZW51bWVyYWJsZTogZmFsc2UsIHZhbHVlOiBvYmogfSk7XG5cdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzLCBuby1yZXN0cmljdGVkLXN5bnRheFxuXHRcdGZvciAodmFyIF8gaW4gb2JqKSB7IC8vIGpzY3M6aWdub3JlIGRpc2FsbG93VW51c2VkVmFyaWFibGVzXG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdHJldHVybiBvYmoueCA9PT0gb2JqO1xuXHR9IGNhdGNoIChlKSB7IC8qIHRoaXMgaXMgSUUgOC4gKi9cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn07XG52YXIgc3VwcG9ydHNEZXNjcmlwdG9ycyA9IG9yaWdEZWZpbmVQcm9wZXJ0eSAmJiBhcmVQcm9wZXJ0eURlc2NyaXB0b3JzU3VwcG9ydGVkKCk7XG5cbnZhciBkZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWUsIHZhbHVlLCBwcmVkaWNhdGUpIHtcblx0aWYgKG5hbWUgaW4gb2JqZWN0ICYmICghaXNGdW5jdGlvbihwcmVkaWNhdGUpIHx8ICFwcmVkaWNhdGUoKSkpIHtcblx0XHRyZXR1cm47XG5cdH1cblx0aWYgKHN1cHBvcnRzRGVzY3JpcHRvcnMpIHtcblx0XHRvcmlnRGVmaW5lUHJvcGVydHkob2JqZWN0LCBuYW1lLCB7XG5cdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRlbnVtZXJhYmxlOiBmYWxzZSxcblx0XHRcdHZhbHVlOiB2YWx1ZSxcblx0XHRcdHdyaXRhYmxlOiB0cnVlXG5cdFx0fSk7XG5cdH0gZWxzZSB7XG5cdFx0b2JqZWN0W25hbWVdID0gdmFsdWU7XG5cdH1cbn07XG5cbnZhciBkZWZpbmVQcm9wZXJ0aWVzID0gZnVuY3Rpb24gKG9iamVjdCwgbWFwKSB7XG5cdHZhciBwcmVkaWNhdGVzID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB7fTtcblx0dmFyIHByb3BzID0ga2V5cyhtYXApO1xuXHRpZiAoaGFzU3ltYm9scykge1xuXHRcdHByb3BzID0gY29uY2F0LmNhbGwocHJvcHMsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMobWFwKSk7XG5cdH1cblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkgKz0gMSkge1xuXHRcdGRlZmluZVByb3BlcnR5KG9iamVjdCwgcHJvcHNbaV0sIG1hcFtwcm9wc1tpXV0sIHByZWRpY2F0ZXNbcHJvcHNbaV1dKTtcblx0fVxufTtcblxuZGVmaW5lUHJvcGVydGllcy5zdXBwb3J0c0Rlc2NyaXB0b3JzID0gISFzdXBwb3J0c0Rlc2NyaXB0b3JzO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRlZmluZVByb3BlcnRpZXM7XG4iXX0=