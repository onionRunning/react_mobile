{"version":3,"sources":["../src/childrenHavePropXorChildren.js"],"names":["validator","children","truthyChildrenCount","propCount","grandchildrenCount","React","child"],"mappings":";;;;;;;AAAA,IAAA,MAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,IAAA,cAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,yBAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;AAEe,SAAA,2BAAA,CAAA,IAAA,EAA2C;AACxD,MAAI,OAAA,IAAA,KAAA,QAAA,IAA4B,OAAA,CAAA,IAAA,CAAA,KAAhC,QAAA,EAA0D;AACxD,UAAM,IAAA,SAAA,CAAN,wCAAM,CAAN;AACD;;AAED,MAAMA,SAAS,GAAG,SAAA,mCAAA,CAAA,IAAA,EAAA,CAAA,EAAA,aAAA,EAA6E;AAAA,QAA9BC,QAA8B,GAAA,IAAA,CAA9BA,QAA8B;AAC7F,QAAIC,mBAAmB,GAAvB,CAAA;AACA,QAAIC,SAAS,GAAb,CAAA;AACA,QAAIC,kBAAkB,GAAtB,CAAA;;AAEAC,IAAAA,MAAAA,CAAAA,SAAAA,CAAAA,CAAAA,QAAAA,CAAAA,OAAAA,CAAAA,QAAAA,EAAiC,UAAA,KAAA,EAAW;AAC1C,UAAI,CAAJ,KAAA,EAAY;AACV;AACD;;AAEDH,MAAAA,mBAAmB,IAAnBA,CAAAA;;AAEA,UAAII,KAAK,CAALA,KAAAA,CAAJ,IAAIA,CAAJ,EAAuB;AACrBH,QAAAA,SAAS,IAATA,CAAAA;AACD;;AAED,UAAIE,MAAAA,CAAAA,SAAAA,CAAAA,CAAAA,QAAAA,CAAAA,KAAAA,CAAqBC,KAAK,CAALA,KAAAA,CAAzB,QAAID,CAAJ,EAAgD;AAC9CD,QAAAA,kBAAkB,IAAlBA,CAAAA;AACD;AAbHC,KAAAA;;AAgBA,QACGF,SAAS,KAATA,mBAAAA,IAAqCC,kBAAkB,KAAxD,CAACD,IACGA,SAAS,KAATA,CAAAA,IAAmBC,kBAAkB,KADzC,mBAACD,IAEGA,SAAS,KAATA,CAAAA,IAAmBC,kBAAkB,KAH3C,CAAA,EAIE;AACA,aAAA,IAAA;AACD;;AAED,WAAO,IAAA,SAAA,CAAA,IAAA,MAAA,CAAA,aAAA,EAAA,6CAAA,EAAA,MAAA,CAAA,IAAA,EAAP,iDAAO,CAAA,CAAP;AA7BF,GAAA;;AA+BAJ,EAAAA,SAAS,CAATA,UAAAA,GAAAA,SAAAA;AAEA,SAAO,CAAA,GAAA,cAAA,CAAA,SAAA,CAAA,EAAA,SAAA,EAAA,uCAAA,MAAA,CAAA,IAAA,CAAA,EAAP,IAAO,CAAP;AACD","sourcesContent":["import React from 'react';\nimport wrapValidator from './helpers/wrapValidator';\n\nexport default function childrenHavePropXorChildren(prop) {\n  if (typeof prop !== 'string' && typeof prop !== 'symbol') {\n    throw new TypeError('invalid prop: must be string or symbol');\n  }\n\n  const validator = function childrenHavePropXorChildrenWithProp({ children }, _, componentName) {\n    let truthyChildrenCount = 0;\n    let propCount = 0;\n    let grandchildrenCount = 0;\n\n    React.Children.forEach(children, (child) => {\n      if (!child) {\n        return;\n      }\n\n      truthyChildrenCount += 1;\n\n      if (child.props[prop]) {\n        propCount += 1;\n      }\n\n      if (React.Children.count(child.props.children)) {\n        grandchildrenCount += 1;\n      }\n    });\n\n    if (\n      (propCount === truthyChildrenCount && grandchildrenCount === 0)\n      || (propCount === 0 && grandchildrenCount === truthyChildrenCount)\n      || (propCount === 0 && grandchildrenCount === 0)\n    ) {\n      return null;\n    }\n\n    return new TypeError(`\\`${componentName}\\` requires children to all have prop “${prop}”, all have children, or all have neither.`);\n  };\n  validator.isRequired = validator;\n\n  return wrapValidator(validator, `childrenHavePropXorChildrenWithProp:${prop}`, prop);\n}\n"]}