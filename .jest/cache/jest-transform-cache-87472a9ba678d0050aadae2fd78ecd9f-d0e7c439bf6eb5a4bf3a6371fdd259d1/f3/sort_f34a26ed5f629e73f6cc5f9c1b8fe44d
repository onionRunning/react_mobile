c86b6dd5d71a18bf4a3b669bb2d29417
module.exports = sortByProcedure;
/*
	sort the parts of the passed selector,
	as there is potential for optimization
	(some types of selectors are faster than others)
*/

var procedure = require("./procedure.json");

var attributes = {
  __proto__: null,
  exists: 10,
  equals: 8,
  not: 7,
  start: 6,
  end: 6,
  any: 5,
  hyphen: 4,
  element: 4
};

function sortByProcedure(arr) {
  var procs = arr.map(getProcedure);

  for (var i = 1; i < arr.length; i++) {
    var procNew = procs[i];
    if (procNew < 0) continue;

    for (var j = i - 1; j >= 0 && procNew < procs[j]; j--) {
      var token = arr[j + 1];
      arr[j + 1] = arr[j];
      arr[j] = token;
      procs[j + 1] = procs[j];
      procs[j] = procNew;
    }
  }
}

function getProcedure(token) {
  var proc = procedure[token.type];

  if (proc === procedure.attribute) {
    proc = attributes[token.action];

    if (proc === attributes.equals && token.name === "id") {
      //prefer ID selectors (eg. #ID)
      proc = 9;
    }

    if (token.ignoreCase) {
      //ignoreCase adds some overhead, prefer "normal" token
      //this is a binary operation, to ensure it's still an int
      proc >>= 1;
    }
  } else if (proc === procedure.pseudo) {
    if (!token.data) {
      proc = 3;
    } else if (token.name === "has" || token.name === "contains") {
      proc = 0; //expensive in any case
    } else if (token.name === "matches" || token.name === "not") {
      proc = 0;

      for (var i = 0; i < token.data.length; i++) {
        //TODO better handling of complex selectors
        if (token.data[i].length !== 1) continue;
        var cur = getProcedure(token.data[i][0]); //avoid executing :has or :contains

        if (cur === 0) {
          proc = 0;
          break;
        }

        if (cur > proc) proc = cur;
      }

      if (token.data.length > 1 && proc > 0) proc -= 1;
    } else {
      proc = 1;
    }
  }

  return proc;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNvcnQuanMiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsInNvcnRCeVByb2NlZHVyZSIsInByb2NlZHVyZSIsInJlcXVpcmUiLCJhdHRyaWJ1dGVzIiwiX19wcm90b19fIiwiZXhpc3RzIiwiZXF1YWxzIiwibm90Iiwic3RhcnQiLCJlbmQiLCJhbnkiLCJoeXBoZW4iLCJlbGVtZW50IiwiYXJyIiwicHJvY3MiLCJtYXAiLCJnZXRQcm9jZWR1cmUiLCJpIiwibGVuZ3RoIiwicHJvY05ldyIsImoiLCJ0b2tlbiIsInByb2MiLCJ0eXBlIiwiYXR0cmlidXRlIiwiYWN0aW9uIiwibmFtZSIsImlnbm9yZUNhc2UiLCJwc2V1ZG8iLCJkYXRhIiwiY3VyIl0sIm1hcHBpbmdzIjoiQUFBQUEsTUFBTSxDQUFDQyxPQUFQLEdBQWlCQyxlQUFqQjtBQUVBOzs7Ozs7QUFNQSxJQUFJQyxTQUFTLEdBQUdDLE9BQU8sQ0FBQyxrQkFBRCxDQUF2Qjs7QUFFQSxJQUFJQyxVQUFVLEdBQUc7QUFDaEJDLEVBQUFBLFNBQVMsRUFBRSxJQURLO0FBRWhCQyxFQUFBQSxNQUFNLEVBQUUsRUFGUTtBQUdoQkMsRUFBQUEsTUFBTSxFQUFFLENBSFE7QUFJaEJDLEVBQUFBLEdBQUcsRUFBRSxDQUpXO0FBS2hCQyxFQUFBQSxLQUFLLEVBQUUsQ0FMUztBQU1oQkMsRUFBQUEsR0FBRyxFQUFFLENBTlc7QUFPaEJDLEVBQUFBLEdBQUcsRUFBRSxDQVBXO0FBUWhCQyxFQUFBQSxNQUFNLEVBQUUsQ0FSUTtBQVNoQkMsRUFBQUEsT0FBTyxFQUFFO0FBVE8sQ0FBakI7O0FBWUEsU0FBU1osZUFBVCxDQUF5QmEsR0FBekIsRUFBNkI7QUFDNUIsTUFBSUMsS0FBSyxHQUFHRCxHQUFHLENBQUNFLEdBQUosQ0FBUUMsWUFBUixDQUFaOztBQUNBLE9BQUksSUFBSUMsQ0FBQyxHQUFHLENBQVosRUFBZUEsQ0FBQyxHQUFHSixHQUFHLENBQUNLLE1BQXZCLEVBQStCRCxDQUFDLEVBQWhDLEVBQW1D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QUNBO0FBQ0Q7O0FBQ0QsU0FBT0EsSUFBUDtBQUNBIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBzb3J0QnlQcm9jZWR1cmU7XG5cbi8qXG5cdHNvcnQgdGhlIHBhcnRzIG9mIHRoZSBwYXNzZWQgc2VsZWN0b3IsXG5cdGFzIHRoZXJlIGlzIHBvdGVudGlhbCBmb3Igb3B0aW1pemF0aW9uXG5cdChzb21lIHR5cGVzIG9mIHNlbGVjdG9ycyBhcmUgZmFzdGVyIHRoYW4gb3RoZXJzKVxuKi9cblxudmFyIHByb2NlZHVyZSA9IHJlcXVpcmUoXCIuL3Byb2NlZHVyZS5qc29uXCIpO1xuXG52YXIgYXR0cmlidXRlcyA9IHtcblx0X19wcm90b19fOiBudWxsLFxuXHRleGlzdHM6IDEwLFxuXHRlcXVhbHM6IDgsXG5cdG5vdDogNyxcblx0c3RhcnQ6IDYsXG5cdGVuZDogNixcblx0YW55OiA1LFxuXHRoeXBoZW46IDQsXG5cdGVsZW1lbnQ6IDRcbn07XG5cbmZ1bmN0aW9uIHNvcnRCeVByb2NlZHVyZShhcnIpe1xuXHR2YXIgcHJvY3MgPSBhcnIubWFwKGdldFByb2NlZHVyZSk7XG5cdGZvcih2YXIgaSA9IDE7IGkgPCBhcnIubGVuZ3RoOyBpKyspe1xuXHRcdHZhciBwcm9jTmV3ID0gcHJvY3NbaV07XG5cblx0XHRpZihwcm9jTmV3IDwgMCkgY29udGludWU7XG5cblx0XHRmb3IodmFyIGogPSBpIC0gMTsgaiA+PSAwICYmIHByb2NOZXcgPCBwcm9jc1tqXTsgai0tKXtcblx0XHRcdHZhciB0b2tlbiA9IGFycltqICsgMV07XG5cdFx0XHRhcnJbaiArIDFdID0gYXJyW2pdO1xuXHRcdFx0YXJyW2pdID0gdG9rZW47XG5cdFx0XHRwcm9jc1tqICsgMV0gPSBwcm9jc1tqXTtcblx0XHRcdHByb2NzW2pdID0gcHJvY05ldztcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gZ2V0UHJvY2VkdXJlKHRva2VuKXtcblx0dmFyIHByb2MgPSBwcm9jZWR1cmVbdG9rZW4udHlwZV07XG5cblx0aWYocHJvYyA9PT0gcHJvY2VkdXJlLmF0dHJpYnV0ZSl7XG5cdFx0cHJvYyA9IGF0dHJpYnV0ZXNbdG9rZW4uYWN0aW9uXTtcblxuXHRcdGlmKHByb2MgPT09IGF0dHJpYnV0ZXMuZXF1YWxzICYmIHRva2VuLm5hbWUgPT09IFwiaWRcIil7XG5cdFx0XHQvL3ByZWZlciBJRCBzZWxlY3RvcnMgKGVnLiAjSUQpXG5cdFx0XHRwcm9jID0gOTtcblx0XHR9XG5cblx0XHRpZih0b2tlbi5pZ25vcmVDYXNlKXtcblx0XHRcdC8vaWdub3JlQ2FzZSBhZGRzIHNvbWUgb3ZlcmhlYWQsIHByZWZlciBcIm5vcm1hbFwiIHRva2VuXG5cdFx0XHQvL3RoaXMgaXMgYSBiaW5hcnkgb3BlcmF0aW9uLCB0byBlbnN1cmUgaXQncyBzdGlsbCBhbiBpbnRcblx0XHRcdHByb2MgPj49IDE7XG5cdFx0fVxuXHR9IGVsc2UgaWYocHJvYyA9PT0gcHJvY2VkdXJlLnBzZXVkbyl7XG5cdFx0aWYoIXRva2VuLmRhdGEpe1xuXHRcdFx0cHJvYyA9IDM7XG5cdFx0fSBlbHNlIGlmKHRva2VuLm5hbWUgPT09IFwiaGFzXCIgfHwgdG9rZW4ubmFtZSA9PT0gXCJjb250YWluc1wiKXtcblx0XHRcdHByb2MgPSAwOyAvL2V4cGVuc2l2ZSBpbiBhbnkgY2FzZVxuXHRcdH0gZWxzZSBpZih0b2tlbi5uYW1lID09PSBcIm1hdGNoZXNcIiB8fCB0b2tlbi5uYW1lID09PSBcIm5vdFwiKXtcblx0XHRcdHByb2MgPSAwO1xuXHRcdFx0Zm9yKHZhciBpID0gMDsgaSA8IHRva2VuLmRhdGEubGVuZ3RoOyBpKyspe1xuXHRcdFx0XHQvL1RPRE8gYmV0dGVyIGhhbmRsaW5nIG9mIGNvbXBsZXggc2VsZWN0b3JzXG5cdFx0XHRcdGlmKHRva2VuLmRhdGFbaV0ubGVuZ3RoICE9PSAxKSBjb250aW51ZTtcblx0XHRcdFx0dmFyIGN1ciA9IGdldFByb2NlZHVyZSh0b2tlbi5kYXRhW2ldWzBdKTtcblx0XHRcdFx0Ly9hdm9pZCBleGVjdXRpbmcgOmhhcyBvciA6Y29udGFpbnNcblx0XHRcdFx0aWYoY3VyID09PSAwKXtcblx0XHRcdFx0XHRwcm9jID0gMDtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0XHRpZihjdXIgPiBwcm9jKSBwcm9jID0gY3VyO1xuXHRcdFx0fVxuXHRcdFx0aWYodG9rZW4uZGF0YS5sZW5ndGggPiAxICYmIHByb2MgPiAwKSBwcm9jIC09IDE7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHByb2MgPSAxO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gcHJvYztcbn1cbiJdfQ==