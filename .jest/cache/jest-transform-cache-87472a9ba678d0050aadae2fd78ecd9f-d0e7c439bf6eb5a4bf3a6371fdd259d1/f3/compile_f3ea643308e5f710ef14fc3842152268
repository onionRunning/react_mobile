e6116a1c807f04d07557467138e2029d
module.exports = compile;

var BaseFuncs = require("boolbase"),
    trueFunc = BaseFuncs.trueFunc,
    falseFunc = BaseFuncs.falseFunc;
/*
	returns a function that checks if an elements index matches the given rule
	highly optimized to return the fastest solution
*/


function compile(parsed) {
  var a = parsed[0],
      b = parsed[1] - 1; //when b <= 0, a*n won't be possible for any matches when a < 0
  //besides, the specification says that no element is matched when a and b are 0

  if (b < 0 && a <= 0) return falseFunc; //when a is in the range -1..1, it matches any element (so only b is checked)

  if (a === -1) return function (pos) {
    return pos <= b;
  };
  if (a === 0) return function (pos) {
    return pos === b;
  }; //when b <= 0 and a === 1, they match any element

  if (a === 1) return b < 0 ? trueFunc : function (pos) {
    return pos >= b;
  }; //when a > 0, modulo can be used to check if there is a match

  var bMod = b % a;
  if (bMod < 0) bMod += a;

  if (a > 1) {
    return function (pos) {
      return pos >= b && pos % a === bMod;
    };
  }

  a *= -1; //make `a` positive

  return function (pos) {
    return pos <= b && pos % a === bMod;
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBpbGUuanMiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImNvbXBpbGUiLCJCYXNlRnVuY3MiLCJyZXF1aXJlIiwidHJ1ZUZ1bmMiLCJmYWxzZUZ1bmMiLCJwYXJzZWQiLCJhIiwiYiIsInBvcyIsImJNb2QiXSwibWFwcGluZ3MiOiJBQUFBQSxNQUFNLENBQUNDLE9BQVAsR0FBaUJDLE9BQWpCOztBQUVBLElBQUlDLFNBQVMsR0FBR0MsT0FBTyxDQUFDLFVBQUQsQ0FBdkI7QUFBQSxJQUNJQyxRQUFRLEdBQUlGLFNBQVMsQ0FBQ0UsUUFEMUI7QUFBQSxJQUVJQyxTQUFTLEdBQUdILFNBQVMsQ0FBQ0csU0FGMUI7QUFJQTs7Ozs7O0FBSUEsU0FBU0osT0FBVCxDQUFpQkssTUFBakIsRUFBd0I7QUFDdkIsTUFBSUMsQ0FBQyxHQUFHRCxNQUFNLENBQUMsQ0FBRCxDQUFkO0FBQUEsTUFDSUUsQ0FBQyxHQUFHRixNQUFNLENBQUMsQ0FBRCxDQUFOLEdBQVksQ0FEcEIsQ0FEdUIsQ0FJdkI7QUFDQTs7QUFDQSxNQUFHRSxDQUFDLEdBQUcsQ0FBSixJQUFTRCxDQUFDLElBQUksQ0FBakIsRUFBb0IsT0FBT0YsU0FBUCxDQU5HLENBUXZCOztBQUNBLE1BQUdFLENBQUMsS0FBSSxDQUFDLENBQVQsRUFBWSxPQUFPLFVBQVNFLEdBQVQsRUFBYTtBQUFFLFdBQU9BLEdBQUcsSUFBSUQsQ0FBZDtBQUFrQixHQUF4QztBQUNaLE1BQUdELENBQUMsS0FBSyxDQUFULEVBQVksT0FBTyxVQUFTRSxHQUFULEVBQWE7QUFBRSxXQUFPQSxHQUFHLEtBQUtELENBQWY7QUFBbUIsR0FBekMsQ0FWVyxDQVd2Qjs7QUFDQSxNQUFHRCxDQUFDLEtBQUssQ0FBVCxFQUFZLE9BQU9DLENBQUMsR0FBRyxDQUFKLEdBQVFKLFFBQVIsR0FBbUIsVUFBU0ssR0FBVCxFQUFhO0FBQUUsV0FBT0EsR0FBRyxJQUFJRCxDQUFkO0FBQWtCLEdBQTNELENBWlcsQ0FjdkI7O0FBQ0EsTUFBSUUsSUFBSSxHQUFHRixDQUFDLEdBQUdELENBQWY7QUFDQSxNQUFHRyxJQUFJLEdBQUcsQ0FBVixFQUFhQSxJQUFJLElBQUlILENBQVI7O0FBRWIsTUFBR0EsQ0FBQyxHQUFHLENBQVAsRUFBUztBQUNSLFdBQU8sVUFBU0UsR0FBVCxFQUFhO0FBQ25CLGFBQU9BLEdBQUcsSUFBSUQsQ0FBUCxJQUFZQyxHQUFHLEdBQUdGLENBQU4sS0FBWUcsSUFBL0I7QUFDQSxLQUZEO0FBR0E7O0FBRURILEVBQUFBLENBQUMsSUFBSSxDQUFDLENBQU4sQ0F4QnVCLENBd0JkOztBQUVULFNBQU8sVUFBU0UsR0FBVCxFQUFhO0FBQ25CLFdBQU9BLEdBQUcsSUFBSUQsQ0FBUCxJQUFZQyxHQUFHLEdBQUdGLENBQU4sS0FBWUcsSUFBL0I7QUFDQSxHQUZEO0FBR0EiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGNvbXBpbGU7XG5cbnZhciBCYXNlRnVuY3MgPSByZXF1aXJlKFwiYm9vbGJhc2VcIiksXG4gICAgdHJ1ZUZ1bmMgID0gQmFzZUZ1bmNzLnRydWVGdW5jLFxuICAgIGZhbHNlRnVuYyA9IEJhc2VGdW5jcy5mYWxzZUZ1bmM7XG5cbi8qXG5cdHJldHVybnMgYSBmdW5jdGlvbiB0aGF0IGNoZWNrcyBpZiBhbiBlbGVtZW50cyBpbmRleCBtYXRjaGVzIHRoZSBnaXZlbiBydWxlXG5cdGhpZ2hseSBvcHRpbWl6ZWQgdG8gcmV0dXJuIHRoZSBmYXN0ZXN0IHNvbHV0aW9uXG4qL1xuZnVuY3Rpb24gY29tcGlsZShwYXJzZWQpe1xuXHR2YXIgYSA9IHBhcnNlZFswXSxcblx0ICAgIGIgPSBwYXJzZWRbMV0gLSAxO1xuXG5cdC8vd2hlbiBiIDw9IDAsIGEqbiB3b24ndCBiZSBwb3NzaWJsZSBmb3IgYW55IG1hdGNoZXMgd2hlbiBhIDwgMFxuXHQvL2Jlc2lkZXMsIHRoZSBzcGVjaWZpY2F0aW9uIHNheXMgdGhhdCBubyBlbGVtZW50IGlzIG1hdGNoZWQgd2hlbiBhIGFuZCBiIGFyZSAwXG5cdGlmKGIgPCAwICYmIGEgPD0gMCkgcmV0dXJuIGZhbHNlRnVuYztcblxuXHQvL3doZW4gYSBpcyBpbiB0aGUgcmFuZ2UgLTEuLjEsIGl0IG1hdGNoZXMgYW55IGVsZW1lbnQgKHNvIG9ubHkgYiBpcyBjaGVja2VkKVxuXHRpZihhID09PS0xKSByZXR1cm4gZnVuY3Rpb24ocG9zKXsgcmV0dXJuIHBvcyA8PSBiOyB9O1xuXHRpZihhID09PSAwKSByZXR1cm4gZnVuY3Rpb24ocG9zKXsgcmV0dXJuIHBvcyA9PT0gYjsgfTtcblx0Ly93aGVuIGIgPD0gMCBhbmQgYSA9PT0gMSwgdGhleSBtYXRjaCBhbnkgZWxlbWVudFxuXHRpZihhID09PSAxKSByZXR1cm4gYiA8IDAgPyB0cnVlRnVuYyA6IGZ1bmN0aW9uKHBvcyl7IHJldHVybiBwb3MgPj0gYjsgfTtcblxuXHQvL3doZW4gYSA+IDAsIG1vZHVsbyBjYW4gYmUgdXNlZCB0byBjaGVjayBpZiB0aGVyZSBpcyBhIG1hdGNoXG5cdHZhciBiTW9kID0gYiAlIGE7XG5cdGlmKGJNb2QgPCAwKSBiTW9kICs9IGE7XG5cblx0aWYoYSA+IDEpe1xuXHRcdHJldHVybiBmdW5jdGlvbihwb3Mpe1xuXHRcdFx0cmV0dXJuIHBvcyA+PSBiICYmIHBvcyAlIGEgPT09IGJNb2Q7XG5cdFx0fTtcblx0fVxuXG5cdGEgKj0gLTE7IC8vbWFrZSBgYWAgcG9zaXRpdmVcblxuXHRyZXR1cm4gZnVuY3Rpb24ocG9zKXtcblx0XHRyZXR1cm4gcG9zIDw9IGIgJiYgcG9zICUgYSA9PT0gYk1vZDtcblx0fTtcbn0iXX0=