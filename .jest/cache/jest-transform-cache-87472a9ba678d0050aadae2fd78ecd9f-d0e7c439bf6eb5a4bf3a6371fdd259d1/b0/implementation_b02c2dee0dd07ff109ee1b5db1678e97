fb2a0663276d129f7cb4c2c99fc3a44c
'use strict';
/* eslint no-invalid-this: 1 */

var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
var slice = Array.prototype.slice;
var toStr = Object.prototype.toString;
var funcType = '[object Function]';

module.exports = function bind(that) {
  var target = this;

  if (typeof target !== 'function' || toStr.call(target) !== funcType) {
    throw new TypeError(ERROR_MESSAGE + target);
  }

  var args = slice.call(arguments, 1);
  var bound;

  var binder = function () {
    if (this instanceof bound) {
      var result = target.apply(this, args.concat(slice.call(arguments)));

      if (Object(result) === result) {
        return result;
      }

      return this;
    } else {
      return target.apply(that, args.concat(slice.call(arguments)));
    }
  };

  var boundLength = Math.max(0, target.length - args.length);
  var boundArgs = [];

  for (var i = 0; i < boundLength; i++) {
    boundArgs.push('$' + i);
  }

  bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);

  if (target.prototype) {
    var Empty = function Empty() {};

    Empty.prototype = target.prototype;
    bound.prototype = new Empty();
    Empty.prototype = null;
  }

  return bound;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImltcGxlbWVudGF0aW9uLmpzIl0sIm5hbWVzIjpbIkVSUk9SX01FU1NBR0UiLCJzbGljZSIsIkFycmF5IiwicHJvdG90eXBlIiwidG9TdHIiLCJPYmplY3QiLCJ0b1N0cmluZyIsImZ1bmNUeXBlIiwibW9kdWxlIiwiZXhwb3J0cyIsImJpbmQiLCJ0aGF0IiwidGFyZ2V0IiwiY2FsbCIsIlR5cGVFcnJvciIsImFyZ3MiLCJhcmd1bWVudHMiLCJib3VuZCIsImJpbmRlciIsInJlc3VsdCIsImFwcGx5IiwiY29uY2F0IiwiYm91bmRMZW5ndGgiLCJNYXRoIiwibWF4IiwibGVuZ3RoIiwiYm91bmRBcmdzIiwiaSIsInB1c2giLCJGdW5jdGlvbiIsImpvaW4iLCJFbXB0eSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFFQTs7QUFFQSxJQUFJQSxhQUFhLEdBQUcsaURBQXBCO0FBQ0EsSUFBSUMsS0FBSyxHQUFHQyxLQUFLLENBQUNDLFNBQU4sQ0FBZ0JGLEtBQTVCO0FBQ0EsSUFBSUcsS0FBSyxHQUFHQyxNQUFNLENBQUNGLFNBQVAsQ0FBaUJHLFFBQTdCO0FBQ0EsSUFBSUMsUUFBUSxHQUFHLG1CQUFmOztBQUVBQyxNQUFNLENBQUNDLE9BQVAsR0FBaUIsU0FBU0MsSUFBVCxDQUFjQyxJQUFkLEVBQW9CO0FBQ2pDLE1BQUlDLE1BQU0sR0FBRyxJQUFiOztBQUNBLE1BQUksT0FBT0EsTUFBUCxLQUFrQixVQUFsQixJQUFnQ1IsS0FBSyxDQUFDUyxJQUFOLENBQVdELE1BQVgsTUFBdUJMLFFBQTNELEVBQXFFO0FBQ2pFLFVBQU0sSUFBSU8sU0FBSixDQUFjZCxhQUFhLEdBQUdZLE1BQTlCLENBQU47QUFDSDs7QUFDRCxNQUFJRyxJQUFJLEdBQUdkLEtBQUssQ0FBQ1ksSUFBTixDQUFXRyxTQUFYLEVBQXNCLENBQXRCLENBQVg7QUFFQSxNQUFJQyxLQUFKOztBQUNBLE1BQUlDLE1BQU0sR0FBRyxZQUFZO0FBQ3JCLFFBQUksZ0JBQWdCRCxLQUFwQixFQUEyQjtBQUN2QixVQUFJRSxNQUFNLEdBQUdQLE1BQU0sQ0FBQ1EsS0FBUCxDQUNULElBRFMsRUFFVEwsSUFBSSxDQUFDTSxNQUFMLENBQVlwQixLQUFLLENBQUNZLElBQU4sQ0FBV0csU0FBWCxDQUFaLENBRlMsQ0FBYjs7QUFJQSxVQUFJWCxNQUFNLENBQUNjLE1BQUQsQ0FBTixLQUFtQkEsTUFBdkIsRUFBK0I7QUFDM0IsZUFBT0EsTUFBUDtBQUNIOztBQUNELGFBQU8sSUFBUDtBQUNILEtBVEQsTUFTTztBQUNILGFBQU9QLE1BQU0sQ0FBQ1EsS0FBUCxDQUNIVCxJQURHLEVBRUhJLElBQUksQ0FBQ00sTUFBTCxDQUFZcEIsS0FBSyxDQUFDWSxJQUFOLENBQVdHLFNBQVgsQ0FBWixDQUZHLENBQVA7QUFJSDtBQUNKLEdBaEJEOztBQWtCQSxNQUFJTSxXQUFXLEdBQUdDLElBQUksQ0FBQ0MsR0FBTCxDQUFTLENBQVQsRUFBWVosTUFBTSxDQUFDYSxNQUFQLEdBQWdCVixJQUFJLENBQUNVLE1BQWpDLENBQWxCO0FBQ0EsTUFBSUMsU0FBUyxHQUFHLEVBQWhCOztBQUNBLE9BQUssSUFBSUMsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR0wsV0FBcEIsRUFBaUNLLENBQUMsRUFBbEMsRUFBc0M7QUFDbENELElBQUFBLFNBQVMsQ0FBQ0UsSUFBVixDQUFlLE1BQU1ELENBQXJCO0FBQ0g7O0FBRURWLEVBQUFBLEtBQUssR0FBR1ksUUFBUSxDQUFDLFFBQUQsRUFBVyxzQkFBc0JILFNBQVMsQ0FBQ0ksSUFBVixDQUFlLEdBQWYsQ0FBdEIsR0FBNEMsMkNBQXZELENBQVIsQ0FBNEdaLE1BQTVHLENBQVI7O0FBRUEsTUFBSU4sTUFBTSxDQUFDVCxTQUFYLEVBQXNCO0FBQ2xCLFFBQUk0QixLQUFLLEdBQUcsU0FBU0EsS0FBVCxHQUFpQixDQUFFLENBQS9COztBQUNBQSxJQUFBQSxLQUFLLENBQUM1QixTQUFOLEdBQWtCUyxNQUFNLENBQUNULFNBQXpCO0FBQ0FjLElBQUFBLEtBQUssQ0FBQ2QsU0FBTixHQUFrQixJQUFJNEIsS0FBSixFQUFsQjtBQUNBQSxJQUFBQSxLQUFLLENBQUM1QixTQUFOLEdBQWtCLElBQWxCO0FBQ0g7O0FBRUQsU0FBT2MsS0FBUDtBQUNILENBMUNEIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vKiBlc2xpbnQgbm8taW52YWxpZC10aGlzOiAxICovXG5cbnZhciBFUlJPUl9NRVNTQUdFID0gJ0Z1bmN0aW9uLnByb3RvdHlwZS5iaW5kIGNhbGxlZCBvbiBpbmNvbXBhdGlibGUgJztcbnZhciBzbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcbnZhciB0b1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgZnVuY1R5cGUgPSAnW29iamVjdCBGdW5jdGlvbl0nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJpbmQodGhhdCkge1xuICAgIHZhciB0YXJnZXQgPSB0aGlzO1xuICAgIGlmICh0eXBlb2YgdGFyZ2V0ICE9PSAnZnVuY3Rpb24nIHx8IHRvU3RyLmNhbGwodGFyZ2V0KSAhPT0gZnVuY1R5cGUpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihFUlJPUl9NRVNTQUdFICsgdGFyZ2V0KTtcbiAgICB9XG4gICAgdmFyIGFyZ3MgPSBzbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG5cbiAgICB2YXIgYm91bmQ7XG4gICAgdmFyIGJpbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMgaW5zdGFuY2VvZiBib3VuZCkge1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHRhcmdldC5hcHBseShcbiAgICAgICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgICAgIGFyZ3MuY29uY2F0KHNsaWNlLmNhbGwoYXJndW1lbnRzKSlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBpZiAoT2JqZWN0KHJlc3VsdCkgPT09IHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0YXJnZXQuYXBwbHkoXG4gICAgICAgICAgICAgICAgdGhhdCxcbiAgICAgICAgICAgICAgICBhcmdzLmNvbmNhdChzbGljZS5jYWxsKGFyZ3VtZW50cykpXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHZhciBib3VuZExlbmd0aCA9IE1hdGgubWF4KDAsIHRhcmdldC5sZW5ndGggLSBhcmdzLmxlbmd0aCk7XG4gICAgdmFyIGJvdW5kQXJncyA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYm91bmRMZW5ndGg7IGkrKykge1xuICAgICAgICBib3VuZEFyZ3MucHVzaCgnJCcgKyBpKTtcbiAgICB9XG5cbiAgICBib3VuZCA9IEZ1bmN0aW9uKCdiaW5kZXInLCAncmV0dXJuIGZ1bmN0aW9uICgnICsgYm91bmRBcmdzLmpvaW4oJywnKSArICcpeyByZXR1cm4gYmluZGVyLmFwcGx5KHRoaXMsYXJndW1lbnRzKTsgfScpKGJpbmRlcik7XG5cbiAgICBpZiAodGFyZ2V0LnByb3RvdHlwZSkge1xuICAgICAgICB2YXIgRW1wdHkgPSBmdW5jdGlvbiBFbXB0eSgpIHt9O1xuICAgICAgICBFbXB0eS5wcm90b3R5cGUgPSB0YXJnZXQucHJvdG90eXBlO1xuICAgICAgICBib3VuZC5wcm90b3R5cGUgPSBuZXcgRW1wdHkoKTtcbiAgICAgICAgRW1wdHkucHJvdG90eXBlID0gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gYm91bmQ7XG59O1xuIl19