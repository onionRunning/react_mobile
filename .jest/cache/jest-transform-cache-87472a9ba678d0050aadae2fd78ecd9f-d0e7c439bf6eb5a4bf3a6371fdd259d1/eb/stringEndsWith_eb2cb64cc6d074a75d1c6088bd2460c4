fa652498e15fb4a42a1bc7f19ec1c87d
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = stringEndsWithValidator;

var _propTypes = require("prop-types");

var _wrapValidator = _interopRequireDefault(require("./helpers/wrapValidator"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function stringEndsWithValidator(end) {
  if (typeof end !== 'string' || end.length === 0) {
    throw new TypeError('a non-empty string is required');
  }

  var validator = function stringEndsWith(props, propName, componentName) {
    var propValue = props[propName];

    if (propValue == null) {
      return null;
    }

    for (var _len = arguments.length, rest = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
      rest[_key - 3] = arguments[_key];
    }

    var stringError = _propTypes.string.apply(void 0, [props, propName, componentName].concat(rest));

    if (stringError) {
      return stringError;
    }

    if (!propValue.endsWith(end) || propValue.length <= end.length) {
      return new TypeError("".concat(componentName, ": ").concat(propName, " does not end with \"").concat(end, "\""));
    }

    return null;
  };

  validator.isRequired = function requiredStringEndsWith() {
    var stringError = _propTypes.string.isRequired.apply(_propTypes.string, arguments);

    if (stringError) {
      return stringError;
    }

    return validator.apply(void 0, arguments);
  };

  return (0, _wrapValidator["default"])(validator, "stringEndsWith: ".concat(end));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9zdHJpbmdFbmRzV2l0aC5qcyJdLCJuYW1lcyI6WyJlbmQiLCJ2YWxpZGF0b3IiLCJyZXN0IiwicHJvcFZhbHVlIiwicHJvcHMiLCJzdHJpbmdFcnJvciIsInN0cmluZyJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLElBQUEsVUFBQSxHQUFBLE9BQUEsQ0FBQSxZQUFBLENBQUE7O0FBQ0EsSUFBQSxjQUFBLEdBQUEsc0JBQUEsQ0FBQSxPQUFBLENBQUEseUJBQUEsQ0FBQSxDQUFBOzs7Ozs7OztBQUVlLFNBQUEsdUJBQUEsQ0FBQSxHQUFBLEVBQXNDO0FBQ25ELE1BQUksT0FBQSxHQUFBLEtBQUEsUUFBQSxJQUEyQkEsR0FBRyxDQUFIQSxNQUFBQSxLQUEvQixDQUFBLEVBQWlEO0FBQy9DLFVBQU0sSUFBQSxTQUFBLENBQU4sZ0NBQU0sQ0FBTjtBQUNEOztBQUVELE1BQU1DLFNBQVMsR0FBRyxTQUFBLGNBQUEsQ0FBQSxLQUFBLEVBQUEsUUFBQSxFQUFBLGFBQUEsRUFBaUU7QUFBQSxRQUM3REUsU0FENkQsR0FDL0NDLEtBRCtDLENBQUEsUUFBQSxDQUFBOztBQUdqRixRQUFJRCxTQUFTLElBQWIsSUFBQSxFQUF1QjtBQUNyQixhQUFBLElBQUE7QUFDRDs7QUFMZ0YsU0FBQSxJQUFBLElBQUEsR0FBQSxTQUFBLENBQUEsTUFBQSxFQUFORCxJQUFNLEdBQUEsSUFBQSxLQUFBLENBQUEsSUFBQSxHQUFBLENBQUEsR0FBQSxJQUFBLEdBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQSxFQUFBLElBQUEsR0FBQSxDQUFBLEVBQUEsSUFBQSxHQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsRUFBQTtBQUFOQSxNQUFBQSxJQUFNLENBQUEsSUFBQSxHQUFBLENBQUEsQ0FBTkEsR0FBTSxTQUFBLENBQUEsSUFBQSxDQUFOQTtBQUFNOztBQU9qRixRQUFNRyxXQUFXLEdBQUdDLFVBQUFBLENBQUFBLE1BQUFBLENBQUFBLEtBQUFBLENBQUFBLEtBQUFBLENBQUFBLEVBQUFBLENBQUFBLEtBQUFBLEVBQUFBLFFBQUFBLEVBQUFBLGFBQUFBLEVBQUFBLE1BQUFBLENBQXBCLElBQW9CQSxDQUFBQSxDQUFwQjs7QUFDQSxRQUFBLFdBQUEsRUFBaUI7QUFDZixhQUFBLFdBQUE7QUFDRDs7QUFFRCxRQUFJLENBQUNILFNBQVMsQ0FBVEEsUUFBQUEsQ0FBRCxHQUFDQSxDQUFELElBQTRCQSxTQUFTLENBQVRBLE1BQUFBLElBQW9CSCxHQUFHLENBQXZELE1BQUEsRUFBZ0U7QUFDOUQsYUFBTyxJQUFBLFNBQUEsQ0FBQSxHQUFBLE1BQUEsQ0FBQSxhQUFBLEVBQUEsSUFBQSxFQUFBLE1BQUEsQ0FBQSxRQUFBLEVBQUEsdUJBQUEsRUFBQSxNQUFBLENBQUEsR0FBQSxFQUFQLElBQU8sQ0FBQSxDQUFQO0FBQ0Q7O0FBQ0QsV0FBQSxJQUFBO0FBZkYsR0FBQTs7QUFrQkFDLEVBQUFBLFNBQVMsQ0FBVEEsVUFBQUEsR0FBdUIsU0FBQSxzQkFBQSxHQUF5QztBQUM5RCxRQUFNSSxXQUFXLEdBQUdDLFVBQUFBLENBQUFBLE1BQUFBLENBQUFBLFVBQUFBLENBQUFBLEtBQUFBLENBQUFBLFVBQUFBLENBQUFBLE1BQUFBLEVBQXBCLFNBQW9CQSxDQUFwQjs7QUFDQSxRQUFBLFdBQUEsRUFBaUI7QUFDZixhQUFBLFdBQUE7QUFDRDs7QUFDRCxXQUFPTCxTQUFTLENBQVRBLEtBQUFBLENBQUFBLEtBQUFBLENBQUFBLEVBQVAsU0FBT0EsQ0FBUDtBQUxGQSxHQUFBQTs7QUFRQSxTQUFPLENBQUEsR0FBQSxjQUFBLENBQUEsU0FBQSxDQUFBLEVBQUEsU0FBQSxFQUFBLG1CQUFBLE1BQUEsQ0FBUCxHQUFPLENBQUEsQ0FBUDtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgc3RyaW5nIH0gZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgd3JhcFZhbGlkYXRvciBmcm9tICcuL2hlbHBlcnMvd3JhcFZhbGlkYXRvcic7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN0cmluZ0VuZHNXaXRoVmFsaWRhdG9yKGVuZCkge1xuICBpZiAodHlwZW9mIGVuZCAhPT0gJ3N0cmluZycgfHwgZW5kLmxlbmd0aCA9PT0gMCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2Egbm9uLWVtcHR5IHN0cmluZyBpcyByZXF1aXJlZCcpO1xuICB9XG5cbiAgY29uc3QgdmFsaWRhdG9yID0gZnVuY3Rpb24gc3RyaW5nRW5kc1dpdGgocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCAuLi5yZXN0KSB7XG4gICAgY29uc3QgeyBbcHJvcE5hbWVdOiBwcm9wVmFsdWUgfSA9IHByb3BzO1xuXG4gICAgaWYgKHByb3BWYWx1ZSA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBjb25zdCBzdHJpbmdFcnJvciA9IHN0cmluZyhwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIC4uLnJlc3QpO1xuICAgIGlmIChzdHJpbmdFcnJvcikge1xuICAgICAgcmV0dXJuIHN0cmluZ0Vycm9yO1xuICAgIH1cblxuICAgIGlmICghcHJvcFZhbHVlLmVuZHNXaXRoKGVuZCkgfHwgcHJvcFZhbHVlLmxlbmd0aCA8PSBlbmQubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gbmV3IFR5cGVFcnJvcihgJHtjb21wb25lbnROYW1lfTogJHtwcm9wTmFtZX0gZG9lcyBub3QgZW5kIHdpdGggXCIke2VuZH1cImApO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICB2YWxpZGF0b3IuaXNSZXF1aXJlZCA9IGZ1bmN0aW9uIHJlcXVpcmVkU3RyaW5nRW5kc1dpdGgoLi4uYXJncykge1xuICAgIGNvbnN0IHN0cmluZ0Vycm9yID0gc3RyaW5nLmlzUmVxdWlyZWQoLi4uYXJncyk7XG4gICAgaWYgKHN0cmluZ0Vycm9yKSB7XG4gICAgICByZXR1cm4gc3RyaW5nRXJyb3I7XG4gICAgfVxuICAgIHJldHVybiB2YWxpZGF0b3IoLi4uYXJncyk7XG4gIH07XG5cbiAgcmV0dXJuIHdyYXBWYWxpZGF0b3IodmFsaWRhdG9yLCBgc3RyaW5nRW5kc1dpdGg6ICR7ZW5kfWApO1xufVxuIl19