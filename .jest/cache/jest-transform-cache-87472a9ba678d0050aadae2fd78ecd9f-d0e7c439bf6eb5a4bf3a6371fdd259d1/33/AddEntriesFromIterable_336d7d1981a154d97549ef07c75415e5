2d1f9fcdef5e891dcd3ea406190786d1
'use strict';

var inspect = require('object-inspect');

var GetIntrinsic = require('../GetIntrinsic');

var $TypeError = GetIntrinsic('%TypeError%');

var Call = require('./Call');

var Get = require('./Get');

var GetIterator = require('./GetIterator');

var IsCallable = require('./IsCallable');

var IteratorClose = require('./IteratorClose');

var IteratorStep = require('./IteratorStep');

var IteratorValue = require('./IteratorValue');

var Type = require('./Type'); // https://tc39.es/ecma262/#sec-add-entries-from-iterable


module.exports = function AddEntriesFromIterable(target, iterable, adder) {
  if (!IsCallable(adder)) {
    throw new $TypeError('Assertion failed: `adder` is not callable');
  }

  if (iterable == null) {
    throw new $TypeError('Assertion failed: `iterable` is present, and not nullish');
  }

  var iteratorRecord = GetIterator(iterable);

  while (true) {
    // eslint-disable-line no-constant-condition
    var next = IteratorStep(iteratorRecord);

    if (!next) {
      return target;
    }

    var nextItem = IteratorValue(next);

    if (Type(nextItem) !== 'Object') {
      var error = new $TypeError('iterator next must return an Object, got ' + inspect(nextItem));
      return IteratorClose(iteratorRecord, function () {
        throw error;
      } // eslint-disable-line no-loop-func
      );
    }

    try {
      var k = Get(nextItem, '0');
      var v = Get(nextItem, '1');
      Call(adder, target, [k, v]);
    } catch (e) {
      return IteratorClose(iteratorRecord, function () {
        throw e;
      });
    }
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkFkZEVudHJpZXNGcm9tSXRlcmFibGUuanMiXSwibmFtZXMiOlsiaW5zcGVjdCIsInJlcXVpcmUiLCJHZXRJbnRyaW5zaWMiLCIkVHlwZUVycm9yIiwiQ2FsbCIsIkdldCIsIkdldEl0ZXJhdG9yIiwiSXNDYWxsYWJsZSIsIkl0ZXJhdG9yQ2xvc2UiLCJJdGVyYXRvclN0ZXAiLCJJdGVyYXRvclZhbHVlIiwiVHlwZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJBZGRFbnRyaWVzRnJvbUl0ZXJhYmxlIiwidGFyZ2V0IiwiaXRlcmFibGUiLCJhZGRlciIsIml0ZXJhdG9yUmVjb3JkIiwibmV4dCIsIm5leHRJdGVtIiwiZXJyb3IiLCJrIiwidiIsImUiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQUlBLE9BQU8sR0FBR0MsT0FBTyxDQUFDLGdCQUFELENBQXJCOztBQUVBLElBQUlDLFlBQVksR0FBR0QsT0FBTyxDQUFDLGlCQUFELENBQTFCOztBQUVBLElBQUlFLFVBQVUsR0FBR0QsWUFBWSxDQUFDLGFBQUQsQ0FBN0I7O0FBRUEsSUFBSUUsSUFBSSxHQUFHSCxPQUFPLENBQUMsUUFBRCxDQUFsQjs7QUFDQSxJQUFJSSxHQUFHLEdBQUdKLE9BQU8sQ0FBQyxPQUFELENBQWpCOztBQUNBLElBQUlLLFdBQVcsR0FBR0wsT0FBTyxDQUFDLGVBQUQsQ0FBekI7O0FBQ0EsSUFBSU0sVUFBVSxHQUFHTixPQUFPLENBQUMsY0FBRCxDQUF4Qjs7QUFDQSxJQUFJTyxhQUFhLEdBQUdQLE9BQU8sQ0FBQyxpQkFBRCxDQUEzQjs7QUFDQSxJQUFJUSxZQUFZLEdBQUdSLE9BQU8sQ0FBQyxnQkFBRCxDQUExQjs7QUFDQSxJQUFJUyxhQUFhLEdBQUdULE9BQU8sQ0FBQyxpQkFBRCxDQUEzQjs7QUFDQSxJQUFJVSxJQUFJLEdBQUdWLE9BQU8sQ0FBQyxRQUFELENBQWxCLEMsQ0FFQTs7O0FBRUFXLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixTQUFTQyxzQkFBVCxDQUFnQ0MsTUFBaEMsRUFBd0NDLFFBQXhDLEVBQWtEQyxLQUFsRCxFQUF5RDtBQUN6RSxNQUFJLENBQUNWLFVBQVUsQ0FBQ1UsS0FBRCxDQUFmLEVBQXdCO0FBQ3ZCLFVBQU0sSUFBSWQsVUFBSixDQUFlLDJDQUFmLENBQU47QUFDQTs7QUFDRCxNQUFJYSxRQUFRLElBQUksSUFBaEIsRUFBc0I7QUFDckIsVUFBTSxJQUFJYixVQUFKLENBQWUsMERBQWYsQ0FBTjtBQUNBOztBQUNELE1BQUllLGNBQWMsR0FBR1osV0FBVyxDQUFDVSxRQUFELENBQWhDOztBQUNBLFNBQU8sSUFBUCxFQUFhO0FBQUU7QUFDZCxRQUFJRyxJQUFJLEdBQUdWLFlBQVksQ0FBQ1MsY0FBRCxDQUF2Qjs7QUFDQSxRQUFJLENBQUNDLElBQUwsRUFBVztBQUNWLGFBQU9KLE1BQVA7QUFDQTs7QUFDRCxRQUFJSyxRQUFRLEdBQUdWLGFBQWEsQ0FBQ1MsSUFBRCxDQUE1Qjs7QUFDQSxRQUFJUixJQUFJLENBQUNTLFFBQUQsQ0FBSixLQUFtQixRQUF2QixFQUFpQztBQUNoQyxVQUFJQyxLQUFLLEdBQUcsSUFBSWxCLFVBQUosQ0FBZSw4Q0FBOENILE9BQU8sQ0FBQ29CLFFBQUQsQ0FBcEUsQ0FBWjtBQUNBLGFBQU9aLGFBQWEsQ0FDbkJVLGNBRG1CLEVBRW5CLFlBQVk7QUFBRSxjQUFNRyxLQUFOO0FBQWMsT0FGVCxDQUVVO0FBRlYsT0FBcEI7QUFJQTs7QUFDRCxRQUFJO0FBQ0gsVUFBSUMsQ0FBQyxHQUFHakIsR0FBRyxDQUFDZSxRQUFELEVBQVcsR0FBWCxDQUFYO0FBQ0EsVUFBSUcsQ0FBQyxHQUFHbEIsR0FBRyxDQUFDZSxRQUFELEVBQVcsR0FBWCxDQUFYO0FBQ0FoQixNQUFBQSxJQUFJLENBQUNhLEtBQUQsRUFBUUYsTUFBUixFQUFnQixDQUFDTyxDQUFELEVBQUlDLENBQUosQ0FBaEIsQ0FBSjtBQUNBLEtBSkQsQ0FJRSxPQUFPQyxDQUFQLEVBQVU7QUFDWCxhQUFPaEIsYUFBYSxDQUNuQlUsY0FEbUIsRUFFbkIsWUFBWTtBQUFFLGNBQU1NLENBQU47QUFBVSxPQUZMLENBQXBCO0FBSUE7QUFDRDtBQUNELENBaENEIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW5zcGVjdCA9IHJlcXVpcmUoJ29iamVjdC1pbnNwZWN0Jyk7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCcuLi9HZXRJbnRyaW5zaWMnKTtcblxudmFyICRUeXBlRXJyb3IgPSBHZXRJbnRyaW5zaWMoJyVUeXBlRXJyb3IlJyk7XG5cbnZhciBDYWxsID0gcmVxdWlyZSgnLi9DYWxsJyk7XG52YXIgR2V0ID0gcmVxdWlyZSgnLi9HZXQnKTtcbnZhciBHZXRJdGVyYXRvciA9IHJlcXVpcmUoJy4vR2V0SXRlcmF0b3InKTtcbnZhciBJc0NhbGxhYmxlID0gcmVxdWlyZSgnLi9Jc0NhbGxhYmxlJyk7XG52YXIgSXRlcmF0b3JDbG9zZSA9IHJlcXVpcmUoJy4vSXRlcmF0b3JDbG9zZScpO1xudmFyIEl0ZXJhdG9yU3RlcCA9IHJlcXVpcmUoJy4vSXRlcmF0b3JTdGVwJyk7XG52YXIgSXRlcmF0b3JWYWx1ZSA9IHJlcXVpcmUoJy4vSXRlcmF0b3JWYWx1ZScpO1xudmFyIFR5cGUgPSByZXF1aXJlKCcuL1R5cGUnKTtcblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hZGQtZW50cmllcy1mcm9tLWl0ZXJhYmxlXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gQWRkRW50cmllc0Zyb21JdGVyYWJsZSh0YXJnZXQsIGl0ZXJhYmxlLCBhZGRlcikge1xuXHRpZiAoIUlzQ2FsbGFibGUoYWRkZXIpKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0Fzc2VydGlvbiBmYWlsZWQ6IGBhZGRlcmAgaXMgbm90IGNhbGxhYmxlJyk7XG5cdH1cblx0aWYgKGl0ZXJhYmxlID09IG51bGwpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignQXNzZXJ0aW9uIGZhaWxlZDogYGl0ZXJhYmxlYCBpcyBwcmVzZW50LCBhbmQgbm90IG51bGxpc2gnKTtcblx0fVxuXHR2YXIgaXRlcmF0b3JSZWNvcmQgPSBHZXRJdGVyYXRvcihpdGVyYWJsZSk7XG5cdHdoaWxlICh0cnVlKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc3RhbnQtY29uZGl0aW9uXG5cdFx0dmFyIG5leHQgPSBJdGVyYXRvclN0ZXAoaXRlcmF0b3JSZWNvcmQpO1xuXHRcdGlmICghbmV4dCkge1xuXHRcdFx0cmV0dXJuIHRhcmdldDtcblx0XHR9XG5cdFx0dmFyIG5leHRJdGVtID0gSXRlcmF0b3JWYWx1ZShuZXh0KTtcblx0XHRpZiAoVHlwZShuZXh0SXRlbSkgIT09ICdPYmplY3QnKSB7XG5cdFx0XHR2YXIgZXJyb3IgPSBuZXcgJFR5cGVFcnJvcignaXRlcmF0b3IgbmV4dCBtdXN0IHJldHVybiBhbiBPYmplY3QsIGdvdCAnICsgaW5zcGVjdChuZXh0SXRlbSkpO1xuXHRcdFx0cmV0dXJuIEl0ZXJhdG9yQ2xvc2UoXG5cdFx0XHRcdGl0ZXJhdG9yUmVjb3JkLFxuXHRcdFx0XHRmdW5jdGlvbiAoKSB7IHRocm93IGVycm9yOyB9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbG9vcC1mdW5jXG5cdFx0XHQpO1xuXHRcdH1cblx0XHR0cnkge1xuXHRcdFx0dmFyIGsgPSBHZXQobmV4dEl0ZW0sICcwJyk7XG5cdFx0XHR2YXIgdiA9IEdldChuZXh0SXRlbSwgJzEnKTtcblx0XHRcdENhbGwoYWRkZXIsIHRhcmdldCwgW2ssIHZdKTtcblx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRyZXR1cm4gSXRlcmF0b3JDbG9zZShcblx0XHRcdFx0aXRlcmF0b3JSZWNvcmQsXG5cdFx0XHRcdGZ1bmN0aW9uICgpIHsgdGhyb3cgZTsgfVxuXHRcdFx0KTtcblx0XHR9XG5cdH1cbn07XG4iXX0=