{"version":3,"sources":["../src/mutuallyExclusiveProps.js"],"names":["exclusiveProps","propList","map","countProps","count","validator","rest","exclusivePropCount","props","propType","prop"],"mappings":"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","sourcesContent":["import wrapValidator from './helpers/wrapValidator';\n\nexport default function mutuallyExclusiveOfType(propType, ...exclusiveProps) {\n  if (typeof propType !== 'function') {\n    throw new TypeError('a propType is required');\n  }\n\n  if (exclusiveProps.length < 1) {\n    throw new TypeError('at least one prop that is mutually exclusive with this propType is required');\n  }\n\n  const propList = exclusiveProps.join(', or ');\n\n  const map = exclusiveProps.reduce((acc, prop) => ({ ...acc, [prop]: true }), {});\n  const countProps = (count, prop) => (count + (map[prop] ? 1 : 0));\n\n  const validator = function mutuallyExclusiveProps(props, propName, componentName, ...rest) {\n    const exclusivePropCount = Object.keys(props)\n      .filter((prop) => props[prop] != null)\n      .reduce(countProps, 0);\n    if (exclusivePropCount > 1) {\n      return new Error(`A ${componentName} cannot have more than one of these props: ${propList}`);\n    }\n    return propType(props, propName, componentName, ...rest);\n  };\n\n  validator.isRequired = function mutuallyExclusivePropsRequired(\n    props,\n    propName,\n    componentName,\n    ...rest\n  ) {\n    const exclusivePropCount = Object.keys(props)\n      .filter((prop) => prop === propName || props[prop] != null)\n      .reduce(countProps, 0);\n    if (exclusivePropCount > 1) {\n      return new Error(`A ${componentName} cannot have more than one of these props: ${propList}`);\n    }\n    return propType(props, propName, componentName, ...rest);\n  };\n\n  return wrapValidator(validator, `mutuallyExclusiveProps:${propList}`, exclusiveProps);\n}\n"]}