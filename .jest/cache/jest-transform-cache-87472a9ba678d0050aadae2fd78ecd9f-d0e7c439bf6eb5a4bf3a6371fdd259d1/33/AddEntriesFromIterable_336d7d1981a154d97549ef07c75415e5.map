{"version":3,"sources":["AddEntriesFromIterable.js"],"names":["inspect","require","GetIntrinsic","$TypeError","Call","Get","GetIterator","IsCallable","IteratorClose","IteratorStep","IteratorValue","Type","module","exports","AddEntriesFromIterable","target","iterable","adder","iteratorRecord","next","nextItem","error","k","v","e"],"mappings":"AAAA;;AAEA,IAAIA,OAAO,GAAGC,OAAO,CAAC,gBAAD,CAArB;;AAEA,IAAIC,YAAY,GAAGD,OAAO,CAAC,iBAAD,CAA1B;;AAEA,IAAIE,UAAU,GAAGD,YAAY,CAAC,aAAD,CAA7B;;AAEA,IAAIE,IAAI,GAAGH,OAAO,CAAC,QAAD,CAAlB;;AACA,IAAII,GAAG,GAAGJ,OAAO,CAAC,OAAD,CAAjB;;AACA,IAAIK,WAAW,GAAGL,OAAO,CAAC,eAAD,CAAzB;;AACA,IAAIM,UAAU,GAAGN,OAAO,CAAC,cAAD,CAAxB;;AACA,IAAIO,aAAa,GAAGP,OAAO,CAAC,iBAAD,CAA3B;;AACA,IAAIQ,YAAY,GAAGR,OAAO,CAAC,gBAAD,CAA1B;;AACA,IAAIS,aAAa,GAAGT,OAAO,CAAC,iBAAD,CAA3B;;AACA,IAAIU,IAAI,GAAGV,OAAO,CAAC,QAAD,CAAlB,C,CAEA;;;AAEAW,MAAM,CAACC,OAAP,GAAiB,SAASC,sBAAT,CAAgCC,MAAhC,EAAwCC,QAAxC,EAAkDC,KAAlD,EAAyD;AACzE,MAAI,CAACV,UAAU,CAACU,KAAD,CAAf,EAAwB;AACvB,UAAM,IAAId,UAAJ,CAAe,2CAAf,CAAN;AACA;;AACD,MAAIa,QAAQ,IAAI,IAAhB,EAAsB;AACrB,UAAM,IAAIb,UAAJ,CAAe,0DAAf,CAAN;AACA;;AACD,MAAIe,cAAc,GAAGZ,WAAW,CAACU,QAAD,CAAhC;;AACA,SAAO,IAAP,EAAa;AAAE;AACd,QAAIG,IAAI,GAAGV,YAAY,CAACS,cAAD,CAAvB;;AACA,QAAI,CAACC,IAAL,EAAW;AACV,aAAOJ,MAAP;AACA;;AACD,QAAIK,QAAQ,GAAGV,aAAa,CAACS,IAAD,CAA5B;;AACA,QAAIR,IAAI,CAACS,QAAD,CAAJ,KAAmB,QAAvB,EAAiC;AAChC,UAAIC,KAAK,GAAG,IAAIlB,UAAJ,CAAe,8CAA8CH,OAAO,CAACoB,QAAD,CAApE,CAAZ;AACA,aAAOZ,aAAa,CACnBU,cADmB,EAEnB,YAAY;AAAE,cAAMG,KAAN;AAAc,OAFT,CAEU;AAFV,OAApB;AAIA;;AACD,QAAI;AACH,UAAIC,CAAC,GAAGjB,GAAG,CAACe,QAAD,EAAW,GAAX,CAAX;AACA,UAAIG,CAAC,GAAGlB,GAAG,CAACe,QAAD,EAAW,GAAX,CAAX;AACAhB,MAAAA,IAAI,CAACa,KAAD,EAAQF,MAAR,EAAgB,CAACO,CAAD,EAAIC,CAAJ,CAAhB,CAAJ;AACA,KAJD,CAIE,OAAOC,CAAP,EAAU;AACX,aAAOhB,aAAa,CACnBU,cADmB,EAEnB,YAAY;AAAE,cAAMM,CAAN;AAAU,OAFL,CAApB;AAIA;AACD;AACD,CAhCD","sourcesContent":["'use strict';\n\nvar inspect = require('object-inspect');\n\nvar GetIntrinsic = require('../GetIntrinsic');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar Call = require('./Call');\nvar Get = require('./Get');\nvar GetIterator = require('./GetIterator');\nvar IsCallable = require('./IsCallable');\nvar IteratorClose = require('./IteratorClose');\nvar IteratorStep = require('./IteratorStep');\nvar IteratorValue = require('./IteratorValue');\nvar Type = require('./Type');\n\n// https://tc39.es/ecma262/#sec-add-entries-from-iterable\n\nmodule.exports = function AddEntriesFromIterable(target, iterable, adder) {\n\tif (!IsCallable(adder)) {\n\t\tthrow new $TypeError('Assertion failed: `adder` is not callable');\n\t}\n\tif (iterable == null) {\n\t\tthrow new $TypeError('Assertion failed: `iterable` is present, and not nullish');\n\t}\n\tvar iteratorRecord = GetIterator(iterable);\n\twhile (true) { // eslint-disable-line no-constant-condition\n\t\tvar next = IteratorStep(iteratorRecord);\n\t\tif (!next) {\n\t\t\treturn target;\n\t\t}\n\t\tvar nextItem = IteratorValue(next);\n\t\tif (Type(nextItem) !== 'Object') {\n\t\t\tvar error = new $TypeError('iterator next must return an Object, got ' + inspect(nextItem));\n\t\t\treturn IteratorClose(\n\t\t\t\titeratorRecord,\n\t\t\t\tfunction () { throw error; } // eslint-disable-line no-loop-func\n\t\t\t);\n\t\t}\n\t\ttry {\n\t\t\tvar k = Get(nextItem, '0');\n\t\t\tvar v = Get(nextItem, '1');\n\t\t\tCall(adder, target, [k, v]);\n\t\t} catch (e) {\n\t\t\treturn IteratorClose(\n\t\t\t\titeratorRecord,\n\t\t\t\tfunction () { throw e; }\n\t\t\t);\n\t\t}\n\t}\n};\n"]}