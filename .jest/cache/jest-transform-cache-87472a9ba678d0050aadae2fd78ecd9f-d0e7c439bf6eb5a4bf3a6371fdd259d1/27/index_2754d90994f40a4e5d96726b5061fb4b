dd0e2481544d590ac4d5b7a37e087dea
'use strict';

var defaultTreeAdapter = require('../tree_adapters/default'),
    mergeOptions = require('../utils/merge_options'),
    doctype = require('../common/doctype'),
    HTML = require('../common/html'); //Aliases


var $ = HTML.TAG_NAMES,
    NS = HTML.NAMESPACES; //Default serializer options

var DEFAULT_OPTIONS = {
  treeAdapter: defaultTreeAdapter
}; //Escaping regexes

var AMP_REGEX = /&/g,
    NBSP_REGEX = /\u00a0/g,
    DOUBLE_QUOTE_REGEX = /"/g,
    LT_REGEX = /</g,
    GT_REGEX = />/g; //Serializer

var Serializer = module.exports = function (node, options) {
  this.options = mergeOptions(DEFAULT_OPTIONS, options);
  this.treeAdapter = this.options.treeAdapter;
  this.html = '';
  this.startNode = node;
}; // NOTE: exported as static method for the testing purposes


Serializer.escapeString = function (str, attrMode) {
  str = str.replace(AMP_REGEX, '&amp;').replace(NBSP_REGEX, '&nbsp;');
  if (attrMode) str = str.replace(DOUBLE_QUOTE_REGEX, '&quot;');else {
    str = str.replace(LT_REGEX, '&lt;').replace(GT_REGEX, '&gt;');
  }
  return str;
}; //API


Serializer.prototype.serialize = function () {
  this._serializeChildNodes(this.startNode);

  return this.html;
}; //Internals


Serializer.prototype._serializeChildNodes = function (parentNode) {
  var childNodes = this.treeAdapter.getChildNodes(parentNode);

  if (childNodes) {
    for (var i = 0, cnLength = childNodes.length; i < cnLength; i++) {
      var currentNode = childNodes[i];
      if (this.treeAdapter.isElementNode(currentNode)) this._serializeElement(currentNode);else if (this.treeAdapter.isTextNode(currentNode)) this._serializeTextNode(currentNode);else if (this.treeAdapter.isCommentNode(currentNode)) this._serializeCommentNode(currentNode);else if (this.treeAdapter.isDocumentTypeNode(currentNode)) this._serializeDocumentTypeNode(currentNode);
    }
  }
};

Serializer.prototype._serializeElement = function (node) {
  var tn = this.treeAdapter.getTagName(node),
      ns = this.treeAdapter.getNamespaceURI(node);
  this.html += '<' + tn;

  this._serializeAttributes(node);

  this.html += '>';

  if (tn !== $.AREA && tn !== $.BASE && tn !== $.BASEFONT && tn !== $.BGSOUND && tn !== $.BR && tn !== $.BR && tn !== $.COL && tn !== $.EMBED && tn !== $.FRAME && tn !== $.HR && tn !== $.IMG && tn !== $.INPUT && tn !== $.KEYGEN && tn !== $.LINK && tn !== $.MENUITEM && tn !== $.META && tn !== $.PARAM && tn !== $.SOURCE && tn !== $.TRACK && tn !== $.WBR) {
    var childNodesHolder = tn === $.TEMPLATE && ns === NS.HTML ? this.treeAdapter.getTemplateContent(node) : node;

    this._serializeChildNodes(childNodesHolder);

    this.html += '</' + tn + '>';
  }
};

Serializer.prototype._serializeAttributes = function (node) {
  var attrs = this.treeAdapter.getAttrList(node);

  for (var i = 0, attrsLength = attrs.length; i < attrsLength; i++) {
    var attr = attrs[i],
        value = Serializer.escapeString(attr.value, true);
    this.html += ' ';
    if (!attr.namespace) this.html += attr.name;else if (attr.namespace === NS.XML) this.html += 'xml:' + attr.name;else if (attr.namespace === NS.XMLNS) {
      if (attr.name !== 'xmlns') this.html += 'xmlns:';
      this.html += attr.name;
    } else if (attr.namespace === NS.XLINK) this.html += 'xlink:' + attr.name;else this.html += attr.namespace + ':' + attr.name;
    this.html += '="' + value + '"';
  }
};

Serializer.prototype._serializeTextNode = function (node) {
  var content = this.treeAdapter.getTextNodeContent(node),
      parent = this.treeAdapter.getParentNode(node),
      parentTn = void 0;
  if (parent && this.treeAdapter.isElementNode(parent)) parentTn = this.treeAdapter.getTagName(parent);
  if (parentTn === $.STYLE || parentTn === $.SCRIPT || parentTn === $.XMP || parentTn === $.IFRAME || parentTn === $.NOEMBED || parentTn === $.NOFRAMES || parentTn === $.PLAINTEXT || parentTn === $.NOSCRIPT) this.html += content;else this.html += Serializer.escapeString(content, false);
};

Serializer.prototype._serializeCommentNode = function (node) {
  this.html += '<!--' + this.treeAdapter.getCommentNodeContent(node) + '-->';
};

Serializer.prototype._serializeDocumentTypeNode = function (node) {
  var name = this.treeAdapter.getDocumentTypeNodeName(node);
  this.html += '<' + doctype.serializeContent(name, null, null) + '>';
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbImRlZmF1bHRUcmVlQWRhcHRlciIsInJlcXVpcmUiLCJtZXJnZU9wdGlvbnMiLCJkb2N0eXBlIiwiSFRNTCIsIiQiLCJUQUdfTkFNRVMiLCJOUyIsIk5BTUVTUEFDRVMiLCJERUZBVUxUX09QVElPTlMiLCJ0cmVlQWRhcHRlciIsIkFNUF9SRUdFWCIsIk5CU1BfUkVHRVgiLCJET1VCTEVfUVVPVEVfUkVHRVgiLCJMVF9SRUdFWCIsIkdUX1JFR0VYIiwiU2VyaWFsaXplciIsIm1vZHVsZSIsImV4cG9ydHMiLCJub2RlIiwib3B0aW9ucyIsImh0bWwiLCJzdGFydE5vZGUiLCJlc2NhcGVTdHJpbmciLCJzdHIiLCJhdHRyTW9kZSIsInJlcGxhY2UiLCJwcm90b3R5cGUiLCJzZXJpYWxpemUiLCJfc2VyaWFsaXplQ2hpbGROb2RlcyIsInBhcmVudE5vZGUiLCJjaGlsZE5vZGVzIiwiZ2V0Q2hpbGROb2RlcyIsImkiLCJjbkxlbmd0aCIsImxlbmd0aCIsImN1cnJlbnROb2RlIiwiaXNFbGVtZW50Tm9kZSIsIl9zZXJpYWxpemVFbGVtZW50IiwiaXNUZXh0Tm9kZSIsIl9zZXJpYWxpemVUZXh0Tm9kZSIsImlzQ29tbWVudE5vZGUiLCJfc2VyaWFsaXplQ29tbWVudE5vZGUiLCJpc0RvY3VtZW50VHlwZU5vZGUiLCJfc2VyaWFsaXplRG9jdW1lbnRUeXBlTm9kZSIsInRuIiwiZ2V0VGFnTmFtZSIsIm5zIiwiZ2V0TmFtZXNwYWNlVVJJIiwiX3NlcmlhbGl6ZUF0dHJpYnV0ZXMiLCJBUkVBIiwiQkFTRSIsIkJBU0VGT05UIiwiQkdTT1VORCIsIkJSIiwiQ09MIiwiRU1CRUQiLCJGUkFNRSIsIkhSIiwiSU1HIiwiSU5QVVQiLCJLRVlHRU4iLCJMSU5LIiwiTUVOVUlURU0iLCJNRVRBIiwiUEFSQU0iLCJTT1VSQ0UiLCJUUkFDSyIsIldCUiIsImNoaWxkTm9kZXNIb2xkZXIiLCJURU1QTEFURSIsImdldFRlbXBsYXRlQ29udGVudCIsImF0dHJzIiwiZ2V0QXR0ckxpc3QiLCJhdHRyc0xlbmd0aCIsImF0dHIiLCJ2YWx1ZSIsIm5hbWVzcGFjZSIsIm5hbWUiLCJYTUwiLCJYTUxOUyIsIlhMSU5LIiwiY29udGVudCIsImdldFRleHROb2RlQ29udGVudCIsInBhcmVudCIsImdldFBhcmVudE5vZGUiLCJwYXJlbnRUbiIsIlNUWUxFIiwiU0NSSVBUIiwiWE1QIiwiSUZSQU1FIiwiTk9FTUJFRCIsIk5PRlJBTUVTIiwiUExBSU5URVhUIiwiTk9TQ1JJUFQiLCJnZXRDb21tZW50Tm9kZUNvbnRlbnQiLCJnZXREb2N1bWVudFR5cGVOb2RlTmFtZSIsInNlcmlhbGl6ZUNvbnRlbnQiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQUlBLGtCQUFrQixHQUFHQyxPQUFPLENBQUMsMEJBQUQsQ0FBaEM7QUFBQSxJQUNJQyxZQUFZLEdBQUdELE9BQU8sQ0FBQyx3QkFBRCxDQUQxQjtBQUFBLElBRUlFLE9BQU8sR0FBR0YsT0FBTyxDQUFDLG1CQUFELENBRnJCO0FBQUEsSUFHSUcsSUFBSSxHQUFHSCxPQUFPLENBQUMsZ0JBQUQsQ0FIbEIsQyxDQUtBOzs7QUFDQSxJQUFJSSxDQUFDLEdBQUdELElBQUksQ0FBQ0UsU0FBYjtBQUFBLElBQ0lDLEVBQUUsR0FBR0gsSUFBSSxDQUFDSSxVQURkLEMsQ0FHQTs7QUFDQSxJQUFJQyxlQUFlLEdBQUc7QUFDbEJDLEVBQUFBLFdBQVcsRUFBRVY7QUFESyxDQUF0QixDLENBSUE7O0FBQ0EsSUFBSVcsU0FBUyxHQUFHLElBQWhCO0FBQUEsSUFDSUMsVUFBVSxHQUFHLFNBRGpCO0FBQUEsSUFFSUMsa0JBQWtCLEdBQUcsSUFGekI7QUFBQSxJQUdJQyxRQUFRLEdBQUcsSUFIZjtBQUFBLElBSUlDLFFBQVEsR0FBRyxJQUpmLEMsQ0FNQTs7QUFDQSxJQUFJQyxVQUFVLEdBQUdDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixVQUFVQyxJQUFWLEVBQWdCQyxPQUFoQixFQUF5QjtBQUN2RCxPQUFLQSxPQUFMLEdBQWVsQixZ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QVMsS0FBS1gsV0FBTCxDQUFpQnFGLHFCQUFqQixDQUF1QzVFLElBQXZDLENBQVQsR0FBd0QsS0FBckU7QUFDSCxDQUZEOztBQUlBSCxVQUFVLENBQUNXLFNBQVgsQ0FBcUJpQiwwQkFBckIsR0FBa0QsVUFBVXpCLElBQVYsRUFBZ0I7QUFDOUQsTUFBSTJELElBQUksR0FBRyxLQUFLcEUsV0FBTCxDQUFpQnNGLHVCQUFqQixDQUF5QzdFLElBQXpDLENBQVg7QUFFQSxPQUFLRSxJQUFMLElBQWEsTUFBTWxCLE9BQU8sQ0FBQzhGLGdCQUFSLENBQXlCbkIsSUFBekIsRUFBK0IsSUFBL0IsRUFBcUMsSUFBckMsQ0FBTixHQUFtRCxHQUFoRTtBQUNILENBSkQiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBkZWZhdWx0VHJlZUFkYXB0ZXIgPSByZXF1aXJlKCcuLi90cmVlX2FkYXB0ZXJzL2RlZmF1bHQnKSxcbiAgICBtZXJnZU9wdGlvbnMgPSByZXF1aXJlKCcuLi91dGlscy9tZXJnZV9vcHRpb25zJyksXG4gICAgZG9jdHlwZSA9IHJlcXVpcmUoJy4uL2NvbW1vbi9kb2N0eXBlJyksXG4gICAgSFRNTCA9IHJlcXVpcmUoJy4uL2NvbW1vbi9odG1sJyk7XG5cbi8vQWxpYXNlc1xudmFyICQgPSBIVE1MLlRBR19OQU1FUyxcbiAgICBOUyA9IEhUTUwuTkFNRVNQQUNFUztcblxuLy9EZWZhdWx0IHNlcmlhbGl6ZXIgb3B0aW9uc1xudmFyIERFRkFVTFRfT1BUSU9OUyA9IHtcbiAgICB0cmVlQWRhcHRlcjogZGVmYXVsdFRyZWVBZGFwdGVyXG59O1xuXG4vL0VzY2FwaW5nIHJlZ2V4ZXNcbnZhciBBTVBfUkVHRVggPSAvJi9nLFxuICAgIE5CU1BfUkVHRVggPSAvXFx1MDBhMC9nLFxuICAgIERPVUJMRV9RVU9URV9SRUdFWCA9IC9cIi9nLFxuICAgIExUX1JFR0VYID0gLzwvZyxcbiAgICBHVF9SRUdFWCA9IC8+L2c7XG5cbi8vU2VyaWFsaXplclxudmFyIFNlcmlhbGl6ZXIgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChub2RlLCBvcHRpb25zKSB7XG4gICAgdGhpcy5vcHRpb25zID0gbWVyZ2VPcHRpb25zKERFRkFVTFRfT1BUSU9OUywgb3B0aW9ucyk7XG4gICAgdGhpcy50cmVlQWRhcHRlciA9IHRoaXMub3B0aW9ucy50cmVlQWRhcHRlcjtcblxuICAgIHRoaXMuaHRtbCA9ICcnO1xuICAgIHRoaXMuc3RhcnROb2RlID0gbm9kZTtcbn07XG5cbi8vIE5PVEU6IGV4cG9ydGVkIGFzIHN0YXRpYyBtZXRob2QgZm9yIHRoZSB0ZXN0aW5nIHB1cnBvc2VzXG5TZXJpYWxpemVyLmVzY2FwZVN0cmluZyA9IGZ1bmN0aW9uIChzdHIsIGF0dHJNb2RlKSB7XG4gICAgc3RyID0gc3RyXG4gICAgICAgIC5yZXBsYWNlKEFNUF9SRUdFWCwgJyZhbXA7JylcbiAgICAgICAgLnJlcGxhY2UoTkJTUF9SRUdFWCwgJyZuYnNwOycpO1xuXG4gICAgaWYgKGF0dHJNb2RlKVxuICAgICAgICBzdHIgPSBzdHIucmVwbGFjZShET1VCTEVfUVVPVEVfUkVHRVgsICcmcXVvdDsnKTtcblxuICAgIGVsc2Uge1xuICAgICAgICBzdHIgPSBzdHJcbiAgICAgICAgICAgIC5yZXBsYWNlKExUX1JFR0VYLCAnJmx0OycpXG4gICAgICAgICAgICAucmVwbGFjZShHVF9SRUdFWCwgJyZndDsnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3RyO1xufTtcblxuXG4vL0FQSVxuU2VyaWFsaXplci5wcm90b3R5cGUuc2VyaWFsaXplID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuX3NlcmlhbGl6ZUNoaWxkTm9kZXModGhpcy5zdGFydE5vZGUpO1xuXG4gICAgcmV0dXJuIHRoaXMuaHRtbDtcbn07XG5cblxuLy9JbnRlcm5hbHNcblNlcmlhbGl6ZXIucHJvdG90eXBlLl9zZXJpYWxpemVDaGlsZE5vZGVzID0gZnVuY3Rpb24gKHBhcmVudE5vZGUpIHtcbiAgICB2YXIgY2hpbGROb2RlcyA9IHRoaXMudHJlZUFkYXB0ZXIuZ2V0Q2hpbGROb2RlcyhwYXJlbnROb2RlKTtcblxuICAgIGlmIChjaGlsZE5vZGVzKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBjbkxlbmd0aCA9IGNoaWxkTm9kZXMubGVuZ3RoOyBpIDwgY25MZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGN1cnJlbnROb2RlID0gY2hpbGROb2Rlc1tpXTtcblxuICAgICAgICAgICAgaWYgKHRoaXMudHJlZUFkYXB0ZXIuaXNFbGVtZW50Tm9kZShjdXJyZW50Tm9kZSkpXG4gICAgICAgICAgICAgICAgdGhpcy5fc2VyaWFsaXplRWxlbWVudChjdXJyZW50Tm9kZSk7XG5cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMudHJlZUFkYXB0ZXIuaXNUZXh0Tm9kZShjdXJyZW50Tm9kZSkpXG4gICAgICAgICAgICAgICAgdGhpcy5fc2VyaWFsaXplVGV4dE5vZGUoY3VycmVudE5vZGUpO1xuXG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLnRyZWVBZGFwdGVyLmlzQ29tbWVudE5vZGUoY3VycmVudE5vZGUpKVxuICAgICAgICAgICAgICAgIHRoaXMuX3NlcmlhbGl6ZUNvbW1lbnROb2RlKGN1cnJlbnROb2RlKTtcblxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy50cmVlQWRhcHRlci5pc0RvY3VtZW50VHlwZU5vZGUoY3VycmVudE5vZGUpKVxuICAgICAgICAgICAgICAgIHRoaXMuX3NlcmlhbGl6ZURvY3VtZW50VHlwZU5vZGUoY3VycmVudE5vZGUpO1xuICAgICAgICB9XG4gICAgfVxufTtcblxuU2VyaWFsaXplci5wcm90b3R5cGUuX3NlcmlhbGl6ZUVsZW1lbnQgPSBmdW5jdGlvbiAobm9kZSkge1xuICAgIHZhciB0biA9IHRoaXMudHJlZUFkYXB0ZXIuZ2V0VGFnTmFtZShub2RlKSxcbiAgICAgICAgbnMgPSB0aGlzLnRyZWVBZGFwdGVyLmdldE5hbWVzcGFjZVVSSShub2RlKTtcblxuICAgIHRoaXMuaHRtbCArPSAnPCcgKyB0bjtcbiAgICB0aGlzLl9zZXJpYWxpemVBdHRyaWJ1dGVzKG5vZGUpO1xuICAgIHRoaXMuaHRtbCArPSAnPic7XG5cbiAgICBpZiAodG4gIT09ICQuQVJFQSAmJiB0biAhPT0gJC5CQVNFICYmIHRuICE9PSAkLkJBU0VGT05UICYmIHRuICE9PSAkLkJHU09VTkQgJiYgdG4gIT09ICQuQlIgJiYgdG4gIT09ICQuQlIgJiZcbiAgICAgICAgdG4gIT09ICQuQ09MICYmIHRuICE9PSAkLkVNQkVEICYmIHRuICE9PSAkLkZSQU1FICYmIHRuICE9PSAkLkhSICYmIHRuICE9PSAkLklNRyAmJiB0biAhPT0gJC5JTlBVVCAmJlxuICAgICAgICB0biAhPT0gJC5LRVlHRU4gJiYgdG4gIT09ICQuTElOSyAmJiB0biAhPT0gJC5NRU5VSVRFTSAmJiB0biAhPT0gJC5NRVRBICYmIHRuICE9PSAkLlBBUkFNICYmIHRuICE9PSAkLlNPVVJDRSAmJlxuICAgICAgICB0biAhPT0gJC5UUkFDSyAmJiB0biAhPT0gJC5XQlIpIHtcblxuICAgICAgICB2YXIgY2hpbGROb2Rlc0hvbGRlciA9IHRuID09PSAkLlRFTVBMQVRFICYmIG5zID09PSBOUy5IVE1MID9cbiAgICAgICAgICAgIHRoaXMudHJlZUFkYXB0ZXIuZ2V0VGVtcGxhdGVDb250ZW50KG5vZGUpIDpcbiAgICAgICAgICAgIG5vZGU7XG5cbiAgICAgICAgdGhpcy5fc2VyaWFsaXplQ2hpbGROb2RlcyhjaGlsZE5vZGVzSG9sZGVyKTtcbiAgICAgICAgdGhpcy5odG1sICs9ICc8LycgKyB0biArICc+JztcbiAgICB9XG59O1xuXG5TZXJpYWxpemVyLnByb3RvdHlwZS5fc2VyaWFsaXplQXR0cmlidXRlcyA9IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgdmFyIGF0dHJzID0gdGhpcy50cmVlQWRhcHRlci5nZXRBdHRyTGlzdChub2RlKTtcblxuICAgIGZvciAodmFyIGkgPSAwLCBhdHRyc0xlbmd0aCA9IGF0dHJzLmxlbmd0aDsgaSA8IGF0dHJzTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGF0dHIgPSBhdHRyc1tpXSxcbiAgICAgICAgICAgIHZhbHVlID0gU2VyaWFsaXplci5lc2NhcGVTdHJpbmcoYXR0ci52YWx1ZSwgdHJ1ZSk7XG5cbiAgICAgICAgdGhpcy5odG1sICs9ICcgJztcblxuICAgICAgICBpZiAoIWF0dHIubmFtZXNwYWNlKVxuICAgICAgICAgICAgdGhpcy5odG1sICs9IGF0dHIubmFtZTtcblxuICAgICAgICBlbHNlIGlmIChhdHRyLm5hbWVzcGFjZSA9PT0gTlMuWE1MKVxuICAgICAgICAgICAgdGhpcy5odG1sICs9ICd4bWw6JyArIGF0dHIubmFtZTtcblxuICAgICAgICBlbHNlIGlmIChhdHRyLm5hbWVzcGFjZSA9PT0gTlMuWE1MTlMpIHtcbiAgICAgICAgICAgIGlmIChhdHRyLm5hbWUgIT09ICd4bWxucycpXG4gICAgICAgICAgICAgICAgdGhpcy5odG1sICs9ICd4bWxuczonO1xuXG4gICAgICAgICAgICB0aGlzLmh0bWwgKz0gYXR0ci5uYW1lO1xuICAgICAgICB9XG5cbiAgICAgICAgZWxzZSBpZiAoYXR0ci5uYW1lc3BhY2UgPT09IE5TLlhMSU5LKVxuICAgICAgICAgICAgdGhpcy5odG1sICs9ICd4bGluazonICsgYXR0ci5uYW1lO1xuXG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHRoaXMuaHRtbCArPSBhdHRyLm5hbWVzcGFjZSArICc6JyArIGF0dHIubmFtZTtcblxuICAgICAgICB0aGlzLmh0bWwgKz0gJz1cIicgKyB2YWx1ZSArICdcIic7XG4gICAgfVxufTtcblxuU2VyaWFsaXplci5wcm90b3R5cGUuX3NlcmlhbGl6ZVRleHROb2RlID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICB2YXIgY29udGVudCA9IHRoaXMudHJlZUFkYXB0ZXIuZ2V0VGV4dE5vZGVDb250ZW50KG5vZGUpLFxuICAgICAgICBwYXJlbnQgPSB0aGlzLnRyZWVBZGFwdGVyLmdldFBhcmVudE5vZGUobm9kZSksXG4gICAgICAgIHBhcmVudFRuID0gdm9pZCAwO1xuXG4gICAgaWYgKHBhcmVudCAmJiB0aGlzLnRyZWVBZGFwdGVyLmlzRWxlbWVudE5vZGUocGFyZW50KSlcbiAgICAgICAgcGFyZW50VG4gPSB0aGlzLnRyZWVBZGFwdGVyLmdldFRhZ05hbWUocGFyZW50KTtcblxuICAgIGlmIChwYXJlbnRUbiA9PT0gJC5TVFlMRSB8fCBwYXJlbnRUbiA9PT0gJC5TQ1JJUFQgfHwgcGFyZW50VG4gPT09ICQuWE1QIHx8IHBhcmVudFRuID09PSAkLklGUkFNRSB8fFxuICAgICAgICBwYXJlbnRUbiA9PT0gJC5OT0VNQkVEIHx8IHBhcmVudFRuID09PSAkLk5PRlJBTUVTIHx8IHBhcmVudFRuID09PSAkLlBMQUlOVEVYVCB8fCBwYXJlbnRUbiA9PT0gJC5OT1NDUklQVClcblxuICAgICAgICB0aGlzLmh0bWwgKz0gY29udGVudDtcblxuICAgIGVsc2VcbiAgICAgICAgdGhpcy5odG1sICs9IFNlcmlhbGl6ZXIuZXNjYXBlU3RyaW5nKGNvbnRlbnQsIGZhbHNlKTtcbn07XG5cblNlcmlhbGl6ZXIucHJvdG90eXBlLl9zZXJpYWxpemVDb21tZW50Tm9kZSA9IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgdGhpcy5odG1sICs9ICc8IS0tJyArIHRoaXMudHJlZUFkYXB0ZXIuZ2V0Q29tbWVudE5vZGVDb250ZW50KG5vZGUpICsgJy0tPic7XG59O1xuXG5TZXJpYWxpemVyLnByb3RvdHlwZS5fc2VyaWFsaXplRG9jdW1lbnRUeXBlTm9kZSA9IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgdmFyIG5hbWUgPSB0aGlzLnRyZWVBZGFwdGVyLmdldERvY3VtZW50VHlwZU5vZGVOYW1lKG5vZGUpO1xuXG4gICAgdGhpcy5odG1sICs9ICc8JyArIGRvY3R5cGUuc2VyaWFsaXplQ29udGVudChuYW1lLCBudWxsLCBudWxsKSArICc+Jztcbn07XG4iXX0=