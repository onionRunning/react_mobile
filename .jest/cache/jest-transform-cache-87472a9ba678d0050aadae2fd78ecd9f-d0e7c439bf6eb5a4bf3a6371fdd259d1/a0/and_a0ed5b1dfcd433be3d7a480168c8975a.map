{"version":3,"sources":["../src/and.js"],"names":["name","Array","validators","validator","args","firstError","validatorFn"],"mappings":";;;;;;;AAAA,IAAA,cAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,yBAAA,CAAA,CAAA;;;;;;;;AAEe,SAAA,YAAA,CAAA,UAAA,EAAgD;AAAA,MAAdA,IAAc,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAP,KAAO;;AAC7D,MAAI,CAACC,KAAK,CAALA,OAAAA,CAAL,UAAKA,CAAL,EAAgC;AAC9B,UAAM,IAAA,SAAA,CAAN,wCAAM,CAAN;AACD;;AACD,MAAIC,UAAU,CAAVA,MAAAA,IAAJ,CAAA,EAA4B;AAC1B,UAAM,IAAA,UAAA,CAAN,wCAAM,CAAN;AACD;;AAED,MAAMC,SAAS,GAAG,SAAA,GAAA,GAAsB;AAAA,SAAA,IAAA,IAAA,GAAA,SAAA,CAAA,MAAA,EAANC,IAAM,GAAA,IAAA,KAAA,CAAA,IAAA,CAAA,EAAA,IAAA,GAAA,CAAA,EAAA,IAAA,GAAA,IAAA,EAAA,IAAA,EAAA,EAAA;AAANA,MAAAA,IAAM,CAAA,IAAA,CAANA,GAAM,SAAA,CAAA,IAAA,CAANA;AAAM;;AACtC,QAAIC,UAAU,GAAd,IAAA;AACAH,IAAAA,UAAU,CAAVA,IAAAA,CAAgB,UAAA,WAAA,EAAiB;AAC/BG,MAAAA,UAAU,GAAGC,WAAW,CAAXA,KAAAA,CAAAA,KAAAA,CAAAA,EAAbD,IAAaC,CAAbD;AACA,aAAOA,UAAU,IAAjB,IAAA;AAFFH,KAAAA;AAIA,WAAOG,UAAU,IAAVA,IAAAA,GAAAA,IAAAA,GAAP,UAAA;AANF,GAAA;;AASAF,EAAAA,SAAS,CAATA,UAAAA,GAAuB,SAAA,aAAA,GAAgC;AAAA,SAAA,IAAA,KAAA,GAAA,SAAA,CAAA,MAAA,EAANC,IAAM,GAAA,IAAA,KAAA,CAAA,KAAA,CAAA,EAAA,KAAA,GAAA,CAAA,EAAA,KAAA,GAAA,KAAA,EAAA,KAAA,EAAA,EAAA;AAANA,MAAAA,IAAM,CAAA,KAAA,CAANA,GAAM,SAAA,CAAA,KAAA,CAANA;AAAM;;AACrD,QAAIC,UAAU,GAAd,IAAA;AACAH,IAAAA,UAAU,CAAVA,IAAAA,CAAgB,UAAA,WAAA,EAAiB;AAC/BG,MAAAA,UAAU,GAAGC,WAAW,CAAXA,UAAAA,CAAAA,KAAAA,CAAAA,WAAAA,EAAbD,IAAaC,CAAbD;AACA,aAAOA,UAAU,IAAjB,IAAA;AAFFH,KAAAA;AAIA,WAAOG,UAAU,IAAVA,IAAAA,GAAAA,IAAAA,GAAP,UAAA;AANFF,GAAAA;;AASA,SAAO,CAAA,GAAA,cAAA,CAAA,SAAA,CAAA,EAAA,SAAA,EAAA,IAAA,EAAP,UAAO,CAAP;AACD","sourcesContent":["import wrapValidator from './helpers/wrapValidator';\n\nexport default function andValidator(validators, name = 'and') {\n  if (!Array.isArray(validators)) {\n    throw new TypeError('and: 2 or more validators are required');\n  }\n  if (validators.length <= 1) {\n    throw new RangeError('and: 2 or more validators are required');\n  }\n\n  const validator = function and(...args) {\n    let firstError = null;\n    validators.some((validatorFn) => {\n      firstError = validatorFn(...args);\n      return firstError != null;\n    });\n    return firstError == null ? null : firstError;\n  };\n\n  validator.isRequired = function andIsRequired(...args) {\n    let firstError = null;\n    validators.some((validatorFn) => {\n      firstError = validatorFn.isRequired(...args);\n      return firstError != null;\n    });\n    return firstError == null ? null : firstError;\n  };\n\n  return wrapValidator(validator, name, validators);\n}\n"]}