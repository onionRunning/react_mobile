3aa93068f88bb76ed0133a8d0632432b
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = andValidator;

var _wrapValidator = _interopRequireDefault(require("./helpers/wrapValidator"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function andValidator(validators) {
  var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'and';

  if (!Array.isArray(validators)) {
    throw new TypeError('and: 2 or more validators are required');
  }

  if (validators.length <= 1) {
    throw new RangeError('and: 2 or more validators are required');
  }

  var validator = function and() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var firstError = null;
    validators.some(function (validatorFn) {
      firstError = validatorFn.apply(void 0, args);
      return firstError != null;
    });
    return firstError == null ? null : firstError;
  };

  validator.isRequired = function andIsRequired() {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    var firstError = null;
    validators.some(function (validatorFn) {
      firstError = validatorFn.isRequired.apply(validatorFn, args);
      return firstError != null;
    });
    return firstError == null ? null : firstError;
  };

  return (0, _wrapValidator["default"])(validator, name, validators);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9hbmQuanMiXSwibmFtZXMiOlsibmFtZSIsIkFycmF5IiwidmFsaWRhdG9ycyIsInZhbGlkYXRvciIsImFyZ3MiLCJmaXJzdEVycm9yIiwidmFsaWRhdG9yRm4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSxJQUFBLGNBQUEsR0FBQSxzQkFBQSxDQUFBLE9BQUEsQ0FBQSx5QkFBQSxDQUFBLENBQUE7Ozs7Ozs7O0FBRWUsU0FBQSxZQUFBLENBQUEsVUFBQSxFQUFnRDtBQUFBLE1BQWRBLElBQWMsR0FBQSxTQUFBLENBQUEsTUFBQSxHQUFBLENBQUEsSUFBQSxTQUFBLENBQUEsQ0FBQSxDQUFBLEtBQUEsU0FBQSxHQUFBLFNBQUEsQ0FBQSxDQUFBLENBQUEsR0FBUCxLQUFPOztBQUM3RCxNQUFJLENBQUNDLEtBQUssQ0FBTEEsT0FBQUEsQ0FBTCxVQUFLQSxDQUFMLEVBQWdDO0FBQzlCLFVBQU0sSUFBQSxTQUFBLENBQU4sd0NBQU0sQ0FBTjtBQUNEOztBQUNELE1BQUlDLFVBQVUsQ0FBVkEsTUFBQUEsSUFBSixDQUFBLEVBQTRCO0FBQzFCLFVBQU0sSUFBQSxVQUFBLENBQU4sd0NBQU0sQ0FBTjtBQUNEOztBQUVELE1BQU1DLFNBQVMsR0FBRyxTQUFBLEdBQUEsR0FBc0I7QUFBQSxTQUFBLElBQUEsSUFBQSxHQUFBLFNBQUEsQ0FBQSxNQUFBLEVBQU5DLElBQU0sR0FBQSxJQUFBLEtBQUEsQ0FBQSxJQUFBLENBQUEsRUFBQSxJQUFBLEdBQUEsQ0FBQSxFQUFBLElBQUEsR0FBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLEVBQUE7QUFBTkEsTUFBQUEsSUFBTSxDQUFBLElBQUEsQ0FBTkEsR0FBTSxTQUFBLENBQUEsSUFBQSxDQUFOQTtBQUFNOztBQUN0QyxRQUFJQyxVQUFVLEdBQWQsSUFBQTtBQUNBSCxJQUFBQSxVQUFVLENBQVZBLElBQUFBLENBQWdCLFVBQUEsV0FBQSxFQUFpQjtBQUMvQkcsTUFBQUEsVUFBVSxHQUFHQyxXQUFXLENBQVhBLEtBQUFBLENBQUFBLEtBQUFBLENBQUFBLEVBQWJELElBQWFDLENBQWJEO0FBQ0EsYUFBT0EsVUFBVSxJQUFqQixJQUFBO0FBRkZILEtBQUFBO0FBSUEsV0FBT0csVUFBVSxJQUFWQSxJQUFBQSxHQUFBQSxJQUFBQSxHQUFQLFVBQUE7QUFORixHQUFBOztBQVNBRixFQUFBQSxTQUFTLENBQVRBLFVBQUFBLEdBQXVCLFNBQUEsYUFBQSxHQUFnQztBQUFBLFNBQUEsSUFBQSxLQUFBLEdBQUEsU0FBQSxDQUFBLE1BQUEsRUFBTkMsSUFBTSxHQUFBLElBQUEsS0FBQSxDQUFBLEtBQUEsQ0FBQSxFQUFBLEtBQUEsR0FBQSxDQUFBLEVBQUEsS0FBQSxHQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsRUFBQTtBQUFOQSxNQUFBQSxJQUFNLENBQUEsS0FBQSxDQUFOQSxHQUFNLFNBQUEsQ0FBQSxLQUFBLENBQU5BO0FBQU07O0FBQ3JELFFBQUlDLFVBQVUsR0FBZCxJQUFBO0FBQ0FILElBQUFBLFVBQVUsQ0FBVkEsSUFBQUEsQ0FBZ0IsVUFBQSxXQUFBLEVBQWlCO0FBQy9CRyxNQUFBQSxVQUFVLEdBQUdDLFdBQVcsQ0FBWEEsVUFBQUEsQ0FBQUEsS0FBQUEsQ0FBQUEsV0FBQUEsRUFBYkQsSUFBYUMsQ0FBYkQ7QUFDQSxhQUFPQSxVQUFVLElBQWpCLElBQUE7QUFGRkgsS0FBQUE7QUFJQSxXQUFPRyxVQUFVLElBQVZBLElBQUFBLEdBQUFBLElBQUFBLEdBQVAsVUFBQTtBQU5GRixHQUFBQTs7QUFTQSxTQUFPLENBQUEsR0FBQSxjQUFBLENBQUEsU0FBQSxDQUFBLEVBQUEsU0FBQSxFQUFBLElBQUEsRUFBUCxVQUFPLENBQVA7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB3cmFwVmFsaWRhdG9yIGZyb20gJy4vaGVscGVycy93cmFwVmFsaWRhdG9yJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYW5kVmFsaWRhdG9yKHZhbGlkYXRvcnMsIG5hbWUgPSAnYW5kJykge1xuICBpZiAoIUFycmF5LmlzQXJyYXkodmFsaWRhdG9ycykpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdhbmQ6IDIgb3IgbW9yZSB2YWxpZGF0b3JzIGFyZSByZXF1aXJlZCcpO1xuICB9XG4gIGlmICh2YWxpZGF0b3JzLmxlbmd0aCA8PSAxKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ2FuZDogMiBvciBtb3JlIHZhbGlkYXRvcnMgYXJlIHJlcXVpcmVkJyk7XG4gIH1cblxuICBjb25zdCB2YWxpZGF0b3IgPSBmdW5jdGlvbiBhbmQoLi4uYXJncykge1xuICAgIGxldCBmaXJzdEVycm9yID0gbnVsbDtcbiAgICB2YWxpZGF0b3JzLnNvbWUoKHZhbGlkYXRvckZuKSA9PiB7XG4gICAgICBmaXJzdEVycm9yID0gdmFsaWRhdG9yRm4oLi4uYXJncyk7XG4gICAgICByZXR1cm4gZmlyc3RFcnJvciAhPSBudWxsO1xuICAgIH0pO1xuICAgIHJldHVybiBmaXJzdEVycm9yID09IG51bGwgPyBudWxsIDogZmlyc3RFcnJvcjtcbiAgfTtcblxuICB2YWxpZGF0b3IuaXNSZXF1aXJlZCA9IGZ1bmN0aW9uIGFuZElzUmVxdWlyZWQoLi4uYXJncykge1xuICAgIGxldCBmaXJzdEVycm9yID0gbnVsbDtcbiAgICB2YWxpZGF0b3JzLnNvbWUoKHZhbGlkYXRvckZuKSA9PiB7XG4gICAgICBmaXJzdEVycm9yID0gdmFsaWRhdG9yRm4uaXNSZXF1aXJlZCguLi5hcmdzKTtcbiAgICAgIHJldHVybiBmaXJzdEVycm9yICE9IG51bGw7XG4gICAgfSk7XG4gICAgcmV0dXJuIGZpcnN0RXJyb3IgPT0gbnVsbCA/IG51bGwgOiBmaXJzdEVycm9yO1xuICB9O1xuXG4gIHJldHVybiB3cmFwVmFsaWRhdG9yKHZhbGlkYXRvciwgbmFtZSwgdmFsaWRhdG9ycyk7XG59XG4iXX0=