9037833c2ca08a41fa3f0cbf76b1c6c3
var getWrapDetails = require('./_getWrapDetails'),
    insertWrapDetails = require('./_insertWrapDetails'),
    setToString = require('./_setToString'),
    updateWrapDetails = require('./_updateWrapDetails');
/**
 * Sets the `toString` method of `wrapper` to mimic the source of `reference`
 * with wrapper details in a comment at the top of the source body.
 *
 * @private
 * @param {Function} wrapper The function to modify.
 * @param {Function} reference The reference function.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @returns {Function} Returns `wrapper`.
 */


function setWrapToString(wrapper, reference, bitmask) {
  var source = reference + '';
  return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
}

module.exports = setWrapToString;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIl9zZXRXcmFwVG9TdHJpbmcuanMiXSwibmFtZXMiOlsiZ2V0V3JhcERldGFpbHMiLCJyZXF1aXJlIiwiaW5zZXJ0V3JhcERldGFpbHMiLCJzZXRUb1N0cmluZyIsInVwZGF0ZVdyYXBEZXRhaWxzIiwic2V0V3JhcFRvU3RyaW5nIiwid3JhcHBlciIsInJlZmVyZW5jZSIsImJpdG1hc2siLCJzb3VyY2UiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFJQSxjQUFjLEdBQUdDLE9BQU8sQ0FBQyxtQkFBRCxDQUE1QjtBQUFBLElBQ0lDLGlCQUFpQixHQUFHRCxPQUFPLENBQUMsc0JBQUQsQ0FEL0I7QUFBQSxJQUVJRSxXQUFXLEdBQUdGLE9BQU8sQ0FBQyxnQkFBRCxDQUZ6QjtBQUFBLElBR0lHLGlCQUFpQixHQUFHSCxPQUFPLENBQUMsc0JBQUQsQ0FIL0I7QUFLQTs7Ozs7Ozs7Ozs7O0FBVUEsU0FBU0ksZUFBVCxDQUF5QkMsT0FBekIsRUFBa0NDLFNBQWxDLEVBQTZDQyxPQUE3QyxFQUFzRDtBQUNwRCxNQUFJQyxNQUFNLEdBQUlGLFNBQVMsR0FBRyxFQUExQjtBQUNBLFNBQU9KLFdBQVcsQ0FBQ0csT0FBRCxFQUFVSixpQkFBaUIsQ0FBQ08sTUFBRCxFQUFTTCxpQkFBaUIsQ0FBQ0osY0FBYyxDQUFDUyxNQUFELENBQWYsRUFBeUJELE9BQXpCLENBQTFCLENBQTNCLENBQWxCO0FBQ0Q7O0FBRURFLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQk4sZUFBakIiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZ2V0V3JhcERldGFpbHMgPSByZXF1aXJlKCcuL19nZXRXcmFwRGV0YWlscycpLFxuICAgIGluc2VydFdyYXBEZXRhaWxzID0gcmVxdWlyZSgnLi9faW5zZXJ0V3JhcERldGFpbHMnKSxcbiAgICBzZXRUb1N0cmluZyA9IHJlcXVpcmUoJy4vX3NldFRvU3RyaW5nJyksXG4gICAgdXBkYXRlV3JhcERldGFpbHMgPSByZXF1aXJlKCcuL191cGRhdGVXcmFwRGV0YWlscycpO1xuXG4vKipcbiAqIFNldHMgdGhlIGB0b1N0cmluZ2AgbWV0aG9kIG9mIGB3cmFwcGVyYCB0byBtaW1pYyB0aGUgc291cmNlIG9mIGByZWZlcmVuY2VgXG4gKiB3aXRoIHdyYXBwZXIgZGV0YWlscyBpbiBhIGNvbW1lbnQgYXQgdGhlIHRvcCBvZiB0aGUgc291cmNlIGJvZHkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHdyYXBwZXIgVGhlIGZ1bmN0aW9uIHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlZmVyZW5jZSBUaGUgcmVmZXJlbmNlIGZ1bmN0aW9uLlxuICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcGAgZm9yIG1vcmUgZGV0YWlscy5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgd3JhcHBlcmAuXG4gKi9cbmZ1bmN0aW9uIHNldFdyYXBUb1N0cmluZyh3cmFwcGVyLCByZWZlcmVuY2UsIGJpdG1hc2spIHtcbiAgdmFyIHNvdXJjZSA9IChyZWZlcmVuY2UgKyAnJyk7XG4gIHJldHVybiBzZXRUb1N0cmluZyh3cmFwcGVyLCBpbnNlcnRXcmFwRGV0YWlscyhzb3VyY2UsIHVwZGF0ZVdyYXBEZXRhaWxzKGdldFdyYXBEZXRhaWxzKHNvdXJjZSksIGJpdG1hc2spKSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0V3JhcFRvU3RyaW5nO1xuIl19