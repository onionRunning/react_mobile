{"version":3,"sources":["../src/or.js"],"names":["validator","rest","propValue","props","errors","v","validators","name","Array","oneOfTypeValidator"],"mappings":";;;;;;;AAAA,IAAA,UAAA,GAAA,OAAA,CAAA,YAAA,CAAA;;AACA,IAAA,cAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,yBAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,SAAA,kBAAA,CAAA,UAAA,EAAwC;AACtC,MAAMA,SAAS,GAAG,SAAA,SAAA,CAAA,KAAA,EAAA,QAAA,EAAA,aAAA,EAA4D;AAAA,SAAA,IAAA,IAAA,GAAA,SAAA,CAAA,MAAA,EAANC,IAAM,GAAA,IAAA,KAAA,CAAA,IAAA,GAAA,CAAA,GAAA,IAAA,GAAA,CAAA,GAAA,CAAA,CAAA,EAAA,IAAA,GAAA,CAAA,EAAA,IAAA,GAAA,IAAA,EAAA,IAAA,EAAA,EAAA;AAANA,MAAAA,IAAM,CAAA,IAAA,GAAA,CAAA,CAANA,GAAM,SAAA,CAAA,IAAA,CAANA;AAAM;;AAAA,QACxDC,SADwD,GAC1CC,KAD0C,CAAA,QAAA,CAAA;;AAE5E,QAAI,OAAA,SAAA,KAAJ,WAAA,EAAsC;AACpC,aAAA,IAAA;AACD;;AAED,QAAMC,MAAM,GAAG,UAAU,CAAV,GAAA,CACR,UAAA,CAAA,EAAA;AAAA,aAAOC,CAAC,CAADA,KAAAA,CAAAA,KAAAA,CAAAA,EAAAA,CAAAA,KAAAA,EAAAA,QAAAA,EAAAA,aAAAA,EAAAA,MAAAA,CAAP,IAAOA,CAAAA,CAAP;AADQ,KAAA,EAAA,MAAA,CAAf,OAAe,CAAf;;AAIA,QAAID,MAAM,CAANA,MAAAA,GAAgBE,UAAU,CAA9B,MAAA,EAAuC;AACrC,aAAA,IAAA;AACD;;AACD,WAAO,IAAA,SAAA,CAAA,GAAA,MAAA,CAAA,aAAA,EAAA,8BAAA,EAAA,MAAA,CAAA,QAAA,EAAP,GAAO,CAAA,CAAP;AAbF,GAAA;;AAeAN,EAAAA,SAAS,CAATA,UAAAA,GAAuB,SAAA,iBAAA,CAAA,KAAA,EAAA,QAAA,EAAA,aAAA,EAAoE;AAAA,SAAA,IAAA,KAAA,GAAA,SAAA,CAAA,MAAA,EAANC,IAAM,GAAA,IAAA,KAAA,CAAA,KAAA,GAAA,CAAA,GAAA,KAAA,GAAA,CAAA,GAAA,CAAA,CAAA,EAAA,KAAA,GAAA,CAAA,EAAA,KAAA,GAAA,KAAA,EAAA,KAAA,EAAA,EAAA;AAANA,MAAAA,IAAM,CAAA,KAAA,GAAA,CAAA,CAANA,GAAM,SAAA,CAAA,KAAA,CAANA;AAAM;;AAAA,QACrEC,SADqE,GACvDC,KADuD,CAAA,QAAA,CAAA;;AAEzF,QAAI,OAAA,SAAA,KAAJ,WAAA,EAAsC;AACpC,aAAO,IAAA,SAAA,CAAA,GAAA,MAAA,CAAA,aAAA,EAAA,+BAAA,EAAA,MAAA,CAAA,QAAA,EAAP,GAAO,CAAA,CAAP;AACD;;AAED,QAAMC,MAAM,GAAG,UAAU,CAAV,GAAA,CACR,UAAA,CAAA,EAAA;AAAA,aAAOC,CAAC,CAADA,KAAAA,CAAAA,KAAAA,CAAAA,EAAAA,CAAAA,KAAAA,EAAAA,QAAAA,EAAAA,aAAAA,EAAAA,MAAAA,CAAP,IAAOA,CAAAA,CAAP;AADQ,KAAA,EAAA,MAAA,CAAf,OAAe,CAAf;;AAIA,QAAID,MAAM,CAANA,MAAAA,KAAkBE,UAAU,CAAhC,MAAA,EAAyC;AACvC,aAAO,IAAA,SAAA,CAAA,GAAA,MAAA,CAAA,aAAA,EAAA,kBAAA,EAAA,MAAA,CAAA,MAAA,EAAA,wBAAA,EAAA,MAAA,CAAA,QAAA,EAAP,GAAO,CAAA,CAAP;AACD;;AACD,WAAA,IAAA;AAbFN,GAAAA;;AAeA,SAAO,CAAA,GAAA,cAAA,CAAA,SAAA,CAAA,EAAA,SAAA,EAAA,WAAA,EAAP,UAAO,CAAP;AACD;;AAEc,SAAA,EAAA,CAAA,UAAA,EAAqC;AAAA,MAAbO,IAAa,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAN,IAAM;;AAClD,MAAI,CAACC,KAAK,CAALA,OAAAA,CAAL,UAAKA,CAAL,EAAgC;AAC9B,UAAM,IAAA,SAAA,CAAN,uCAAM,CAAN;AACD;;AACD,MAAIF,UAAU,CAAVA,MAAAA,IAAJ,CAAA,EAA4B;AAC1B,UAAM,IAAA,UAAA,CAAN,uCAAM,CAAN;AACD;;AAED,MAAMN,SAAS,GAAGS,kBAAkB,CAAA,CAClC,CAAA,GAAA,UAAA,CAAA,OAAA,EAAQA,kBAAkB,CADQ,UACR,CAA1B,CADkC,EAAA,MAAA,CAAA,kBAAA,CAApC,UAAoC,CAAA,CAAA,CAApC;AAKA,SAAO,CAAA,GAAA,cAAA,CAAA,SAAA,CAAA,EAAA,SAAA,EAAA,IAAA,EAAP,UAAO,CAAP;AACD","sourcesContent":["import { arrayOf } from 'prop-types';\nimport wrapValidator from './helpers/wrapValidator';\n\nfunction oneOfTypeValidator(validators) {\n  const validator = function oneOfType(props, propName, componentName, ...rest) {\n    const { [propName]: propValue } = props;\n    if (typeof propValue === 'undefined') {\n      return null;\n    }\n\n    const errors = validators\n      .map((v) => v(props, propName, componentName, ...rest))\n      .filter(Boolean);\n\n    if (errors.length < validators.length) {\n      return null;\n    }\n    return new TypeError(`${componentName}: invalid value supplied to ${propName}.`);\n  };\n  validator.isRequired = function oneOfTypeRequired(props, propName, componentName, ...rest) {\n    const { [propName]: propValue } = props;\n    if (typeof propValue === 'undefined') {\n      return new TypeError(`${componentName}: missing value for required ${propName}.`);\n    }\n\n    const errors = validators\n      .map((v) => v(props, propName, componentName, ...rest))\n      .filter(Boolean);\n\n    if (errors.length === validators.length) {\n      return new TypeError(`${componentName}: invalid value ${errors} supplied to required ${propName}.`);\n    }\n    return null;\n  };\n  return wrapValidator(validator, 'oneOfType', validators);\n}\n\nexport default function or(validators, name = 'or') {\n  if (!Array.isArray(validators)) {\n    throw new TypeError('or: 2 or more validators are required');\n  }\n  if (validators.length <= 1) {\n    throw new RangeError('or: 2 or more validators are required');\n  }\n\n  const validator = oneOfTypeValidator([\n    arrayOf(oneOfTypeValidator(validators)),\n    ...validators,\n  ]);\n\n  return wrapValidator(validator, name, validators);\n}\n"]}