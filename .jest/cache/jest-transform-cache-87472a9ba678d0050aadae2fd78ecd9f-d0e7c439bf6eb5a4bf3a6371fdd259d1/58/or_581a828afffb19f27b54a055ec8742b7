0720a33652c5b549f47d54c9a84fd5d1
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = or;

var _propTypes = require("prop-types");

var _wrapValidator = _interopRequireDefault(require("./helpers/wrapValidator"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance");
}

function _iterableToArray(iter) {
  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }

    return arr2;
  }
}

function oneOfTypeValidator(validators) {
  var validator = function oneOfType(props, propName, componentName) {
    for (var _len = arguments.length, rest = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
      rest[_key - 3] = arguments[_key];
    }

    var propValue = props[propName];

    if (typeof propValue === 'undefined') {
      return null;
    }

    var errors = validators.map(function (v) {
      return v.apply(void 0, [props, propName, componentName].concat(rest));
    }).filter(Boolean);

    if (errors.length < validators.length) {
      return null;
    }

    return new TypeError("".concat(componentName, ": invalid value supplied to ").concat(propName, "."));
  };

  validator.isRequired = function oneOfTypeRequired(props, propName, componentName) {
    for (var _len2 = arguments.length, rest = new Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {
      rest[_key2 - 3] = arguments[_key2];
    }

    var propValue = props[propName];

    if (typeof propValue === 'undefined') {
      return new TypeError("".concat(componentName, ": missing value for required ").concat(propName, "."));
    }

    var errors = validators.map(function (v) {
      return v.apply(void 0, [props, propName, componentName].concat(rest));
    }).filter(Boolean);

    if (errors.length === validators.length) {
      return new TypeError("".concat(componentName, ": invalid value ").concat(errors, " supplied to required ").concat(propName, "."));
    }

    return null;
  };

  return (0, _wrapValidator["default"])(validator, 'oneOfType', validators);
}

function or(validators) {
  var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'or';

  if (!Array.isArray(validators)) {
    throw new TypeError('or: 2 or more validators are required');
  }

  if (validators.length <= 1) {
    throw new RangeError('or: 2 or more validators are required');
  }

  var validator = oneOfTypeValidator([(0, _propTypes.arrayOf)(oneOfTypeValidator(validators))].concat(_toConsumableArray(validators)));
  return (0, _wrapValidator["default"])(validator, name, validators);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9vci5qcyJdLCJuYW1lcyI6WyJ2YWxpZGF0b3IiLCJyZXN0IiwicHJvcFZhbHVlIiwicHJvcHMiLCJlcnJvcnMiLCJ2IiwidmFsaWRhdG9ycyIsIm5hbWUiLCJBcnJheSIsIm9uZU9mVHlwZVZhbGlkYXRvciJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLElBQUEsVUFBQSxHQUFBLE9BQUEsQ0FBQSxZQUFBLENBQUE7O0FBQ0EsSUFBQSxjQUFBLEdBQUEsc0JBQUEsQ0FBQSxPQUFBLENBQUEseUJBQUEsQ0FBQSxDQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFQSxTQUFBLGtCQUFBLENBQUEsVUFBQSxFQUF3QztBQUN0QyxNQUFNQSxTQUFTLEdBQUcsU0FBQSxTQUFBLENBQUEsS0FBQSxFQUFBLFFBQUEsRUFBQSxhQUFBLEVBQTREO0FBQUEsU0FBQSxJQUFBLElBQUEsR0FBQSxTQUFBLENBQUEsTUFBQSxFQUFOQyxJQUFNLEdBQUEsSUFBQSxLQUFBLENBQUEsSUFBQSxHQUFBLENBQUEsR0FBQSxJQUFBLEdBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQSxFQUFBLElBQUEsR0FBQSxDQUFBLEVBQUEsSUFBQSxHQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsRUFBQTtBQUFOQSxNQUFBQSxJQUFNLENBQUEsSUFBQSxHQUFBLENBQUEsQ0FBTkEsR0FBTSxTQUFBLENBQUEsSUFBQSxDQUFOQTtBQUFNOztBQUFBLFFBQ3hEQyxTQUR3RCxHQUMxQ0MsS0FEMEMsQ0FBQSxRQUFBLENBQUE7O0FBRTVFLFFBQUksT0FBQSxTQUFBLEtBQUosV0FBQSxFQUFzQztBQUNwQyxhQUFBLElBQUE7QUFDRDs7QUFFRCxRQUFNQyxNQUFNLEdBQUcsVUFBVSxDQUFWLEdBQUEsQ0FDUixVQUFBLENBQUEsRUFBQTtBQUFBLGFBQU9DLENBQUMsQ0FBREEsS0FBQUEsQ0FBQUEsS0FBQUEsQ0FBQUEsRUFBQUEsQ0FBQUEsS0FBQUEsRUFBQUEsUUFBQUEsRUFBQUEsYUFB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LGNBQUEsQ0FBQSxTQUFBLENBQUEsRUFBQSxTQUFBLEVBQUEsSUFBQSxFQUFQLFVBQU8sQ0FBUDtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYXJyYXlPZiB9IGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHdyYXBWYWxpZGF0b3IgZnJvbSAnLi9oZWxwZXJzL3dyYXBWYWxpZGF0b3InO1xuXG5mdW5jdGlvbiBvbmVPZlR5cGVWYWxpZGF0b3IodmFsaWRhdG9ycykge1xuICBjb25zdCB2YWxpZGF0b3IgPSBmdW5jdGlvbiBvbmVPZlR5cGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCAuLi5yZXN0KSB7XG4gICAgY29uc3QgeyBbcHJvcE5hbWVdOiBwcm9wVmFsdWUgfSA9IHByb3BzO1xuICAgIGlmICh0eXBlb2YgcHJvcFZhbHVlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgY29uc3QgZXJyb3JzID0gdmFsaWRhdG9yc1xuICAgICAgLm1hcCgodikgPT4gdihwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIC4uLnJlc3QpKVxuICAgICAgLmZpbHRlcihCb29sZWFuKTtcblxuICAgIGlmIChlcnJvcnMubGVuZ3RoIDwgdmFsaWRhdG9ycy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IFR5cGVFcnJvcihgJHtjb21wb25lbnROYW1lfTogaW52YWxpZCB2YWx1ZSBzdXBwbGllZCB0byAke3Byb3BOYW1lfS5gKTtcbiAgfTtcbiAgdmFsaWRhdG9yLmlzUmVxdWlyZWQgPSBmdW5jdGlvbiBvbmVPZlR5cGVSZXF1aXJlZChwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIC4uLnJlc3QpIHtcbiAgICBjb25zdCB7IFtwcm9wTmFtZV06IHByb3BWYWx1ZSB9ID0gcHJvcHM7XG4gICAgaWYgKHR5cGVvZiBwcm9wVmFsdWUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZXR1cm4gbmV3IFR5cGVFcnJvcihgJHtjb21wb25lbnROYW1lfTogbWlzc2luZyB2YWx1ZSBmb3IgcmVxdWlyZWQgJHtwcm9wTmFtZX0uYCk7XG4gICAgfVxuXG4gICAgY29uc3QgZXJyb3JzID0gdmFsaWRhdG9yc1xuICAgICAgLm1hcCgodikgPT4gdihwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIC4uLnJlc3QpKVxuICAgICAgLmZpbHRlcihCb29sZWFuKTtcblxuICAgIGlmIChlcnJvcnMubGVuZ3RoID09PSB2YWxpZGF0b3JzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIG5ldyBUeXBlRXJyb3IoYCR7Y29tcG9uZW50TmFtZX06IGludmFsaWQgdmFsdWUgJHtlcnJvcnN9IHN1cHBsaWVkIHRvIHJlcXVpcmVkICR7cHJvcE5hbWV9LmApO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcbiAgcmV0dXJuIHdyYXBWYWxpZGF0b3IodmFsaWRhdG9yLCAnb25lT2ZUeXBlJywgdmFsaWRhdG9ycyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG9yKHZhbGlkYXRvcnMsIG5hbWUgPSAnb3InKSB7XG4gIGlmICghQXJyYXkuaXNBcnJheSh2YWxpZGF0b3JzKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ29yOiAyIG9yIG1vcmUgdmFsaWRhdG9ycyBhcmUgcmVxdWlyZWQnKTtcbiAgfVxuICBpZiAodmFsaWRhdG9ycy5sZW5ndGggPD0gMSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdvcjogMiBvciBtb3JlIHZhbGlkYXRvcnMgYXJlIHJlcXVpcmVkJyk7XG4gIH1cblxuICBjb25zdCB2YWxpZGF0b3IgPSBvbmVPZlR5cGVWYWxpZGF0b3IoW1xuICAgIGFycmF5T2Yob25lT2ZUeXBlVmFsaWRhdG9yKHZhbGlkYXRvcnMpKSxcbiAgICAuLi52YWxpZGF0b3JzLFxuICBdKTtcblxuICByZXR1cm4gd3JhcFZhbGlkYXRvcih2YWxpZGF0b3IsIG5hbWUsIHZhbGlkYXRvcnMpO1xufVxuIl19