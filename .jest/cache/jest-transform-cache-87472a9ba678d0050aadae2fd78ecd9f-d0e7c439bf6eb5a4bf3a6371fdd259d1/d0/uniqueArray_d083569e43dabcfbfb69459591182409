866477aa98972e0b69a78ce7bd3adb67
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _propTypes = require("prop-types");

var _wrapValidator = _interopRequireDefault(require("./helpers/wrapValidator"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function uniqueCountWithSet(arr) {
  return new Set(arr).size;
}
/* istanbul ignore next */


function uniqueCountLegacy(arr) {
  var seen = [];
  arr.forEach(function (item) {
    if (seen.indexOf(item) === -1) {
      seen.push(item);
    }
  });
  return seen.length;
}

var getUniqueCount = typeof Set === 'function' ? uniqueCountWithSet :
/* istanbul ignore next */
uniqueCountLegacy;

function requiredUniqueArray(props, propName, componentName) {
  for (var _len = arguments.length, rest = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
    rest[_key - 3] = arguments[_key];
  }

  var result = _propTypes.array.isRequired.apply(_propTypes.array, [props, propName, componentName].concat(rest));

  if (result != null) {
    return result;
  }

  var propValue = props[propName];
  var uniqueCount = getUniqueCount(propValue);

  if (uniqueCount !== propValue.length) {
    return new RangeError("".concat(componentName, ": values must be unique. ").concat(propValue.length - uniqueCount, " duplicate values found."));
  }

  return null;
}

function uniqueArray(props, propName) {
  var propValue = props[propName];

  if (propValue == null) {
    return null;
  }

  for (var _len2 = arguments.length, rest = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
    rest[_key2 - 2] = arguments[_key2];
  }

  return requiredUniqueArray.apply(void 0, [props, propName].concat(rest));
}

uniqueArray.isRequired = requiredUniqueArray;

var _default = function _default() {
  return (0, _wrapValidator["default"])(uniqueArray, 'uniqueArray');
};

exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy91bmlxdWVBcnJheS5qcyJdLCJuYW1lcyI6WyJzZWVuIiwiYXJyIiwiZ2V0VW5pcXVlQ291bnQiLCJyZXN0IiwicmVzdWx0IiwiYXJyYXkiLCJwcm9wVmFsdWUiLCJwcm9wcyIsInVuaXF1ZUNvdW50IiwicmVxdWlyZWRVbmlxdWVBcnJheSIsInVuaXF1ZUFycmF5Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsSUFBQSxVQUFBLEdBQUEsT0FBQSxDQUFBLFlBQUEsQ0FBQTs7QUFDQSxJQUFBLGNBQUEsR0FBQSxzQkFBQSxDQUFBLE9BQUEsQ0FBQSx5QkFBQSxDQUFBLENBQUE7Ozs7Ozs7O0FBRUEsU0FBQSxrQkFBQSxDQUFBLEdBQUEsRUFBaUM7QUFBRSxTQUFPLElBQUEsR0FBQSxDQUFBLEdBQUEsRUFBUCxJQUFBO0FBQTJCO0FBQzlEOzs7QUFDQSxTQUFBLGlCQUFBLENBQUEsR0FBQSxFQUFnQztBQUM5QixNQUFNQSxJQUFJLEdBQVYsRUFBQTtBQUNBQyxFQUFBQSxHQUFHLENBQUhBLE9BQUFBLENBQVksVUFBQSxJQUFBLEVBQVU7QUFDcEIsUUFBSUQsSUFBSSxDQUFKQSxPQUFBQSxDQUFBQSxJQUFBQSxNQUF1QixDQUEzQixDQUFBLEVBQStCO0FBQzdCQSxNQUFBQSxJQUFJLENBQUpBLElBQUFBLENBQUFBLElBQUFBO0FBQ0Q7QUFISEMsR0FBQUE7QUFLQSxTQUFPRCxJQUFJLENBQVgsTUFBQTtBQUNEOztBQUVELElBQU1FLGNBQWMsR0FBRyxPQUFBLEdBQUEsS0FBQSxVQUFBLEdBQUEsa0JBQUE7QUFBaUQ7QUFBeEUsaUJBQUE7O0FBRUEsU0FBQSxtQkFBQSxDQUFBLEtBQUEsRUFBQSxRQUFBLEVBQUEsYUFBQSxFQUFzRTtBQUFBLE9BQUEsSUFBQSxJQUFBLEdBQUEsU0FBQSxDQUFBLE1BQUEsRUFBTkMsSUFBTSxHQUFBLElBQUEsS0FBQSxDQUFBLElBQUEsR0FBQSxDQUFBLEdBQUEsSUFBQSxHQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsRUFBQSxJQUFBLEdBQUEsQ0FBQSxFQUFBLElBQUEsR0FBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLEVBQUE7QUFBTkEsSUFBQUEsSUFBTSxDQUFBLElBQUEsR0FBQSxDQUFBLENBQU5BLEdBQU0sU0FBQSxDQUFBLElBQUEsQ0FBTkE7QUFBTTs7QUFDcEUsTUFBTUMsTUFBTSxHQUFHQyxVQUFBQSxDQUFBQSxLQUFBQSxDQUFBQSxVQUFBQSxDQUFBQSxLQUFBQSxDQUFBQSxVQUFBQSxDQUFBQSxLQUFBQSxFQUFBQSxDQUFBQSxLQUFBQSxFQUFBQSxRQUFBQSxFQUFBQSxhQUFBQSxFQUFBQSxNQUFBQSxDQUFmLElBQWVBLENBQUFBLENBQWY7O0FBQ0EsTUFBSUQsTUFBTSxJQUFWLElBQUEsRUFBb0I7QUFDbEIsV0FBQSxNQUFBO0FBQ0Q7O0FBSm1FLE1BTWhERSxTQU5nRCxHQU1sQ0MsS0FOa0MsQ0FBQSxRQUFBLENBQUE7QUFPcEUsTUFBTUMsV0FBVyxHQUFHTixjQUFjLENBQWxDLFNBQWtDLENBQWxDOztBQUNBLE1BQUlNLFdBQVcsS0FBS0YsU0FBUyxDQUE3QixNQUFBLEVBQXNDO0FBQ3BDLFdBQU8sSUFBQSxVQUFBLENBQUEsR0FBQSxNQUFBLENBQUEsYUFBQSxFQUFBLDJCQUFBLEVBQUEsTUFBQSxDQUEyREEsU0FBUyxDQUFUQSxNQUFBQSxHQUEzRCxXQUFBLEVBQVAsMEJBQU8sQ0FBQSxDQUFQO0FBQ0Q7O0FBQ0QsU0FBQSxJQUFBO0FBQ0Q7O0FBRUQsU0FBQSxXQUFBLENBQUEsS0FBQSxFQUFBLFFBQUEsRUFBK0M7QUFBQSxNQUN6QkEsU0FEeUIsR0FDWEMsS0FEVyxDQUFBLFFBQUEsQ0FBQTs7QUFFN0MsTUFBSUQsU0FBUyxJQUFiLElBQUEsRUFBdUI7QUFDckIsV0FBQSxJQUFBO0FBQ0Q7O0FBSjRDLE9BQUEsSUFBQSxLQUFBLEdBQUEsU0FBQSxDQUFBLE1BQUEsRUFBTkgsSUFBTSxHQUFBLElBQUEsS0FBQSxDQUFBLEtBQUEsR0FBQSxDQUFBLEdBQUEsS0FBQSxHQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsRUFBQSxLQUFBLEdBQUEsQ0FBQSxFQUFBLEtBQUEsR0FBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEVBQUE7QUFBTkEsSUFBQUEsSUFBTSxDQUFBLEtBQUEsR0FBQSxDQUFBLENBQU5BLEdBQU0sU0FBQSxDQUFBLEtBQUEsQ0FBTkE7QUFBTTs7QUFNN0MsU0FBT00sbUJBQW1CLENBQW5CQSxLQUFBQSxDQUFBQSxLQUFBQSxDQUFBQSxFQUFBQSxDQUFBQSxLQUFBQSxFQUFBQSxRQUFBQSxFQUFBQSxNQUFBQSxDQUFQLElBQU9BLENBQUFBLENBQVA7QUFDRDs7QUFDREMsV0FBVyxDQUFYQSxVQUFBQSxHQUFBQSxtQkFBQUE7O2VBRWUsU0FBQSxRQUFBLEdBQUE7QUFBQSxTQUFNLENBQUEsR0FBQSxjQUFBLENBQUEsU0FBQSxDQUFBLEVBQUEsV0FBQSxFQUFOLGFBQU0sQ0FBTiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFycmF5IH0gZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgd3JhcFZhbGlkYXRvciBmcm9tICcuL2hlbHBlcnMvd3JhcFZhbGlkYXRvcic7XG5cbmZ1bmN0aW9uIHVuaXF1ZUNvdW50V2l0aFNldChhcnIpIHsgcmV0dXJuIG5ldyBTZXQoYXJyKS5zaXplOyB9XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZnVuY3Rpb24gdW5pcXVlQ291bnRMZWdhY3koYXJyKSB7XG4gIGNvbnN0IHNlZW4gPSBbXTtcbiAgYXJyLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICBpZiAoc2Vlbi5pbmRleE9mKGl0ZW0pID09PSAtMSkge1xuICAgICAgc2Vlbi5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBzZWVuLmxlbmd0aDtcbn1cblxuY29uc3QgZ2V0VW5pcXVlQ291bnQgPSB0eXBlb2YgU2V0ID09PSAnZnVuY3Rpb24nID8gdW5pcXVlQ291bnRXaXRoU2V0IDogLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi8gdW5pcXVlQ291bnRMZWdhY3k7XG5cbmZ1bmN0aW9uIHJlcXVpcmVkVW5pcXVlQXJyYXkocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCAuLi5yZXN0KSB7XG4gIGNvbnN0IHJlc3VsdCA9IGFycmF5LmlzUmVxdWlyZWQocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCAuLi5yZXN0KTtcbiAgaWYgKHJlc3VsdCAhPSBudWxsKSB7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGNvbnN0IHsgW3Byb3BOYW1lXTogcHJvcFZhbHVlIH0gPSBwcm9wcztcbiAgY29uc3QgdW5pcXVlQ291bnQgPSBnZXRVbmlxdWVDb3VudChwcm9wVmFsdWUpO1xuICBpZiAodW5pcXVlQ291bnQgIT09IHByb3BWYWx1ZS5sZW5ndGgpIHtcbiAgICByZXR1cm4gbmV3IFJhbmdlRXJyb3IoYCR7Y29tcG9uZW50TmFtZX06IHZhbHVlcyBtdXN0IGJlIHVuaXF1ZS4gJHtwcm9wVmFsdWUubGVuZ3RoIC0gdW5pcXVlQ291bnR9IGR1cGxpY2F0ZSB2YWx1ZXMgZm91bmQuYCk7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIHVuaXF1ZUFycmF5KHByb3BzLCBwcm9wTmFtZSwgLi4ucmVzdCkge1xuICBjb25zdCB7IFtwcm9wTmFtZV06IHByb3BWYWx1ZSB9ID0gcHJvcHM7XG4gIGlmIChwcm9wVmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIHJlcXVpcmVkVW5pcXVlQXJyYXkocHJvcHMsIHByb3BOYW1lLCAuLi5yZXN0KTtcbn1cbnVuaXF1ZUFycmF5LmlzUmVxdWlyZWQgPSByZXF1aXJlZFVuaXF1ZUFycmF5O1xuXG5leHBvcnQgZGVmYXVsdCAoKSA9PiB3cmFwVmFsaWRhdG9yKHVuaXF1ZUFycmF5LCAndW5pcXVlQXJyYXknKTtcbiJdfQ==