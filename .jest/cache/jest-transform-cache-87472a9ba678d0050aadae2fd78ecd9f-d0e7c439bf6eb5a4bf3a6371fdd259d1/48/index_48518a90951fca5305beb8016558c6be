0b84282f1ad365e2709606f983611d73
'use strict';

var Preprocessor = require('./preprocessor'),
    UNICODE = require('../common/unicode'),
    neTree = require('./named_entity_data'); //Aliases


var $ = UNICODE.CODE_POINTS,
    $$ = UNICODE.CODE_POINT_SEQUENCES; //Replacement code points for numeric entities

var NUMERIC_ENTITY_REPLACEMENTS = {
  0x00: 0xFFFD,
  0x0D: 0x000D,
  0x80: 0x20AC,
  0x81: 0x0081,
  0x82: 0x201A,
  0x83: 0x0192,
  0x84: 0x201E,
  0x85: 0x2026,
  0x86: 0x2020,
  0x87: 0x2021,
  0x88: 0x02C6,
  0x89: 0x2030,
  0x8A: 0x0160,
  0x8B: 0x2039,
  0x8C: 0x0152,
  0x8D: 0x008D,
  0x8E: 0x017D,
  0x8F: 0x008F,
  0x90: 0x0090,
  0x91: 0x2018,
  0x92: 0x2019,
  0x93: 0x201C,
  0x94: 0x201D,
  0x95: 0x2022,
  0x96: 0x2013,
  0x97: 0x2014,
  0x98: 0x02DC,
  0x99: 0x2122,
  0x9A: 0x0161,
  0x9B: 0x203A,
  0x9C: 0x0153,
  0x9D: 0x009D,
  0x9E: 0x017E,
  0x9F: 0x0178
}; // Named entity tree flags

var HAS_DATA_FLAG = 1 << 0;
var DATA_DUPLET_FLAG = 1 << 1;
var HAS_BRANCHES_FLAG = 1 << 2;
var MAX_BRANCH_MARKER_VALUE = HAS_DATA_FLAG | DATA_DUPLET_FLAG | HAS_BRANCHES_FLAG; //States

var DATA_STATE = 'DATA_STATE',
    CHARACTER_REFERENCE_IN_DATA_STATE = 'CHARACTER_REFERENCE_IN_DATA_STATE',
    RCDATA_STATE = 'RCDATA_STATE',
    CHARACTER_REFERENCE_IN_RCDATA_STATE = 'CHARACTER_REFERENCE_IN_RCDATA_STATE',
    RAWTEXT_STATE = 'RAWTEXT_STATE',
    SCRIPT_DATA_STATE = 'SCRIPT_DATA_STATE',
    PLAINTEXT_STATE = 'PLAINTEXT_STATE',
    TAG_OPEN_STATE = 'TAG_OPEN_STATE',
    END_TAG_OPEN_STATE = 'END_TAG_OPEN_STATE',
    TAG_NAME_STATE = 'TAG_NAME_STATE',
    RCDATA_LESS_THAN_SIGN_STATE = 'RCDATA_LESS_THAN_SIGN_STATE',
    RCDATA_END_TAG_OPEN_STATE = 'RCDATA_END_TAG_OPEN_STATE',
    RCDATA_END_TAG_NAME_STATE = 'RCDATA_END_TAG_NAME_STATE',
    RAWTEXT_LESS_THAN_SIGN_STATE = 'RAWTEXT_LESS_THAN_SIGN_STATE',
    RAWTEXT_END_TAG_OPEN_STATE = 'RAWTEXT_END_TAG_OPEN_STATE',
    RAWTEXT_END_TAG_NAME_STATE = 'RAWTEXT_END_TAG_NAME_STATE',
    SCRIPT_DATA_LESS_THAN_SIGN_STATE = 'SCRIPT_DATA_LESS_THAN_SIGN_STATE',
    SCRIPT_DATA_END_TAG_OPEN_STATE = 'SCRIPT_DATA_END_TAG_OPEN_STATE',
    SCRIPT_DATA_END_TAG_NAME_STATE = 'SCRIPT_DATA_END_TAG_NAME_STATE',
    SCRIPT_DATA_ESCAPE_START_STATE = 'SCRIPT_DATA_ESCAPE_START_STATE',
    SCRIPT_DATA_ESCAPE_START_DASH_STATE = 'SCRIPT_DATA_ESCAPE_START_DASH_STATE',
    SCRIPT_DATA_ESCAPED_STATE = 'SCRIPT_DATA_ESCAPED_STATE',
    SCRIPT_DATA_ESCAPED_DASH_STATE = 'SCRIPT_DATA_ESCAPED_DASH_STATE',
    SCRIPT_DATA_ESCAPED_DASH_DASH_STATE = 'SCRIPT_DATA_ESCAPED_DASH_DASH_STATE',
    SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE = 'SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE',
    SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE = 'SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE',
    SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE = 'SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE',
    SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE',
    SCRIPT_DATA_DOUBLE_ESCAPED_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_STATE',
    SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE',
    SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE',
    SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE',
    SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE',
    BEFORE_ATTRIBUTE_NAME_STATE = 'BEFORE_ATTRIBUTE_NAME_STATE',
    ATTRIBUTE_NAME_STATE = 'ATTRIBUTE_NAME_STATE',
    AFTER_ATTRIBUTE_NAME_STATE = 'AFTER_ATTRIBUTE_NAME_STATE',
    BEFORE_ATTRIBUTE_VALUE_STATE = 'BEFORE_ATTRIBUTE_VALUE_STATE',
    ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE = 'ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE',
    ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE = 'ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE',
    ATTRIBUTE_VALUE_UNQUOTED_STATE = 'ATTRIBUTE_VALUE_UNQUOTED_STATE',
    CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE = 'CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE',
    AFTER_ATTRIBUTE_VALUE_QUOTED_STATE = 'AFTER_ATTRIBUTE_VALUE_QUOTED_STATE',
    SELF_CLOSING_START_TAG_STATE = 'SELF_CLOSING_START_TAG_STATE',
    BOGUS_COMMENT_STATE = 'BOGUS_COMMENT_STATE',
    BOGUS_COMMENT_STATE_CONTINUATION = 'BOGUS_COMMENT_STATE_CONTINUATION',
    MARKUP_DECLARATION_OPEN_STATE = 'MARKUP_DECLARATION_OPEN_STATE',
    COMMENT_START_STATE = 'COMMENT_START_STATE',
    COMMENT_START_DASH_STATE = 'COMMENT_START_DASH_STATE',
    COMMENT_STATE = 'COMMENT_STATE',
    COMMENT_END_DASH_STATE = 'COMMENT_END_DASH_STATE',
    COMMENT_END_STATE = 'COMMENT_END_STATE',
    COMMENT_END_BANG_STATE = 'COMMENT_END_BANG_STATE',
    DOCTYPE_STATE = 'DOCTYPE_STATE',
    DOCTYPE_NAME_STATE = 'DOCTYPE_NAME_STATE',
    AFTER_DOCTYPE_NAME_STATE = 'AFTER_DOCTYPE_NAME_STATE',
    BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE = 'BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE',
    DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE = 'DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE',
    DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE = 'DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE',
    BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE = 'BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE',
    BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE = 'BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE',
    DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE = 'DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE',
    DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE = 'DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE',
    AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE = 'AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE',
    BOGUS_DOCTYPE_STATE = 'BOGUS_DOCTYPE_STATE',
    CDATA_SECTION_STATE = 'CDATA_SECTION_STATE'; //Utils
//OPTIMIZATION: these utility functions should not be moved out of this module. V8 Crankshaft will not inline
//this functions if they will be situated in another module due to context switch.
//Always perform inlining check before modifying this functions ('node --trace-inlining').

function isWhitespace(cp) {
  return cp === $.SPACE || cp === $.LINE_FEED || cp === $.TABULATION || cp === $.FORM_FEED;
}

function isAsciiDigit(cp) {
  return cp >= $.DIGIT_0 && cp <= $.DIGIT_9;
}

function isAsciiUpper(cp) {
  return cp >= $.LATIN_CAPITAL_A && cp <= $.LATIN_CAPITAL_Z;
}

function isAsciiLower(cp) {
  return cp >= $.LATIN_SMALL_A && cp <= $.LATIN_SMALL_Z;
}

function isAsciiLetter(cp) {
  return isAsciiLower(cp) || isAsciiUpper(cp);
}

function isAsciiAlphaNumeric(cp) {
  return isAsciiLetter(cp) || isAsciiDigit(cp);
}

function isDigit(cp, isHex) {
  return isAsciiDigit(cp) || isHex && (cp >= $.LATIN_CAPITAL_A && cp <= $.LATIN_CAPITAL_F || cp >= $.LATIN_SMALL_A && cp <= $.LATIN_SMALL_F);
}

function isReservedCodePoint(cp) {
  return cp >= 0xD800 && cp <= 0xDFFF || cp > 0x10FFFF;
}

function toAsciiLowerCodePoint(cp) {
  return cp + 0x0020;
} //NOTE: String.fromCharCode() function can handle only characters from BMP subset.
//So, we need to workaround this manually.
//(see: https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/fromCharCode#Getting_it_to_work_with_higher_values)


function toChar(cp) {
  if (cp <= 0xFFFF) return String.fromCharCode(cp);
  cp -= 0x10000;
  return String.fromCharCode(cp >>> 10 & 0x3FF | 0xD800) + String.fromCharCode(0xDC00 | cp & 0x3FF);
}

function toAsciiLowerChar(cp) {
  return String.fromCharCode(toAsciiLowerCodePoint(cp));
}

function findNamedEntityTreeBranch(nodeIx, cp) {
  var branchCount = neTree[++nodeIx],
      lo = ++nodeIx,
      hi = lo + branchCount - 1;

  while (lo <= hi) {
    var mid = lo + hi >>> 1,
        midCp = neTree[mid];
    if (midCp < cp) lo = mid + 1;else if (midCp > cp) hi = mid - 1;else return neTree[mid + branchCount];
  }

  return -1;
} //Tokenizer


var Tokenizer = module.exports = function () {
  this.preprocessor = new Preprocessor();
  this.tokenQueue = [];
  this.allowCDATA = false;
  this.state = DATA_STATE;
  this.returnState = '';
  this.tempBuff = [];
  this.additionalAllowedCp = void 0;
  this.lastStartTagName = '';
  this.consumedAfterSnapshot = -1;
  this.active = false;
  this.currentCharacterToken = null;
  this.currentToken = null;
  this.currentAttr = null;
}; //Token types


Tokenizer.CHARACTER_TOKEN = 'CHARACTER_TOKEN';
Tokenizer.NULL_CHARACTER_TOKEN = 'NULL_CHARACTER_TOKEN';
Tokenizer.WHITESPACE_CHARACTER_TOKEN = 'WHITESPACE_CHARACTER_TOKEN';
Tokenizer.START_TAG_TOKEN = 'START_TAG_TOKEN';
Tokenizer.END_TAG_TOKEN = 'END_TAG_TOKEN';
Tokenizer.COMMENT_TOKEN = 'COMMENT_TOKEN';
Tokenizer.DOCTYPE_TOKEN = 'DOCTYPE_TOKEN';
Tokenizer.EOF_TOKEN = 'EOF_TOKEN';
Tokenizer.HIBERNATION_TOKEN = 'HIBERNATION_TOKEN'; //Tokenizer initial states for different modes

Tokenizer.MODE = {
  DATA: DATA_STATE,
  RCDATA: RCDATA_STATE,
  RAWTEXT: RAWTEXT_STATE,
  SCRIPT_DATA: SCRIPT_DATA_STATE,
  PLAINTEXT: PLAINTEXT_STATE
}; //Static

Tokenizer.getTokenAttr = function (token, attrName) {
  for (var i = token.attrs.length - 1; i >= 0; i--) {
    if (token.attrs[i].name === attrName) return token.attrs[i].value;
  }

  return null;
}; //API


Tokenizer.prototype.getNextToken = function () {
  while (!this.tokenQueue.length && this.active) {
    this._hibernationSnapshot();

    var cp = this._consume();

    if (!this._ensureHibernation()) this[this.state](cp);
  }

  return this.tokenQueue.shift();
};

Tokenizer.prototype.write = function (chunk, isLastChunk) {
  this.active = true;
  this.preprocessor.write(chunk, isLastChunk);
};

Tokenizer.prototype.insertHtmlAtCurrentPos = function (chunk) {
  this.active = true;
  this.preprocessor.insertHtmlAtCurrentPos(chunk);
}; //Hibernation


Tokenizer.prototype._hibernationSnapshot = function () {
  this.consumedAfterSnapshot = 0;
};

Tokenizer.prototype._ensureHibernation = function () {
  if (this.preprocessor.endOfChunkHit) {
    for (; this.consumedAfterSnapshot > 0; this.consumedAfterSnapshot--) this.preprocessor.retreat();

    this.active = false;
    this.tokenQueue.push({
      type: Tokenizer.HIBERNATION_TOKEN
    });
    return true;
  }

  return false;
}; //Consumption


Tokenizer.prototype._consume = function () {
  this.consumedAfterSnapshot++;
  return this.preprocessor.advance();
};

Tokenizer.prototype._unconsume = function () {
  this.consumedAfterSnapshot--;
  this.preprocessor.retreat();
};

Tokenizer.prototype._unconsumeSeveral = function (count) {
  while (count--) this._unconsume();
};

Tokenizer.prototype._reconsumeInState = function (state) {
  this.state = state;

  this._unconsume();
};

Tokenizer.prototype._consumeSubsequentIfMatch = function (pattern, startCp, caseSensitive) {
  var consumedCount = 0,
      isMatch = true,
      patternLength = pattern.length,
      patternPos = 0,
      cp = startCp,
      patternCp = void 0;

  for (; patternPos < patternLength; patternPos++) {
    if (patternPos > 0) {
      cp = this._consume();
      consumedCount++;
    }

    if (cp === $.EOF) {
      isMatch = false;
      break;
    }

    patternCp = pattern[patternPos];

    if (cp !== patternCp && (caseSensitive || cp !== toAsciiLowerCodePoint(patternCp))) {
      isMatch = false;
      break;
    }
  }

  if (!isMatch) this._unconsumeSeveral(consumedCount);
  return isMatch;
}; //Lookahead


Tokenizer.prototype._lookahead = function () {
  var cp = this._consume();

  this._unconsume();

  return cp;
}; //Temp buffer


Tokenizer.prototype.isTempBufferEqualToScriptString = function () {
  if (this.tempBuff.length !== $$.SCRIPT_STRING.length) return false;

  for (var i = 0; i < this.tempBuff.length; i++) {
    if (this.tempBuff[i] !== $$.SCRIPT_STRING[i]) return false;
  }

  return true;
}; //Token creation


Tokenizer.prototype._createStartTagToken = function () {
  this.currentToken = {
    type: Tokenizer.START_TAG_TOKEN,
    tagName: '',
    selfClosing: false,
    attrs: []
  };
};

Tokenizer.prototype._createEndTagToken = function () {
  this.currentToken = {
    type: Tokenizer.END_TAG_TOKEN,
    tagName: '',
    attrs: []
  };
};

Tokenizer.prototype._createCommentToken = function () {
  this.currentToken = {
    type: Tokenizer.COMMENT_TOKEN,
    data: ''
  };
};

Tokenizer.prototype._createDoctypeToken = function (initialName) {
  this.currentToken = {
    type: Tokenizer.DOCTYPE_TOKEN,
    name: initialName,
    forceQuirks: false,
    publicId: null,
    systemId: null
  };
};

Tokenizer.prototype._createCharacterToken = function (type, ch) {
  this.currentCharacterToken = {
    type: type,
    chars: ch
  };
}; //Tag attributes


Tokenizer.prototype._createAttr = function (attrNameFirstCh) {
  this.currentAttr = {
    name: attrNameFirstCh,
    value: ''
  };
};

Tokenizer.prototype._isDuplicateAttr = function () {
  return Tokenizer.getTokenAttr(this.currentToken, this.currentAttr.name) !== null;
};

Tokenizer.prototype._leaveAttrName = function (toState) {
  this.state = toState;
  if (!this._isDuplicateAttr()) this.currentToken.attrs.push(this.currentAttr);
};

Tokenizer.prototype._leaveAttrValue = function (toState) {
  this.state = toState;
}; //Appropriate end tag token
//(see: http://www.whatwg.org/specs/web-apps/current-work/multipage/tokenization.html#appropriate-end-tag-token)


Tokenizer.prototype._isAppropriateEndTagToken = function () {
  return this.lastStartTagName === this.currentToken.tagName;
}; //Token emission


Tokenizer.prototype._emitCurrentToken = function () {
  this._emitCurrentCharacterToken(); //NOTE: store emited start tag's tagName to determine is the following end tag token is appropriate.


  if (this.currentToken.type === Tokenizer.START_TAG_TOKEN) this.lastStartTagName = this.currentToken.tagName;
  this.tokenQueue.push(this.currentToken);
  this.currentToken = null;
};

Tokenizer.prototype._emitCurrentCharacterToken = function () {
  if (this.currentCharacterToken) {
    this.tokenQueue.push(this.currentCharacterToken);
    this.currentCharacterToken = null;
  }
};

Tokenizer.prototype._emitEOFToken = function () {
  this._emitCurrentCharacterToken();

  this.tokenQueue.push({
    type: Tokenizer.EOF_TOKEN
  });
}; //Characters emission
//OPTIMIZATION: specification uses only one type of character tokens (one token per character).
//This causes a huge memory overhead and a lot of unnecessary parser loops. parse5 uses 3 groups of characters.
//If we have a sequence of characters that belong to the same group, parser can process it
//as a single solid character token.
//So, there are 3 types of character tokens in parse5:
//1)NULL_CHARACTER_TOKEN - \u0000-character sequences (e.g. '\u0000\u0000\u0000')
//2)WHITESPACE_CHARACTER_TOKEN - any whitespace/new-line character sequences (e.g. '\n  \r\t   \f')
//3)CHARACTER_TOKEN - any character sequence which don't belong to groups 1 and 2 (e.g. 'abcdef1234@@#$%^')


Tokenizer.prototype._appendCharToCurrentCharacterToken = function (type, ch) {
  if (this.currentCharacterToken && this.currentCharacterToken.type !== type) this._emitCurrentCharacterToken();
  if (this.currentCharacterToken) this.currentCharacterToken.chars += ch;else this._createCharacterToken(type, ch);
};

Tokenizer.prototype._emitCodePoint = function (cp) {
  var type = Tokenizer.CHARACTER_TOKEN;
  if (isWhitespace(cp)) type = Tokenizer.WHITESPACE_CHARACTER_TOKEN;else if (cp === $.NULL) type = Tokenizer.NULL_CHARACTER_TOKEN;

  this._appendCharToCurrentCharacterToken(type, toChar(cp));
};

Tokenizer.prototype._emitSeveralCodePoints = function (codePoints) {
  for (var i = 0; i < codePoints.length; i++) this._emitCodePoint(codePoints[i]);
}; //NOTE: used then we emit character explicitly. This is always a non-whitespace and a non-null character.
//So we can avoid additional checks here.


Tokenizer.prototype._emitChar = function (ch) {
  this._appendCharToCurrentCharacterToken(Tokenizer.CHARACTER_TOKEN, ch);
}; //Character reference tokenization


Tokenizer.prototype._consumeNumericEntity = function (isHex) {
  var digits = '',
      nextCp = void 0;

  do {
    digits += toChar(this._consume());
    nextCp = this._lookahead();
  } while (nextCp !== $.EOF && isDigit(nextCp, isHex));

  if (this._lookahead() === $.SEMICOLON) this._consume();
  var referencedCp = parseInt(digits, isHex ? 16 : 10),
      replacement = NUMERIC_ENTITY_REPLACEMENTS[referencedCp];
  if (replacement) return replacement;
  if (isReservedCodePoint(referencedCp)) return $.REPLACEMENT_CHARACTER;
  return referencedCp;
}; // NOTE: for the details on this algorithm see
// https://github.com/inikulin/parse5/tree/master/scripts/generate_named_entity_data/README.md


Tokenizer.prototype._consumeNamedEntity = function (inAttr) {
  var referencedCodePoints = null,
      referenceSize = 0,
      cp = null,
      consumedCount = 0,
      semicolonTerminated = false;

  for (var i = 0; i > -1;) {
    var current = neTree[i],
        inNode = current < MAX_BRANCH_MARKER_VALUE,
        nodeWithData = inNode && current & HAS_DATA_FLAG;

    if (nodeWithData) {
      referencedCodePoints = current & DATA_DUPLET_FLAG ? [neTree[++i], neTree[++i]] : [neTree[++i]];
      referenceSize = consumedCount;

      if (cp === $.SEMICOLON) {
        semicolonTerminated = true;
        break;
      }
    }

    cp = this._consume();
    consumedCount++;
    if (cp === $.EOF) break;
    if (inNode) i = current & HAS_BRANCHES_FLAG ? findNamedEntityTreeBranch(i, cp) : -1;else i = cp === current ? ++i : -1;
  }

  if (referencedCodePoints) {
    if (!semicolonTerminated) {
      //NOTE: unconsume excess (e.g. 'it' in '&notit')
      this._unconsumeSeveral(consumedCount - referenceSize); //NOTE: If the character reference is being consumed as part of an attribute and the next character
      //is either a U+003D EQUALS SIGN character (=) or an alphanumeric ASCII character, then, for historical
      //reasons, all the characters that were matched after the U+0026 AMPERSAND character (&) must be
      //unconsumed, and nothing is returned.
      //However, if this next character is in fact a U+003D EQUALS SIGN character (=), then this is a
      //parse error, because some legacy user agents will misinterpret the markup in those cases.
      //(see: http://www.whatwg.org/specs/web-apps/current-work/multipage/tokenization.html#tokenizing-character-references)


      if (inAttr) {
        var nextCp = this._lookahead();

        if (nextCp === $.EQUALS_SIGN || isAsciiAlphaNumeric(nextCp)) {
          this._unconsumeSeveral(referenceSize);

          return null;
        }
      }
    }

    return referencedCodePoints;
  }

  this._unconsumeSeveral(consumedCount);

  return null;
};

Tokenizer.prototype._consumeCharacterReference = function (startCp, inAttr) {
  if (isWhitespace(startCp) || startCp === $.GREATER_THAN_SIGN || startCp === $.AMPERSAND || startCp === this.additionalAllowedCp || startCp === $.EOF) {
    //NOTE: not a character reference. No characters are consumed, and nothing is returned.
    this._unconsume();

    return null;
  }

  if (startCp === $.NUMBER_SIGN) {
    //NOTE: we have a numeric entity candidate, now we should determine if it's hex or decimal
    var isHex = false,
        nextCp = this._lookahead();

    if (nextCp === $.LATIN_SMALL_X || nextCp === $.LATIN_CAPITAL_X) {
      this._consume();

      isHex = true;
    }

    nextCp = this._lookahead(); //NOTE: if we have at least one digit this is a numeric entity for sure, so we consume it

    if (nextCp !== $.EOF && isDigit(nextCp, isHex)) return [this._consumeNumericEntity(isHex)]; //NOTE: otherwise this is a bogus number entity and a parse error. Unconsume the number sign
    //and the 'x'-character if appropriate.

    this._unconsumeSeveral(isHex ? 2 : 1);

    return null;
  }

  this._unconsume();

  return this._consumeNamedEntity(inAttr);
}; //State machine


var _ = Tokenizer.prototype; //12.2.4.1 Data state
//------------------------------------------------------------------

_[DATA_STATE] = function dataState(cp) {
  this.preprocessor.dropParsedChunk();
  if (cp === $.AMPERSAND) this.state = CHARACTER_REFERENCE_IN_DATA_STATE;else if (cp === $.LESS_THAN_SIGN) this.state = TAG_OPEN_STATE;else if (cp === $.NULL) this._emitCodePoint(cp);else if (cp === $.EOF) this._emitEOFToken();else this._emitCodePoint(cp);
}; //12.2.4.2 Character reference in data state
//------------------------------------------------------------------


_[CHARACTER_REFERENCE_IN_DATA_STATE] = function characterReferenceInDataState(cp) {
  this.additionalAllowedCp = void 0;

  var referencedCodePoints = this._consumeCharacterReference(cp, false);

  if (!this._ensureHibernation()) {
    if (referencedCodePoints) this._emitSeveralCodePoints(referencedCodePoints);else this._emitChar('&');
    this.state = DATA_STATE;
  }
}; //12.2.4.3 RCDATA state
//------------------------------------------------------------------


_[RCDATA_STATE] = function rcdataState(cp) {
  this.preprocessor.dropParsedChunk();
  if (cp === $.AMPERSAND) this.state = CHARACTER_REFERENCE_IN_RCDATA_STATE;else if (cp === $.LESS_THAN_SIGN) this.state = RCDATA_LESS_THAN_SIGN_STATE;else if (cp === $.NULL) this._emitChar(UNICODE.REPLACEMENT_CHARACTER);else if (cp === $.EOF) this._emitEOFToken();else this._emitCodePoint(cp);
}; //12.2.4.4 Character reference in RCDATA state
//------------------------------------------------------------------


_[CHARACTER_REFERENCE_IN_RCDATA_STATE] = function characterReferenceInRcdataState(cp) {
  this.additionalAllowedCp = void 0;

  var referencedCodePoints = this._consumeCharacterReference(cp, false);

  if (!this._ensureHibernation()) {
    if (referencedCodePoints) this._emitSeveralCodePoints(referencedCodePoints);else this._emitChar('&');
    this.state = RCDATA_STATE;
  }
}; //12.2.4.5 RAWTEXT state
//------------------------------------------------------------------


_[RAWTEXT_STATE] = function rawtextState(cp) {
  this.preprocessor.dropParsedChunk();
  if (cp === $.LESS_THAN_SIGN) this.state = RAWTEXT_LESS_THAN_SIGN_STATE;else if (cp === $.NULL) this._emitChar(UNICODE.REPLACEMENT_CHARACTER);else if (cp === $.EOF) this._emitEOFToken();else this._emitCodePoint(cp);
}; //12.2.4.6 Script data state
//------------------------------------------------------------------


_[SCRIPT_DATA_STATE] = function scriptDataState(cp) {
  this.preprocessor.dropParsedChunk();
  if (cp === $.LESS_THAN_SIGN) this.state = SCRIPT_DATA_LESS_THAN_SIGN_STATE;else if (cp === $.NULL) this._emitChar(UNICODE.REPLACEMENT_CHARACTER);else if (cp === $.EOF) this._emitEOFToken();else this._emitCodePoint(cp);
}; //12.2.4.7 PLAINTEXT state
//------------------------------------------------------------------


_[PLAINTEXT_STATE] = function plaintextState(cp) {
  this.preprocessor.dropParsedChunk();
  if (cp === $.NULL) this._emitChar(UNICODE.REPLACEMENT_CHARACTER);else if (cp === $.EOF) this._emitEOFToken();else this._emitCodePoint(cp);
}; //12.2.4.8 Tag open state
//------------------------------------------------------------------


_[TAG_OPEN_STATE] = function tagOpenState(cp) {
  if (cp === $.EXCLAMATION_MARK) this.state = MARKUP_DECLARATION_OPEN_STATE;else if (cp === $.SOLIDUS) this.state = END_TAG_OPEN_STATE;else if (isAsciiLetter(cp)) {
    this._createStartTagToken();

    this._reconsumeInState(TAG_NAME_STATE);
  } else if (cp === $.QUESTION_MARK) this._reconsumeInState(BOGUS_COMMENT_STATE);else {
    this._emitChar('<');

    this._reconsumeInState(DATA_STATE);
  }
}; //12.2.4.9 End tag open state
//------------------------------------------------------------------


_[END_TAG_OPEN_STATE] = function endTagOpenState(cp) {
  if (isAsciiLetter(cp)) {
    this._createEndTagToken();

    this._reconsumeInState(TAG_NAME_STATE);
  } else if (cp === $.GREATER_THAN_SIGN) this.state = DATA_STATE;else if (cp === $.EOF) {
    this._reconsumeInState(DATA_STATE);

    this._emitChar('<');

    this._emitChar('/');
  } else this._reconsumeInState(BOGUS_COMMENT_STATE);
}; //12.2.4.10 Tag name state
//------------------------------------------------------------------


_[TAG_NAME_STATE] = function tagNameState(cp) {
  if (isWhitespace(cp)) this.state = BEFORE_ATTRIBUTE_NAME_STATE;else if (cp === $.SOLIDUS) this.state = SELF_CLOSING_START_TAG_STATE;else if (cp === $.GREATER_THAN_SIGN) {
    this.state = DATA_STATE;

    this._emitCurrentToken();
  } else if (isAsciiUpper(cp)) this.currentToken.tagName += toAsciiLowerChar(cp);else if (cp === $.NULL) this.currentToken.tagName += UNICODE.REPLACEMENT_CHARACTER;else if (cp === $.EOF) this._reconsumeInState(DATA_STATE);else this.currentToken.tagName += toChar(cp);
}; //12.2.4.11 RCDATA less-than sign state
//------------------------------------------------------------------


_[RCDATA_LESS_THAN_SIGN_STATE] = function rcdataLessThanSignState(cp) {
  if (cp === $.SOLIDUS) {
    this.tempBuff = [];
    this.state = RCDATA_END_TAG_OPEN_STATE;
  } else {
    this._emitChar('<');

    this._reconsumeInState(RCDATA_STATE);
  }
}; //12.2.4.12 RCDATA end tag open state
//------------------------------------------------------------------


_[RCDATA_END_TAG_OPEN_STATE] = function rcdataEndTagOpenState(cp) {
  if (isAsciiLetter(cp)) {
    this._createEndTagToken();

    this._reconsumeInState(RCDATA_END_TAG_NAME_STATE);
  } else {
    this._emitChar('<');

    this._emitChar('/');

    this._reconsumeInState(RCDATA_STATE);
  }
}; //12.2.4.13 RCDATA end tag name state
//------------------------------------------------------------------


_[RCDATA_END_TAG_NAME_STATE] = function rcdataEndTagNameState(cp) {
  if (isAsciiUpper(cp)) {
    this.currentToken.tagName += toAsciiLowerChar(cp);
    this.tempBuff.push(cp);
  } else if (isAsciiLower(cp)) {
    this.currentToken.tagName += toChar(cp);
    this.tempBuff.push(cp);
  } else {
    if (this._isAppropriateEndTagToken()) {
      if (isWhitespace(cp)) {
        this.state = BEFORE_ATTRIBUTE_NAME_STATE;
        return;
      }

      if (cp === $.SOLIDUS) {
        this.state = SELF_CLOSING_START_TAG_STATE;
        return;
      }

      if (cp === $.GREATER_THAN_SIGN) {
        this.state = DATA_STATE;

        this._emitCurrentToken();

        return;
      }
    }

    this._emitChar('<');

    this._emitChar('/');

    this._emitSeveralCodePoints(this.tempBuff);

    this._reconsumeInState(RCDATA_STATE);
  }
}; //12.2.4.14 RAWTEXT less-than sign state
//------------------------------------------------------------------


_[RAWTEXT_LESS_THAN_SIGN_STATE] = function rawtextLessThanSignState(cp) {
  if (cp === $.SOLIDUS) {
    this.tempBuff = [];
    this.state = RAWTEXT_END_TAG_OPEN_STATE;
  } else {
    this._emitChar('<');

    this._reconsumeInState(RAWTEXT_STATE);
  }
}; //12.2.4.15 RAWTEXT end tag open state
//------------------------------------------------------------------


_[RAWTEXT_END_TAG_OPEN_STATE] = function rawtextEndTagOpenState(cp) {
  if (isAsciiLetter(cp)) {
    this._createEndTagToken();

    this._reconsumeInState(RAWTEXT_END_TAG_NAME_STATE);
  } else {
    this._emitChar('<');

    this._emitChar('/');

    this._reconsumeInState(RAWTEXT_STATE);
  }
}; //12.2.4.16 RAWTEXT end tag name state
//------------------------------------------------------------------


_[RAWTEXT_END_TAG_NAME_STATE] = function rawtextEndTagNameState(cp) {
  if (isAsciiUpper(cp)) {
    this.currentToken.tagName += toAsciiLowerChar(cp);
    this.tempBuff.push(cp);
  } else if (isAsciiLower(cp)) {
    this.currentToken.tagName += toChar(cp);
    this.tempBuff.push(cp);
  } else {
    if (this._isAppropriateEndTagToken()) {
      if (isWhitespace(cp)) {
        this.state = BEFORE_ATTRIBUTE_NAME_STATE;
        return;
      }

      if (cp === $.SOLIDUS) {
        this.state = SELF_CLOSING_START_TAG_STATE;
        return;
      }

      if (cp === $.GREATER_THAN_SIGN) {
        this._emitCurrentToken();

        this.state = DATA_STATE;
        return;
      }
    }

    this._emitChar('<');

    this._emitChar('/');

    this._emitSeveralCodePoints(this.tempBuff);

    this._reconsumeInState(RAWTEXT_STATE);
  }
}; //12.2.4.17 Script data less-than sign state
//------------------------------------------------------------------


_[SCRIPT_DATA_LESS_THAN_SIGN_STATE] = function scriptDataLessThanSignState(cp) {
  if (cp === $.SOLIDUS) {
    this.tempBuff = [];
    this.state = SCRIPT_DATA_END_TAG_OPEN_STATE;
  } else if (cp === $.EXCLAMATION_MARK) {
    this.state = SCRIPT_DATA_ESCAPE_START_STATE;

    this._emitChar('<');

    this._emitChar('!');
  } else {
    this._emitChar('<');

    this._reconsumeInState(SCRIPT_DATA_STATE);
  }
}; //12.2.4.18 Script data end tag open state
//------------------------------------------------------------------


_[SCRIPT_DATA_END_TAG_OPEN_STATE] = function scriptDataEndTagOpenState(cp) {
  if (isAsciiLetter(cp)) {
    this._createEndTagToken();

    this._reconsumeInState(SCRIPT_DATA_END_TAG_NAME_STATE);
  } else {
    this._emitChar('<');

    this._emitChar('/');

    this._reconsumeInState(SCRIPT_DATA_STATE);
  }
}; //12.2.4.19 Script data end tag name state
//------------------------------------------------------------------


_[SCRIPT_DATA_END_TAG_NAME_STATE] = function scriptDataEndTagNameState(cp) {
  if (isAsciiUpper(cp)) {
    this.currentToken.tagName += toAsciiLowerChar(cp);
    this.tempBuff.push(cp);
  } else if (isAsciiLower(cp)) {
    this.currentToken.tagName += toChar(cp);
    this.tempBuff.push(cp);
  } else {
    if (this._isAppropriateEndTagToken()) {
      if (isWhitespace(cp)) {
        this.state = BEFORE_ATTRIBUTE_NAME_STATE;
        return;
      } else if (cp === $.SOLIDUS) {
        this.state = SELF_CLOSING_START_TAG_STATE;
        return;
      } else if (cp === $.GREATER_THAN_SIGN) {
        this._emitCurrentToken();

        this.state = DATA_STATE;
        return;
      }
    }

    this._emitChar('<');

    this._emitChar('/');

    this._emitSeveralCodePoints(this.tempBuff);

    this._reconsumeInState(SCRIPT_DATA_STATE);
  }
}; //12.2.4.20 Script data escape start state
//------------------------------------------------------------------


_[SCRIPT_DATA_ESCAPE_START_STATE] = function scriptDataEscapeStartState(cp) {
  if (cp === $.HYPHEN_MINUS) {
    this.state = SCRIPT_DATA_ESCAPE_START_DASH_STATE;

    this._emitChar('-');
  } else this._reconsumeInState(SCRIPT_DATA_STATE);
}; //12.2.4.21 Script data escape start dash state
//------------------------------------------------------------------


_[SCRIPT_DATA_ESCAPE_START_DASH_STATE] = function scriptDataEscapeStartDashState(cp) {
  if (cp === $.HYPHEN_MINUS) {
    this.state = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;

    this._emitChar('-');
  } else this._reconsumeInState(SCRIPT_DATA_STATE);
}; //12.2.4.22 Script data escaped state
//------------------------------------------------------------------


_[SCRIPT_DATA_ESCAPED_STATE] = function scriptDataEscapedState(cp) {
  if (cp === $.HYPHEN_MINUS) {
    this.state = SCRIPT_DATA_ESCAPED_DASH_STATE;

    this._emitChar('-');
  } else if (cp === $.LESS_THAN_SIGN) this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;else if (cp === $.NULL) this._emitChar(UNICODE.REPLACEMENT_CHARACTER);else if (cp === $.EOF) this._reconsumeInState(DATA_STATE);else this._emitCodePoint(cp);
}; //12.2.4.23 Script data escaped dash state
//------------------------------------------------------------------


_[SCRIPT_DATA_ESCAPED_DASH_STATE] = function scriptDataEscapedDashState(cp) {
  if (cp === $.HYPHEN_MINUS) {
    this.state = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;

    this._emitChar('-');
  } else if (cp === $.LESS_THAN_SIGN) this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;else if (cp === $.NULL) {
    this.state = SCRIPT_DATA_ESCAPED_STATE;

    this._emitChar(UNICODE.REPLACEMENT_CHARACTER);
  } else if (cp === $.EOF) this._reconsumeInState(DATA_STATE);else {
    this.state = SCRIPT_DATA_ESCAPED_STATE;

    this._emitCodePoint(cp);
  }
}; //12.2.4.24 Script data escaped dash dash state
//------------------------------------------------------------------


_[SCRIPT_DATA_ESCAPED_DASH_DASH_STATE] = function scriptDataEscapedDashDashState(cp) {
  if (cp === $.HYPHEN_MINUS) this._emitChar('-');else if (cp === $.LESS_THAN_SIGN) this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;else if (cp === $.GREATER_THAN_SIGN) {
    this.state = SCRIPT_DATA_STATE;

    this._emitChar('>');
  } else if (cp === $.NULL) {
    this.state = SCRIPT_DATA_ESCAPED_STATE;

    this._emitChar(UNICODE.REPLACEMENT_CHARACTER);
  } else if (cp === $.EOF) this._reconsumeInState(DATA_STATE);else {
    this.state = SCRIPT_DATA_ESCAPED_STATE;

    this._emitCodePoint(cp);
  }
}; //12.2.4.25 Script data escaped less-than sign state
//------------------------------------------------------------------


_[SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE] = function scriptDataEscapedLessThanSignState(cp) {
  if (cp === $.SOLIDUS) {
    this.tempBuff = [];
    this.state = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;
  } else if (isAsciiLetter(cp)) {
    this.tempBuff = [];

    this._emitChar('<');

    this._reconsumeInState(SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE);
  } else {
    this._emitChar('<');

    this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);
  }
}; //12.2.4.26 Script data escaped end tag open state
//------------------------------------------------------------------


_[SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE] = function scriptDataEscapedEndTagOpenState(cp) {
  if (isAsciiLetter(cp)) {
    this._createEndTagToken();

    this._reconsumeInState(SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE);
  } else {
    this._emitChar('<');

    this._emitChar('/');

    this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);
  }
}; //12.2.4.27 Script data escaped end tag name state
//------------------------------------------------------------------


_[SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE] = function scriptDataEscapedEndTagNameState(cp) {
  if (isAsciiUpper(cp)) {
    this.currentToken.tagName += toAsciiLowerChar(cp);
    this.tempBuff.push(cp);
  } else if (isAsciiLower(cp)) {
    this.currentToken.tagName += toChar(cp);
    this.tempBuff.push(cp);
  } else {
    if (this._isAppropriateEndTagToken()) {
      if (isWhitespace(cp)) {
        this.state = BEFORE_ATTRIBUTE_NAME_STATE;
        return;
      }

      if (cp === $.SOLIDUS) {
        this.state = SELF_CLOSING_START_TAG_STATE;
        return;
      }

      if (cp === $.GREATER_THAN_SIGN) {
        this._emitCurrentToken();

        this.state = DATA_STATE;
        return;
      }
    }

    this._emitChar('<');

    this._emitChar('/');

    this._emitSeveralCodePoints(this.tempBuff);

    this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);
  }
}; //12.2.4.28 Script data double escape start state
//------------------------------------------------------------------


_[SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE] = function scriptDataDoubleEscapeStartState(cp) {
  if (isWhitespace(cp) || cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN) {
    this.state = this.isTempBufferEqualToScriptString() ? SCRIPT_DATA_DOUBLE_ESCAPED_STATE : SCRIPT_DATA_ESCAPED_STATE;

    this._emitCodePoint(cp);
  } else if (isAsciiUpper(cp)) {
    this.tempBuff.push(toAsciiLowerCodePoint(cp));

    this._emitCodePoint(cp);
  } else if (isAsciiLower(cp)) {
    this.tempBuff.push(cp);

    this._emitCodePoint(cp);
  } else this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);
}; //12.2.4.29 Script data double escaped state
//------------------------------------------------------------------


_[SCRIPT_DATA_DOUBLE_ESCAPED_STATE] = function scriptDataDoubleEscapedState(cp) {
  if (cp === $.HYPHEN_MINUS) {
    this.state = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;

    this._emitChar('-');
  } else if (cp === $.LESS_THAN_SIGN) {
    this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;

    this._emitChar('<');
  } else if (cp === $.NULL) this._emitChar(UNICODE.REPLACEMENT_CHARACTER);else if (cp === $.EOF) this._reconsumeInState(DATA_STATE);else this._emitCodePoint(cp);
}; //12.2.4.30 Script data double escaped dash state
//------------------------------------------------------------------


_[SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE] = function scriptDataDoubleEscapedDashState(cp) {
  if (cp === $.HYPHEN_MINUS) {
    this.state = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;

    this._emitChar('-');
  } else if (cp === $.LESS_THAN_SIGN) {
    this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;

    this._emitChar('<');
  } else if (cp === $.NULL) {
    this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;

    this._emitChar(UNICODE.REPLACEMENT_CHARACTER);
  } else if (cp === $.EOF) this._reconsumeInState(DATA_STATE);else {
    this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;

    this._emitCodePoint(cp);
  }
}; //12.2.4.31 Script data double escaped dash dash state
//------------------------------------------------------------------


_[SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE] = function scriptDataDoubleEscapedDashDashState(cp) {
  if (cp === $.HYPHEN_MINUS) this._emitChar('-');else if (cp === $.LESS_THAN_SIGN) {
    this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;

    this._emitChar('<');
  } else if (cp === $.GREATER_THAN_SIGN) {
    this.state = SCRIPT_DATA_STATE;

    this._emitChar('>');
  } else if (cp === $.NULL) {
    this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;

    this._emitChar(UNICODE.REPLACEMENT_CHARACTER);
  } else if (cp === $.EOF) this._reconsumeInState(DATA_STATE);else {
    this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;

    this._emitCodePoint(cp);
  }
}; //12.2.4.32 Script data double escaped less-than sign state
//------------------------------------------------------------------


_[SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE] = function scriptDataDoubleEscapedLessThanSignState(cp) {
  if (cp === $.SOLIDUS) {
    this.tempBuff = [];
    this.state = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;

    this._emitChar('/');
  } else this._reconsumeInState(SCRIPT_DATA_DOUBLE_ESCAPED_STATE);
}; //12.2.4.33 Script data double escape end state
//------------------------------------------------------------------


_[SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE] = function scriptDataDoubleEscapeEndState(cp) {
  if (isWhitespace(cp) || cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN) {
    this.state = this.isTempBufferEqualToScriptString() ? SCRIPT_DATA_ESCAPED_STATE : SCRIPT_DATA_DOUBLE_ESCAPED_STATE;

    this._emitCodePoint(cp);
  } else if (isAsciiUpper(cp)) {
    this.tempBuff.push(toAsciiLowerCodePoint(cp));

    this._emitCodePoint(cp);
  } else if (isAsciiLower(cp)) {
    this.tempBuff.push(cp);

    this._emitCodePoint(cp);
  } else this._reconsumeInState(SCRIPT_DATA_DOUBLE_ESCAPED_STATE);
}; //12.2.4.34 Before attribute name state
//------------------------------------------------------------------


_[BEFORE_ATTRIBUTE_NAME_STATE] = function beforeAttributeNameState(cp) {
  if (isWhitespace(cp)) return;
  if (cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN || cp === $.EOF) this._reconsumeInState(AFTER_ATTRIBUTE_NAME_STATE);else if (cp === $.EQUALS_SIGN) {
    this._createAttr('=');

    this.state = ATTRIBUTE_NAME_STATE;
  } else {
    this._createAttr('');

    this._reconsumeInState(ATTRIBUTE_NAME_STATE);
  }
}; //12.2.4.35 Attribute name state
//------------------------------------------------------------------


_[ATTRIBUTE_NAME_STATE] = function attributeNameState(cp) {
  if (isWhitespace(cp) || cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN || cp === $.EOF) {
    this._leaveAttrName(AFTER_ATTRIBUTE_NAME_STATE);

    this._unconsume();
  } else if (cp === $.EQUALS_SIGN) this._leaveAttrName(BEFORE_ATTRIBUTE_VALUE_STATE);else if (isAsciiUpper(cp)) this.currentAttr.name += toAsciiLowerChar(cp);else if (cp === $.QUOTATION_MARK || cp === $.APOSTROPHE || cp === $.LESS_THAN_SIGN) this.currentAttr.name += toChar(cp);else if (cp === $.NULL) this.currentAttr.name += UNICODE.REPLACEMENT_CHARACTER;else this.currentAttr.name += toChar(cp);
}; //12.2.4.36 After attribute name state
//------------------------------------------------------------------


_[AFTER_ATTRIBUTE_NAME_STATE] = function afterAttributeNameState(cp) {
  if (isWhitespace(cp)) return;
  if (cp === $.SOLIDUS) this.state = SELF_CLOSING_START_TAG_STATE;else if (cp === $.EQUALS_SIGN) this.state = BEFORE_ATTRIBUTE_VALUE_STATE;else if (cp === $.GREATER_THAN_SIGN) {
    this.state = DATA_STATE;

    this._emitCurrentToken();
  } else if (cp === $.EOF) this._reconsumeInState(DATA_STATE);else {
    this._createAttr('');

    this._reconsumeInState(ATTRIBUTE_NAME_STATE);
  }
}; //12.2.4.37 Before attribute value state
//------------------------------------------------------------------


_[BEFORE_ATTRIBUTE_VALUE_STATE] = function beforeAttributeValueState(cp) {
  if (isWhitespace(cp)) return;
  if (cp === $.QUOTATION_MARK) this.state = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;else if (cp === $.APOSTROPHE) this.state = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;else this._reconsumeInState(ATTRIBUTE_VALUE_UNQUOTED_STATE);
}; //12.2.4.38 Attribute value (double-quoted) state
//------------------------------------------------------------------


_[ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE] = function attributeValueDoubleQuotedState(cp) {
  if (cp === $.QUOTATION_MARK) this.state = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;else if (cp === $.AMPERSAND) {
    this.additionalAllowedCp = $.QUOTATION_MARK;
    this.returnState = this.state;
    this.state = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;
  } else if (cp === $.NULL) this.currentAttr.value += UNICODE.REPLACEMENT_CHARACTER;else if (cp === $.EOF) this._reconsumeInState(DATA_STATE);else this.currentAttr.value += toChar(cp);
}; //12.2.4.39 Attribute value (single-quoted) state
//------------------------------------------------------------------


_[ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE] = function attributeValueSingleQuotedState(cp) {
  if (cp === $.APOSTROPHE) this.state = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;else if (cp === $.AMPERSAND) {
    this.additionalAllowedCp = $.APOSTROPHE;
    this.returnState = this.state;
    this.state = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;
  } else if (cp === $.NULL) this.currentAttr.value += UNICODE.REPLACEMENT_CHARACTER;else if (cp === $.EOF) this._reconsumeInState(DATA_STATE);else this.currentAttr.value += toChar(cp);
}; //12.2.4.40 Attribute value (unquoted) state
//------------------------------------------------------------------


_[ATTRIBUTE_VALUE_UNQUOTED_STATE] = function attributeValueUnquotedState(cp) {
  if (isWhitespace(cp)) this._leaveAttrValue(BEFORE_ATTRIBUTE_NAME_STATE);else if (cp === $.AMPERSAND) {
    this.additionalAllowedCp = $.GREATER_THAN_SIGN;
    this.returnState = this.state;
    this.state = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;
  } else if (cp === $.GREATER_THAN_SIGN) {
    this._leaveAttrValue(DATA_STATE);

    this._emitCurrentToken();
  } else if (cp === $.NULL) this.currentAttr.value += UNICODE.REPLACEMENT_CHARACTER;else if (cp === $.QUOTATION_MARK || cp === $.APOSTROPHE || cp === $.LESS_THAN_SIGN || cp === $.EQUALS_SIGN || cp === $.GRAVE_ACCENT) this.currentAttr.value += toChar(cp);else if (cp === $.EOF) this._reconsumeInState(DATA_STATE);else this.currentAttr.value += toChar(cp);
}; //12.2.4.41 Character reference in attribute value state
//------------------------------------------------------------------


_[CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE] = function characterReferenceInAttributeValueState(cp) {
  var referencedCodePoints = this._consumeCharacterReference(cp, true);

  if (!this._ensureHibernation()) {
    if (referencedCodePoints) {
      for (var i = 0; i < referencedCodePoints.length; i++) this.currentAttr.value += toChar(referencedCodePoints[i]);
    } else this.currentAttr.value += '&';

    this.state = this.returnState;
  }
}; //12.2.4.42 After attribute value (quoted) state
//------------------------------------------------------------------


_[AFTER_ATTRIBUTE_VALUE_QUOTED_STATE] = function afterAttributeValueQuotedState(cp) {
  if (isWhitespace(cp)) this._leaveAttrValue(BEFORE_ATTRIBUTE_NAME_STATE);else if (cp === $.SOLIDUS) this._leaveAttrValue(SELF_CLOSING_START_TAG_STATE);else if (cp === $.GREATER_THAN_SIGN) {
    this._leaveAttrValue(DATA_STATE);

    this._emitCurrentToken();
  } else if (cp === $.EOF) this._reconsumeInState(DATA_STATE);else this._reconsumeInState(BEFORE_ATTRIBUTE_NAME_STATE);
}; //12.2.4.43 Self-closing start tag state
//------------------------------------------------------------------


_[SELF_CLOSING_START_TAG_STATE] = function selfClosingStartTagState(cp) {
  if (cp === $.GREATER_THAN_SIGN) {
    this.currentToken.selfClosing = true;
    this.state = DATA_STATE;

    this._emitCurrentToken();
  } else if (cp === $.EOF) this._reconsumeInState(DATA_STATE);else this._reconsumeInState(BEFORE_ATTRIBUTE_NAME_STATE);
}; //12.2.4.44 Bogus comment state
//------------------------------------------------------------------


_[BOGUS_COMMENT_STATE] = function bogusCommentState() {
  this._createCommentToken();

  this._reconsumeInState(BOGUS_COMMENT_STATE_CONTINUATION);
}; //HACK: to support streaming and make BOGUS_COMMENT_STATE reentrant we've
//introduced BOGUS_COMMENT_STATE_CONTINUATION state which will not produce
//comment token on each call.


_[BOGUS_COMMENT_STATE_CONTINUATION] = function bogusCommentStateContinuation(cp) {
  while (true) {
    if (cp === $.GREATER_THAN_SIGN) {
      this.state = DATA_STATE;
      break;
    } else if (cp === $.EOF) {
      this._reconsumeInState(DATA_STATE);

      break;
    } else {
      this.currentToken.data += cp === $.NULL ? UNICODE.REPLACEMENT_CHARACTER : toChar(cp);

      this._hibernationSnapshot();

      cp = this._consume();
      if (this._ensureHibernation()) return;
    }
  }

  this._emitCurrentToken();
}; //12.2.4.45 Markup declaration open state
//------------------------------------------------------------------


_[MARKUP_DECLARATION_OPEN_STATE] = function markupDeclarationOpenState(cp) {
  var dashDashMatch = this._consumeSubsequentIfMatch($$.DASH_DASH_STRING, cp, true),
      doctypeMatch = !dashDashMatch && this._consumeSubsequentIfMatch($$.DOCTYPE_STRING, cp, false),
      cdataMatch = !dashDashMatch && !doctypeMatch && this.allowCDATA && this._consumeSubsequentIfMatch($$.CDATA_START_STRING, cp, true);

  if (!this._ensureHibernation()) {
    if (dashDashMatch) {
      this._createCommentToken();

      this.state = COMMENT_START_STATE;
    } else if (doctypeMatch) this.state = DOCTYPE_STATE;else if (cdataMatch) this.state = CDATA_SECTION_STATE;else this._reconsumeInState(BOGUS_COMMENT_STATE);
  }
}; //12.2.4.46 Comment start state
//------------------------------------------------------------------


_[COMMENT_START_STATE] = function commentStartState(cp) {
  if (cp === $.HYPHEN_MINUS) this.state = COMMENT_START_DASH_STATE;else if (cp === $.NULL) {
    this.currentToken.data += UNICODE.REPLACEMENT_CHARACTER;
    this.state = COMMENT_STATE;
  } else if (cp === $.GREATER_THAN_SIGN) {
    this.state = DATA_STATE;

    this._emitCurrentToken();
  } else if (cp === $.EOF) {
    this._emitCurrentToken();

    this._reconsumeInState(DATA_STATE);
  } else {
    this.currentToken.data += toChar(cp);
    this.state = COMMENT_STATE;
  }
}; //12.2.4.47 Comment start dash state
//------------------------------------------------------------------


_[COMMENT_START_DASH_STATE] = function commentStartDashState(cp) {
  if (cp === $.HYPHEN_MINUS) this.state = COMMENT_END_STATE;else if (cp === $.NULL) {
    this.currentToken.data += '-';
    this.currentToken.data += UNICODE.REPLACEMENT_CHARACTER;
    this.state = COMMENT_STATE;
  } else if (cp === $.GREATER_THAN_SIGN) {
    this.state = DATA_STATE;

    this._emitCurrentToken();
  } else if (cp === $.EOF) {
    this._emitCurrentToken();

    this._reconsumeInState(DATA_STATE);
  } else {
    this.currentToken.data += '-';
    this.currentToken.data += toChar(cp);
    this.state = COMMENT_STATE;
  }
}; //12.2.4.48 Comment state
//------------------------------------------------------------------


_[COMMENT_STATE] = function commentState(cp) {
  if (cp === $.HYPHEN_MINUS) this.state = COMMENT_END_DASH_STATE;else if (cp === $.NULL) this.currentToken.data += UNICODE.REPLACEMENT_CHARACTER;else if (cp === $.EOF) {
    this._emitCurrentToken();

    this._reconsumeInState(DATA_STATE);
  } else this.currentToken.data += toChar(cp);
}; //12.2.4.49 Comment end dash state
//------------------------------------------------------------------


_[COMMENT_END_DASH_STATE] = function commentEndDashState(cp) {
  if (cp === $.HYPHEN_MINUS) this.state = COMMENT_END_STATE;else if (cp === $.NULL) {
    this.currentToken.data += '-';
    this.currentToken.data += UNICODE.REPLACEMENT_CHARACTER;
    this.state = COMMENT_STATE;
  } else if (cp === $.EOF) {
    this._emitCurrentToken();

    this._reconsumeInState(DATA_STATE);
  } else {
    this.currentToken.data += '-';
    this.currentToken.data += toChar(cp);
    this.state = COMMENT_STATE;
  }
}; //12.2.4.50 Comment end state
//------------------------------------------------------------------


_[COMMENT_END_STATE] = function commentEndState(cp) {
  if (cp === $.GREATER_THAN_SIGN) {
    this.state = DATA_STATE;

    this._emitCurrentToken();
  } else if (cp === $.EXCLAMATION_MARK) this.state = COMMENT_END_BANG_STATE;else if (cp === $.HYPHEN_MINUS) this.currentToken.data += '-';else if (cp === $.NULL) {
    this.currentToken.data += '--';
    this.currentToken.data += UNICODE.REPLACEMENT_CHARACTER;
    this.state = COMMENT_STATE;
  } else if (cp === $.EOF) {
    this._reconsumeInState(DATA_STATE);

    this._emitCurrentToken();
  } else {
    this.currentToken.data += '--';
    this.currentToken.data += toChar(cp);
    this.state = COMMENT_STATE;
  }
}; //12.2.4.51 Comment end bang state
//------------------------------------------------------------------


_[COMMENT_END_BANG_STATE] = function commentEndBangState(cp) {
  if (cp === $.HYPHEN_MINUS) {
    this.currentToken.data += '--!';
    this.state = COMMENT_END_DASH_STATE;
  } else if (cp === $.GREATER_THAN_SIGN) {
    this.state = DATA_STATE;

    this._emitCurrentToken();
  } else if (cp === $.NULL) {
    this.currentToken.data += '--!';
    this.currentToken.data += UNICODE.REPLACEMENT_CHARACTER;
    this.state = COMMENT_STATE;
  } else if (cp === $.EOF) {
    this._emitCurrentToken();

    this._reconsumeInState(DATA_STATE);
  } else {
    this.currentToken.data += '--!';
    this.currentToken.data += toChar(cp);
    this.state = COMMENT_STATE;
  }
}; //12.2.4.52 DOCTYPE state
//------------------------------------------------------------------


_[DOCTYPE_STATE] = function doctypeState(cp) {
  if (isWhitespace(cp)) return;else if (cp === $.GREATER_THAN_SIGN) {
    this._createDoctypeToken(null);

    this.currentToken.forceQuirks = true;

    this._emitCurrentToken();

    this.state = DATA_STATE;
  } else if (cp === $.EOF) {
    this._createDoctypeToken(null);

    this.currentToken.forceQuirks = true;

    this._emitCurrentToken();

    this._reconsumeInState(DATA_STATE);
  } else {
    this._createDoctypeToken('');

    this._reconsumeInState(DOCTYPE_NAME_STATE);
  }
}; //12.2.4.54 DOCTYPE name state
//------------------------------------------------------------------


_[DOCTYPE_NAME_STATE] = function doctypeNameState(cp) {
  if (isWhitespace(cp) || cp === $.GREATER_THAN_SIGN || cp === $.EOF) this._reconsumeInState(AFTER_DOCTYPE_NAME_STATE);else if (isAsciiUpper(cp)) this.currentToken.name += toAsciiLowerChar(cp);else if (cp === $.NULL) this.currentToken.name += UNICODE.REPLACEMENT_CHARACTER;else this.currentToken.name += toChar(cp);
}; //12.2.4.55 After DOCTYPE name state
//------------------------------------------------------------------


_[AFTER_DOCTYPE_NAME_STATE] = function afterDoctypeNameState(cp) {
  if (isWhitespace(cp)) return;

  if (cp === $.GREATER_THAN_SIGN) {
    this.state = DATA_STATE;

    this._emitCurrentToken();
  } else {
    var publicMatch = this._consumeSubsequentIfMatch($$.PUBLIC_STRING, cp, false),
        systemMatch = !publicMatch && this._consumeSubsequentIfMatch($$.SYSTEM_STRING, cp, false);

    if (!this._ensureHibernation()) {
      if (publicMatch) this.state = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE;else if (systemMatch) this.state = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE;else {
        this.currentToken.forceQuirks = true;
        this.state = BOGUS_DOCTYPE_STATE;
      }
    }
  }
}; //12.2.4.57 Before DOCTYPE public identifier state
//------------------------------------------------------------------


_[BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE] = function beforeDoctypePublicIdentifierState(cp) {
  if (isWhitespace(cp)) return;

  if (cp === $.QUOTATION_MARK) {
    this.currentToken.publicId = '';
    this.state = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;
  } else if (cp === $.APOSTROPHE) {
    this.currentToken.publicId = '';
    this.state = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;
  } else {
    this.currentToken.forceQuirks = true;

    this._reconsumeInState(BOGUS_DOCTYPE_STATE);
  }
}; //12.2.4.58 DOCTYPE public identifier (double-quoted) state
//------------------------------------------------------------------


_[DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE] = function doctypePublicIdentifierDoubleQuotedState(cp) {
  if (cp === $.QUOTATION_MARK) this.state = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;else if (cp === $.NULL) this.currentToken.publicId += UNICODE.REPLACEMENT_CHARACTER;else if (cp === $.GREATER_THAN_SIGN) {
    this.currentToken.forceQuirks = true;

    this._emitCurrentToken();

    this.state = DATA_STATE;
  } else if (cp === $.EOF) {
    this.currentToken.forceQuirks = true;

    this._emitCurrentToken();

    this._reconsumeInState(DATA_STATE);
  } else this.currentToken.publicId += toChar(cp);
}; //12.2.4.59 DOCTYPE public identifier (single-quoted) state
//------------------------------------------------------------------


_[DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE] = function doctypePublicIdentifierSingleQuotedState(cp) {
  if (cp === $.APOSTROPHE) this.state = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;else if (cp === $.NULL) this.currentToken.publicId += UNICODE.REPLACEMENT_CHARACTER;else if (cp === $.GREATER_THAN_SIGN) {
    this.currentToken.forceQuirks = true;

    this._emitCurrentToken();

    this.state = DATA_STATE;
  } else if (cp === $.EOF) {
    this.currentToken.forceQuirks = true;

    this._emitCurrentToken();

    this._reconsumeInState(DATA_STATE);
  } else this.currentToken.publicId += toChar(cp);
}; //12.2.4.61 Between DOCTYPE public and system identifiers state
//------------------------------------------------------------------


_[BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE] = function betweenDoctypePublicAndSystemIdentifiersState(cp) {
  if (isWhitespace(cp)) return;

  if (cp === $.GREATER_THAN_SIGN) {
    this._emitCurrentToken();

    this.state = DATA_STATE;
  } else if (cp === $.QUOTATION_MARK) {
    this.currentToken.systemId = '';
    this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;
  } else if (cp === $.APOSTROPHE) {
    this.currentToken.systemId = '';
    this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;
  } else {
    this.currentToken.forceQuirks = true;

    this._reconsumeInState(BOGUS_DOCTYPE_STATE);
  }
}; //12.2.4.63 Before DOCTYPE system identifier state
//------------------------------------------------------------------


_[BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE] = function beforeDoctypeSystemIdentifierState(cp) {
  if (isWhitespace(cp)) return;

  if (cp === $.QUOTATION_MARK) {
    this.currentToken.systemId = '';
    this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;
  } else if (cp === $.APOSTROPHE) {
    this.currentToken.systemId = '';
    this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;
  } else {
    this.currentToken.forceQuirks = true;

    this._reconsumeInState(BOGUS_DOCTYPE_STATE);
  }
}; //12.2.4.64 DOCTYPE system identifier (double-quoted) state
//------------------------------------------------------------------


_[DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE] = function doctypeSystemIdentifierDoubleQuotedState(cp) {
  if (cp === $.QUOTATION_MARK) this.state = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;else if (cp === $.GREATER_THAN_SIGN) {
    this.currentToken.forceQuirks = true;

    this._emitCurrentToken();

    this.state = DATA_STATE;
  } else if (cp === $.NULL) this.currentToken.systemId += UNICODE.REPLACEMENT_CHARACTER;else if (cp === $.EOF) {
    this.currentToken.forceQuirks = true;

    this._emitCurrentToken();

    this._reconsumeInState(DATA_STATE);
  } else this.currentToken.systemId += toChar(cp);
}; //12.2.4.65 DOCTYPE system identifier (single-quoted) state
//------------------------------------------------------------------


_[DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE] = function doctypeSystemIdentifierSingleQuotedState(cp) {
  if (cp === $.APOSTROPHE) this.state = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;else if (cp === $.GREATER_THAN_SIGN) {
    this.currentToken.forceQuirks = true;

    this._emitCurrentToken();

    this.state = DATA_STATE;
  } else if (cp === $.NULL) this.currentToken.systemId += UNICODE.REPLACEMENT_CHARACTER;else if (cp === $.EOF) {
    this.currentToken.forceQuirks = true;

    this._emitCurrentToken();

    this._reconsumeInState(DATA_STATE);
  } else this.currentToken.systemId += toChar(cp);
}; //12.2.4.66 After DOCTYPE system identifier state
//------------------------------------------------------------------


_[AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE] = function afterDoctypeSystemIdentifierState(cp) {
  if (isWhitespace(cp)) return;

  if (cp === $.GREATER_THAN_SIGN) {
    this._emitCurrentToken();

    this.state = DATA_STATE;
  } else if (cp === $.EOF) {
    this.currentToken.forceQuirks = true;

    this._emitCurrentToken();

    this._reconsumeInState(DATA_STATE);
  } else this.state = BOGUS_DOCTYPE_STATE;
}; //12.2.4.67 Bogus DOCTYPE state
//------------------------------------------------------------------


_[BOGUS_DOCTYPE_STATE] = function bogusDoctypeState(cp) {
  if (cp === $.GREATER_THAN_SIGN) {
    this._emitCurrentToken();

    this.state = DATA_STATE;
  } else if (cp === $.EOF) {
    this._emitCurrentToken();

    this._reconsumeInState(DATA_STATE);
  }
}; //12.2.4.68 CDATA section state
//------------------------------------------------------------------


_[CDATA_SECTION_STATE] = function cdataSectionState(cp) {
  while (true) {
    if (cp === $.EOF) {
      this._reconsumeInState(DATA_STATE);

      break;
    } else {
      var cdataEndMatch = this._consumeSubsequentIfMatch($$.CDATA_END_STRING, cp, true);

      if (this._ensureHibernation()) break;

      if (cdataEndMatch) {
        this.state = DATA_STATE;
        break;
      }

      this._emitCodePoint(cp);

      this._hibernationSnapshot();

      cp = this._consume();
      if (this._ensureHibernation()) break;
    }
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbIlByZXByb2Nlc3NvciIsInJlcXVpcmUiLCJVTklDT0RFIiwibmVUcmVlIiwiJCIsIkNPREVfUE9JTlRTIiwiJCQiLCJDT0RFX1BPSU5UX1NFUVVFTkNFUyIsIk5VTUVSSUNfRU5USVRZX1JFUExBQ0VNRU5UUyIsIkhBU19EQVRBX0ZMQUciLCJEQVRBX0RVUExFVF9GTEFHIiwiSEFTX0JSQU5DSEVTX0ZMQUciLCJNQVhfQlJBTkNIX01BUktFUl9WQUxVRSIsIkRBVEFfU1RBVEUiLCJDSEFSQUNURVJfUkVGRVJFTkNFX0lOX0RBVEFfU1RBVEUiLCJSQ0RBVEFfU1RBVEUiLCJDSEFSQUNURVJfUkVGRVJFTkNFX0lOX1JDREFUQV9TVEFURSIsIlJBV1RFWFRfU1RBVEUiLCJTQ1JJUFRfREFUQV9TVEFURSIsIlBMQUlOVEVYVF9TVEFURSIsIlRBR19PUEVOX1NUQVRFIiwiRU5EX1RBR19PUEVOX1NUQVRFIiwiVEFHX05BTUVfU1RBVEUiLCJSQ0RBVEFfTEVTU19USEFOX1NJR05fU1RBVEUiLCJSQ0RBVEFfRU5EX1RBR19PUEVOX1NUQVRFIiwiUkNEQVRBX0VORF9UQUdfTkFNRV9TVEFURSIsIlJBV1RFWFRfTEVTU19USEFOX1NJR05fU1RBVEUiLCJSQVdURVhUX0VORF9UQUdfT1BFTl9TVEFURSIsIlJBV1RFWFRfRU5EX1RBR19OQU1FX1NUQVRFIiwiU0NSSVBUX0RBVEFfTEVTU19USEFOX1NJR05fU1RBVEUiLCJTQ1JJUFRfREFUQV9FTkRfVEFHX09QRU5fU1RBVEUiLCJTQ1JJUFRfREFUQV9FTkRfVEFHX05BTUVfU1RBVEUiLCJTQ1JJUFRfREFUQV9FU0NBUEVfU1RBUlRfU1RBVEUiLCJTQ1JJUFRfREFUQV9FU0NBUEVfU1RBUlRfREFTSF9TVEFURSIsIlNDUklQVF9EQVRBX0VTQ0FQRURfU1RBVEUiLCJTQ1JJUFRfREFUQV9FU0NBUEVEX0RBU0hfU1RBVEUiLCJTQ1JJUFRfREFUQV9FU0NBUEVEX0RBU0hfREFTSF9TVEFURSIsIlNDUklQVF9EQVRBX0VTQ0FQRURfTEVTU19USEFOX1NJR05fU1RBVEUiLCJTQ1JJUFRfREFUQV9FU0NBUEVEX0VORF9UQUdfT1BFTl9TVEFURSIsIlNDUklQVF9EQVRBX0VTQ0FQRURfRU5EX1RBR19OQU1FX1NUQVRFIiwiU0NSSVBUX0RBVEFfRE9VQkxFX0VTQ0FQRV9TVEFSVF9TVEFURSIsIlNDUklQVF9EQVRBX0RPVUJMRV9FU0NBUEVEX1NUQVRFIiwiU0NSSVBUX0RBVEFfRE9VQkxFX0VTQ0FQRURfREFTSF9TVEFURSIsIlNDUklQVF9EQVRBX0RPVUJMRV9FU0NBUEVEX0RBU0hfREFTSF9TVEFURSIsIlNDUklQVF9EQVRBX0RPVUJMRV9FU0NBUEVEX0xFU1NfVEhBTl9TSUdOX1NUQVRFIiwiU0NSSVBUX0RBVEFfRE9VQkxFX0VTQ0FQRV9FTkRfU1RBVEUiLCJCRUZPUkVfQVRUUklCVVRFX05BTUVfU1RBVEUiLCJBVFRSSUJVVEVfTkFNRV9TVEFURSIsIkFGVEVSX0FUVFJJQlVURV9OQU1FX1NUQVRFIiwiQkVGT1JFX0FUVFJJQlVURV9WQUxVRV9TVEFURSIsIkFUVFJJQlVURV9WQUxVRV9ET1VCTEVfUVVPVEVEX1NUQVRFIiwiQVRUUklCVVRFX1ZBTFVFX1NJTkdMRV9RVU9URURfU1RBVEUiLCJBVFRSSUJVVEVfVkFMVUVfVU5RVU9URURfU1RBVEUiLCJDSEFSQUNURVJfUkVGRVJFTkNFX0lOX0FUVFJJQlVURV9WQUxVRV9TVEFURSIsIkFGVEVSX0FUVFJJQlVURV9WQUxVRV9RVU9URURfU1RBVEUiLCJTRUxGX0NMT1NJTkdfU1RBUlRfVEFHX1NUQVRFIiwiQk9HVVNfQ09NTUVOVF9TVEFURSIsIkJPR1VTX0NPTU1FTlRfU1RBVEVfQ09OVElOVUFUSU9OIiwiTUFSS1VQX0RFQ0xBUkFUSU9OX09QRU5fU1RBVEUiLCJDT01NRU5UX1NUQVJUX1NUQVRFIiwiQ09NTUVOVF9TVEFSVF9EQVNIX1NUQVRFIiwiQ09NTUVOVF9TVEFURSIsIkNPTU1FTlRfRU5EX0RBU0hfU1RBVEUiLCJDT01NRU5UX0VORF9TVEFURSIsIkNPTU1FTlRfRU5EX0JBTkdfU1RBVEUiLCJET0NUWVBFX1NUQVRFIiwiRE9DVFlQRV9OQU1FX1NUQVRFIiwiQUZURVJfRE9DVFlQRV9OQU1FX1NUQVRFIiwiQkVGT1JFX0RPQ1RZUEVfUFVCTElDX0lERU5USUZJRVJfU1RBVEUiLCJET0NUWVBFX1BVQkxJQ19JREVOVElGSUVSX0RPVUJMRV9RVU9URURfU1RBVEUiLCJET0NUWVBFX1BVQkxJQ19JREVOVElGSUVSX1NJTkdMRV9RVU9URURfU1RBVEUiLCJCRVRXRUVOX0RPQ1RZUEVfUFVCTElDX0FORF9TWVNURU1fSURFTlRJRklFUlNfU1RBVEUiLCJCRUZPUkVfRE9DVFlQRV9TWVNURU1fSURFTlRJRklFUl9TVEFURSIsIkRPQ1RZUEVfU1lTVEVNX0lERU5USUZJRVJfRE9VQkxFX1FVT1RFRF9TVEFURSIsIkRPQ1RZUEVfU1lTVEVNX0lERU5USUZJRVJfU0lOR0xFX1FVT1RFRF9TVEFURSIsIkFGVEVSX0RPQ1RZUEVfU1lTVEVNX0lERU5USUZJRVJfU1RBVEUiLCJCT0dVU19ET0NUWVBFX1NUQVRFIiwiQ0RBVEFfU0VDVElPTl9TVEFURSIsImlzV2hpdGVzcGFjZSIsImNwIiwiU1BBQ0UiLCJMSU5FX0ZFRUQiLCJUQUJVTEFUSU9OIiwiRk9STV9GRUVEIiwiaXNBc2NpaURpZ2l0IiwiRElHSVRfMCIsIkRJR0lUXzkiLCJpc0FzY2lpVXBwZXIiLCJMQVRJTl9DQVBJVEFMX0EiLCJMQVRJTl9DQVBJVEFMX1oiLCJpc0FzY2lpTG93ZXIiLCJMQVRJTl9TTUFMTF9BIiwiTEFUSU5fU01BTExfWiIsImlzQXNjaWlMZXR0ZXIiLCJpc0FzY2lpQWxwaGFOdW1lcmljIiwiaXNEaWdpdCIsImlzSGV4IiwiTEFUSU5fQ0FQSVRBTF9GIiwiTEFUSU5fU01BTExfRiIsImlzUmVzZXJ2ZWRDb2RlUG9pbnQiLCJ0b0FzY2lpTG93ZXJDb2RlUG9pbnQiLCJ0b0NoYXIiLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJ0b0FzY2lpTG93ZXJDaGFyIiwiZmluZE5hbWVkRW50aXR5VHJlZUJyYW5jaCIsIm5vZGVJeCIsImJyYW5jaENvdW50IiwibG8iLCJoaSIsIm1pZCIsIm1pZENwIiwiVG9rZW5pemVyIiwibW9kdWxlIiwiZXhwb3J0cyIsInByZXByb2Nlc3NvciIsInRva2VuUXVldWUiLCJhbGxvd0NEQVRBIiwic3RhdGUiLCJyZXR1cm5TdGF0ZSIsInRlbXBCdWZmIiwiYWRkaXRpb25hbEFsbG93ZWRDcCIsImxhc3RTdGFydFRhZ05hbWUiLCJjb25zdW1lZEFmdGVyU25hcHNob3QiLCJhY3RpdmUiLCJjdXJyZW50Q2hhcmFjdGVyVG9rZW4iLCJjdXJyZW50VG9rZW4iLCJjdXJyZW50QXR0ciIsIkNIQVJBQ1RFUl9UT0tFTiIsIk5VTExfQ0hBUkFDVEVSX1RPS0VOIiwiV0hJVEVTUEFDRV9DSEFSQUNURVJfVE9LRU4iLCJTVEFSVF9UQUdfVE9LRU4iLCJFTkRfVEFHX1RPS0VOIiwiQ09NTUVOVF9UT0tFTiIsIkRPQ1RZUEVfVE9LRU4iLCJFT0ZfVE9LRU4iLCJISUJFUk5BVElPTl9UT0tFTiIsIk1PREUiLCJEQVRBIiwiUkNEQVRBIiwiUkFXVEVYVCIsIlNDUklQVF9EQVRBIiwiUExBSU5URVhUIiwiZ2V0VG9rZW5BdHRyIiwidG9rZW4iLCJhdHRyTmFtZSIsImkiLCJhdHRycyIsImxlbmd0aCIsIm5hbWUiLCJ2YWx1ZSIsInByb3RvdHlwZSIsImdldE5leHRUb2tlbiIsIl9oaWJlcm5hdGlvblNuYXBzaG90IiwiX2NvbnN1bWUiLCJfZW5zdXJlSGliZXJuYXRpb24iLCJzaGlmdCIsIndyaXRlIiwiY2h1bmsiLCJpc0xhc3RDaHVuayIsImluc2VydEh0bWxBdEN1cnJlbnRQb3MiLCJlbmRPZkNodW5rSGl0IiwicmV0cmVhdCIsInB1c2giLCJ0eXBlIiwiYWR2YW5jZSIsIl91bmNvbnN1bWUiLCJfdW5jb25zdW1lU2V2ZXJhbCIsImNvdW50IiwiX3JlY29uc3VtZUluU3RhdGUiLCJfY29uc3VtZVN1YnNlcXVlbnRJZk1hdGNoIiwicGF0dGVybiIsInN0YXJ0Q3AiLCJjYXNlU2Vuc2l0aXZlIiwiY29uc3VtZWRDb3VudCIsImlzTWF0Y2giLCJwYXR0ZXJuTGVuZ3RoIiwicGF0dGVyblBvcyIsInBhdHRlcm5DcCIsIkVPRiIsIl9sb29rYWhlYWQiLCJpc1RlbXBCdWZmZXJFcXVhbFRvU2NyaXB0U3RyaW5nIiwiU0NSSVBUX1NUUklORyIsIl9jcmVhdGVTdGFydFRhZ1Rva2VuIiwidGFnTmFtZSIsInNlbGZDbG9zaW5nIiwiX2NyZWF0ZUVuZFRhZ1Rva2VuIiwiX2NyZWF0ZUNvbW1lbnRUb2tlbiIsImRhdGEiLCJfY3JlYXRlRG9jdHlwZVRva2VuIiwiaW5pdGlhbE5hbWUiLCJmb3JjZVF1aXJrcyIsInB1YmxpY0lkIiwic3lzdGVtSWQiLCJfY3JlYXRlQ2hhcmFjdGVyVG9rZW4iLCJjaCIsImNoYXJzIiwiX2NyZWF0ZUF0dHIiLCJhdHRyTmFtZUZpcnN0Q2giLCJfaXNEdXBsaWNhdGVBdHRyIiwiX2xlYXZlQXR0ck5hbWUiLCJ0b1N0YXRlIiwiX2xlYXZlQXR0clZhbHVlIiwiX2lzQXBwcm9wcmlhdGVFbmRUYWdUb2tlbiIsIl9lbWl0Q3VycmVudFRva2VuIiwiX2VtaXRDdXJyZW50Q2hhcmFjdGVyVG9rZW4iLCJfZW1pdEVPRlRva2VuIiwiX2FwcGVuZENoYXJUb0N1cnJlbnRDaGFyYWN0ZXJUb2tlbiIsIl9lbWl0Q29kZVBvaW50IiwiTlVMTCIsIl9lbWl0U2V2ZXJhbENvZGVQb2ludHMiLCJjb2RlUG9pbnRzIiwiX2VtaXRDaGFyIiwiX2NvbnN1bWVOdW1lcmljRW50aXR5IiwiZGlnaXRzIiwibmV4dENwIiwiU0VNSUNPTE9OIiwicmVmZXJlbmNlZENwIiwicGFyc2VJbnQiLCJyZXBsYWNlbWVudCIsIlJFUExBQ0VNRU5UX0NIQVJBQ1RFUiIsIl9jb25zdW1lTmFtZWRFbnRpdHkiLCJpbkF0dHIiLCJyZWZlcmVuY2VkQ29kZVBvaW50cyIsInJlZmVyZW5jZVNpemUiLCJzZW1pY29sb25UZXJtaW5hdGVkIiwiY3VycmVudCIsImluTm9kZSIsIm5vZGVXaXRoRGF0YSIsIkVRVUFMU19TSUdOIiwiX2NvbnN1bWVDaGFyYWN0ZXJSZWZlcmVuY2UiLCJHUkVBVEVSX1RIQU5fU0lHTiIsIkFNUEVSU0FORCIsIk5VTUJFUl9TSUdOIiwiTEFUSU5fU01BTExfWCIsIkxBVElOX0NBUElUQUxfWCIsIl8iLCJkYXRhU3RhdGUiLCJkcm9wUGFyc2VkQ2h1bmsiLCJMRVNTX1RIQU5fU0lHTiIsImNoYXJhY3RlclJlZmVyZW5jZUluRGF0YVN0YXRlIiwicmNkYXRhU3RhdGUiLCJjaGFyYWN0ZXJSZWZlcmVuY2VJblJjZGF0YVN0YXRlIiwicmF3dGV4dFN0YXRlIiwic2NyaXB0RGF0YVN0YXRlIiwicGxhaW50ZXh0U3RhdGUiLCJ0YWdPcGVuU3RhdGUiLCJFWENMQU1BVElPTl9NQVJLIiwiU09MSURVUyIsIlFVRVNUSU9OX01BUksiLCJlbmRUYWdPcGVuU3RhdGUiLCJ0YWdOYW1lU3RhdGUiLCJyY2RhdGFMZXNzVGhhblNpZ25TdGF0ZSIsInJjZGF0YUVuZFRhZ09wZW5TdGF0ZSIsInJjZGF0YUVuZFRhZ05hbWVTdGF0ZSIsInJhd3RleHRMZXNzVGhhblNpZ25TdGF0ZSIsInJhd3RleHRFbmRUYWdPcGVuU3RhdGUiLCJyYXd0ZXh0RW5kVGFnTmFtZVN0YXRlIiwic2NyaXB0RGF0YUxlc3NUaGFuU2lnblN0YXRlIiwic2NyaXB0RGF0YUVuZFRhZ09wZW5TdGF0ZSIsInNjcmlwdERhdGFFbmRUYWdOYW1lU3RhdGUiLCJzY3JpcHREYXRhRXNjYXBlU3RhcnRTdGF0ZSIsIkhZUEhFTl9NSU5VUyIsInNjcmlwdERhdGFFc2NhcGVTdGFydERhc2hTdGF0ZSIsInNjcmlwdERhdGFFc2NhcGVkU3RhdGUiLCJzY3JpcHREYXRhRXNjYXBlZERhc2hTdGF0ZSIsInNjcmlwdERhdGFFc2NhcGVkRGFzaERhc2hTdGF0ZSIsInNjcmlwdERhdGFFc2NhcGVkTGVzc1RoYW5TaWduU3RhdGUiLCJzY3JpcHREYXRhRXNjYXBlZEVuZFRhZ09wZW5TdGF0ZSIsInNjcmlwdERhdGFFc2NhcGVkRW5kVGFnTmFtZVN0YXRlIiwic2NyaXB0RGF0YURvdWJsZUVzY2FwZVN0YXJ0U3RhdGUiLCJzY3JpcHREYXRhRG91YmxlRXNjYXBlZFN0YXRlIiwic2NyaXB0RGF0YURvdWJsZUVzY2FwZWREYXNoU3RhdGUiLCJzY3JpcHREYXRhRG91YmxlRXNjYXBlZERhc2hEYXNoU3RhdGUiLCJzY3JpcHREYXRhRG91YmxlRXNjYXBlZExlc3NUaGFuU2lnblN0YXRlIiwic2NyaXB0RGF0YURvdWJsZUVzY2FwZUVuZFN0YXRlIiwiYmVmb3JlQXR0cmlidXRlTmFtZVN0YXRlIiwiYXR0cmlidXRlTmFtZVN0YXRlIiwiUVVPVEFUSU9OX01BUksiLCJBUE9TVFJPUEhFIiwiYWZ0ZXJBdHRyaWJ1dGVOYW1lU3RhdGUiLCJiZWZvcmVBdHRyaWJ1dGVWYWx1ZVN0YXRlIiwiYXR0cmlidXRlVmFsdWVEb3VibGVRdW90ZWRTdGF0ZSIsImF0dHJpYnV0ZVZhbHVlU2luZ2xlUXVvdGVkU3RhdGUiLCJhdHRyaWJ1dGVWYWx1ZVVucXVvdGVkU3RhdGUiLCJHUkFWRV9BQ0NFTlQiLCJjaGFyYWN0ZXJSZWZlcmVuY2VJbkF0dHJpYnV0ZVZhbHVlU3RhdGUiLCJhZnRlckF0dHJpYnV0ZVZhbHVlUXVvdGVkU3RhdGUiLCJzZWxmQ2xvc2luZ1N0YXJ0VGFnU3RhdGUiLCJib2d1c0NvbW1lbnRTdGF0ZSIsImJvZ3VzQ29tbWVudFN0YXRlQ29udGludWF0aW9uIiwibWFya3VwRGVjbGFyYXRpb25PcGVuU3RhdGUiLCJkYXNoRGFzaE1hdGNoIiwiREFTSF9EQVNIX1NUUklORyIsImRvY3R5cGVNYXRjaCIsIkRPQ1RZUEVfU1RSSU5HIiwiY2RhdGFNYXRjaCIsIkNEQVRBX1NUQVJUX1NUUklORyIsImNvbW1lbnRTdGFydFN0YXRlIiwiY29tbWVudFN0YXJ0RGFzaFN0YXRlIiwiY29tbWVudFN0YXRlIiwiY29tbWVudEVuZERhc2hTdGF0ZSIsImNvbW1lbnRFbmRTdGF0ZSIsImNvbW1lbnRFbmRCYW5nU3RhdGUiLCJkb2N0eXBlU3RhdGUiLCJkb2N0eXBlTmFtZVN0YXRlIiwiYWZ0ZXJEb2N0eXBlTmFtZVN0YXRlIiwicHVibGljTWF0Y2giLCJQVUJMSUNfU1RSSU5HIiwic3lzdGVtTWF0Y2giLCJTWVNURU1fU1RSSU5HIiwiYmVmb3JlRG9jdHlwZVB1YmxpY0lkZW50aWZpZXJTdGF0ZSIsImRvY3R5cGVQdWJsaWNJZGVudGlmaWVyRG91YmxlUXVvdGVkU3RhdGUiLCJkb2N0eXBlUHVibGljSWRlbnRpZmllclNpbmdsZVF1b3RlZFN0YXRlIiwiYmV0d2VlbkRvY3R5cGVQdWJsaWNBbmRTeXN0ZW1JZGVudGlmaWVyc1N0YXRlIiwiYmVmb3JlRG9jdHlwZVN5c3RlbUlkZW50aWZpZXJTdGF0ZSIsImRvY3R5cGVTeXN0ZW1JZGVudGlmaWVyRG91YmxlUXVvdGVkU3RhdGUiLCJkb2N0eXBlU3lzdGVtSWRlbnRpZmllclNpbmdsZVF1b3RlZFN0YXRlIiwiYWZ0ZXJEb2N0eXBlU3lzdGVtSWRlbnRpZmllclN0YXRlIiwiYm9ndXNEb2N0eXBlU3RhdGUiLCJjZGF0YVNlY3Rpb25TdGF0ZSIsImNkYXRhRW5kTWF0Y2giLCJDREFUQV9FTkRfU1RSSU5HIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFJQSxZQUFZLEdBQUdDLE9BQU8sQ0FBQyxnQkFBRCxDQUExQjtBQUFBLElBQ0lDLE9BQU8sR0FBR0QsT0FBTyxDQUFDLG1CQUFELENBRHJCO0FBQUEsSUFFSUUsTUFBTSxHQUFHRixPQUFPLENBQUMscUJBQUQsQ0FGcEIsQyxDQUlBOzs7QUFDQSxJQUFJRyxDQUFDLEdBQUdGLE9BQU8sQ0FBQ0csV0FBaEI7QUFBQSxJQUNJQyxFQUFFLEdBQUdKLE9BQU8sQ0FBQ0ssb0JBRGpCLEMsQ0FHQTs7QUFDQSxJQUFJQywyQkFBMkIsR0FBRztBQUM5QixRQUFNLE1BRHdCO0FBQ2hCLFFBQU0sTUFEVTtBQUNGLFFBQU0sTUFESjtBQUNZLFFBQU0sTUFEbEI7QUFDMEIsUUFBTSxNQURoQztBQUN3QyxRQUFNLE1BRDlDO0FBQ3NELFFBQU0sTUFENUQ7QUFFOUIsUUFBTSxN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Q0FBRCxHQUF5QixTQUFTbVAsaUJBQVQsQ0FBMkJoUCxFQUEzQixFQUErQjtBQUNwRCxNQUFJQSxFQUFFLEtBQUszRSxDQUFDLENBQUNtTyxpQkFBYixFQUFnQztBQUM1QixTQUFLM0IsaUJBQUw7O0FBQ0EsU0FBS3RGLEtBQUwsR0FBYXpHLFVBQWI7QUFDSCxHQUhELE1BS0ssSUFBSWtFLEVBQUUsS0FBSzNFLENBQUMsQ0FBQytLLEdBQWIsRUFBa0I7QUFDbkIsU0FBS3lCLGlCQUFMOztBQUNBLFNBQUtuQyxpQkFBTCxDQUF1QjVKLFVBQXZCO0FBQ0g7QUFDSixDQVZELEMsQ0FhQTtBQUNBOzs7QUFDQStOLENBQUMsQ0FBQy9KLG1CQUFELENBQUQsR0FBeUIsU0FBU21QLGlCQUFULENBQTJCalAsRUFBM0IsRUFBK0I7QUFDcEQsU0FBTyxJQUFQLEVBQWE7QUFDVCxRQUFJQSxFQUFFLEtBQUszRSxDQUFDLENBQUMrSyxHQUFiLEVBQWtCO0FBQ2QsV0FBS1YsaUJBQUwsQ0FBdUI1SixVQUF2Qjs7QUFDQTtBQUNILEtBSEQsTUFLSztBQUNELFVBQUlvVCxhQUFhLEdBQUcsS0FBS3ZKLHlCQUFMLENBQStCcEssRUFBRSxDQUFDNFQsZ0JBQWxDLEVBQW9EblAsRUFBcEQsRUFBd0QsSUFBeEQsQ0FBcEI7O0FBRUEsVUFBSSxLQUFLNEUsa0JBQUwsRUFBSixFQUNJOztBQUVKLFVBQUlzSyxhQUFKLEVBQW1CO0FBQ2YsYUFBSzNNLEtBQUwsR0FBYXpHLFVBQWI7QUFDQTtBQUNIOztBQUVELFdBQUttTSxjQUFMLENBQW9CakksRUFBcEI7O0FBRUEsV0FBSzBFLG9CQUFMOztBQUNBMUUsTUFBQUEsRUFBRSxHQUFHLEtBQUsyRSxRQUFMLEVBQUw7QUFFQSxVQUFJLEtBQUtDLGtCQUFMLEVBQUosRUFDSTtBQUNQO0FBQ0o7QUFDSixDQTNCRCIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIFByZXByb2Nlc3NvciA9IHJlcXVpcmUoJy4vcHJlcHJvY2Vzc29yJyksXG4gICAgVU5JQ09ERSA9IHJlcXVpcmUoJy4uL2NvbW1vbi91bmljb2RlJyksXG4gICAgbmVUcmVlID0gcmVxdWlyZSgnLi9uYW1lZF9lbnRpdHlfZGF0YScpO1xuXG4vL0FsaWFzZXNcbnZhciAkID0gVU5JQ09ERS5DT0RFX1BPSU5UUyxcbiAgICAkJCA9IFVOSUNPREUuQ09ERV9QT0lOVF9TRVFVRU5DRVM7XG5cbi8vUmVwbGFjZW1lbnQgY29kZSBwb2ludHMgZm9yIG51bWVyaWMgZW50aXRpZXNcbnZhciBOVU1FUklDX0VOVElUWV9SRVBMQUNFTUVOVFMgPSB7XG4gICAgMHgwMDogMHhGRkZELCAweDBEOiAweDAwMEQsIDB4ODA6IDB4MjBBQywgMHg4MTogMHgwMDgxLCAweDgyOiAweDIwMUEsIDB4ODM6IDB4MDE5MiwgMHg4NDogMHgyMDFFLFxuICAgIDB4ODU6IDB4MjAyNiwgMHg4NjogMHgyMDIwLCAweDg3OiAweDIwMjEsIDB4ODg6IDB4MDJDNiwgMHg4OTogMHgyMDMwLCAweDhBOiAweDAxNjAsIDB4OEI6IDB4MjAzOSxcbiAgICAweDhDOiAweDAxNTIsIDB4OEQ6IDB4MDA4RCwgMHg4RTogMHgwMTdELCAweDhGOiAweDAwOEYsIDB4OTA6IDB4MDA5MCwgMHg5MTogMHgyMDE4LCAweDkyOiAweDIwMTksXG4gICAgMHg5MzogMHgyMDFDLCAweDk0OiAweDIwMUQsIDB4OTU6IDB4MjAyMiwgMHg5NjogMHgyMDEzLCAweDk3OiAweDIwMTQsIDB4OTg6IDB4MDJEQywgMHg5OTogMHgyMTIyLFxuICAgIDB4OUE6IDB4MDE2MSwgMHg5QjogMHgyMDNBLCAweDlDOiAweDAxNTMsIDB4OUQ6IDB4MDA5RCwgMHg5RTogMHgwMTdFLCAweDlGOiAweDAxNzhcbn07XG5cbi8vIE5hbWVkIGVudGl0eSB0cmVlIGZsYWdzXG52YXIgSEFTX0RBVEFfRkxBRyA9IDEgPDwgMDtcbnZhciBEQVRBX0RVUExFVF9GTEFHID0gMSA8PCAxO1xudmFyIEhBU19CUkFOQ0hFU19GTEFHID0gMSA8PCAyO1xudmFyIE1BWF9CUkFOQ0hfTUFSS0VSX1ZBTFVFID0gSEFTX0RBVEFfRkxBRyB8IERBVEFfRFVQTEVUX0ZMQUcgfCBIQVNfQlJBTkNIRVNfRkxBRztcblxuXG4vL1N0YXRlc1xudmFyIERBVEFfU1RBVEUgPSAnREFUQV9TVEFURScsXG4gICAgQ0hBUkFDVEVSX1JFRkVSRU5DRV9JTl9EQVRBX1NUQVRFID0gJ0NIQVJBQ1RFUl9SRUZFUkVOQ0VfSU5fREFUQV9TVEFURScsXG4gICAgUkNEQVRBX1NUQVRFID0gJ1JDREFUQV9TVEFURScsXG4gICAgQ0hBUkFDVEVSX1JFRkVSRU5DRV9JTl9SQ0RBVEFfU1RBVEUgPSAnQ0hBUkFDVEVSX1JFRkVSRU5DRV9JTl9SQ0RBVEFfU1RBVEUnLFxuICAgIFJBV1RFWFRfU1RBVEUgPSAnUkFXVEVYVF9TVEFURScsXG4gICAgU0NSSVBUX0RBVEFfU1RBVEUgPSAnU0NSSVBUX0RBVEFfU1RBVEUnLFxuICAgIFBMQUlOVEVYVF9TVEFURSA9ICdQTEFJTlRFWFRfU1RBVEUnLFxuICAgIFRBR19PUEVOX1NUQVRFID0gJ1RBR19PUEVOX1NUQVRFJyxcbiAgICBFTkRfVEFHX09QRU5fU1RBVEUgPSAnRU5EX1RBR19PUEVOX1NUQVRFJyxcbiAgICBUQUdfTkFNRV9TVEFURSA9ICdUQUdfTkFNRV9TVEFURScsXG4gICAgUkNEQVRBX0xFU1NfVEhBTl9TSUdOX1NUQVRFID0gJ1JDREFUQV9MRVNTX1RIQU5fU0lHTl9TVEFURScsXG4gICAgUkNEQVRBX0VORF9UQUdfT1BFTl9TVEFURSA9ICdSQ0RBVEFfRU5EX1RBR19PUEVOX1NUQVRFJyxcbiAgICBSQ0RBVEFfRU5EX1RBR19OQU1FX1NUQVRFID0gJ1JDREFUQV9FTkRfVEFHX05BTUVfU1RBVEUnLFxuICAgIFJBV1RFWFRfTEVTU19USEFOX1NJR05fU1RBVEUgPSAnUkFXVEVYVF9MRVNTX1RIQU5fU0lHTl9TVEFURScsXG4gICAgUkFXVEVYVF9FTkRfVEFHX09QRU5fU1RBVEUgPSAnUkFXVEVYVF9FTkRfVEFHX09QRU5fU1RBVEUnLFxuICAgIFJBV1RFWFRfRU5EX1RBR19OQU1FX1NUQVRFID0gJ1JBV1RFWFRfRU5EX1RBR19OQU1FX1NUQVRFJyxcbiAgICBTQ1JJUFRfREFUQV9MRVNTX1RIQU5fU0lHTl9TVEFURSA9ICdTQ1JJUFRfREFUQV9MRVNTX1RIQU5fU0lHTl9TVEFURScsXG4gICAgU0NSSVBUX0RBVEFfRU5EX1RBR19PUEVOX1NUQVRFID0gJ1NDUklQVF9EQVRBX0VORF9UQUdfT1BFTl9TVEFURScsXG4gICAgU0NSSVBUX0RBVEFfRU5EX1RBR19OQU1FX1NUQVRFID0gJ1NDUklQVF9EQVRBX0VORF9UQUdfTkFNRV9TVEFURScsXG4gICAgU0NSSVBUX0RBVEFfRVNDQVBFX1NUQVJUX1NUQVRFID0gJ1NDUklQVF9EQVRBX0VTQ0FQRV9TVEFSVF9TVEFURScsXG4gICAgU0NSSVBUX0RBVEFfRVNDQVBFX1NUQVJUX0RBU0hfU1RBVEUgPSAnU0NSSVBUX0RBVEFfRVNDQVBFX1NUQVJUX0RBU0hfU1RBVEUnLFxuICAgIFNDUklQVF9EQVRBX0VTQ0FQRURfU1RBVEUgPSAnU0NSSVBUX0RBVEFfRVNDQVBFRF9TVEFURScsXG4gICAgU0NSSVBUX0RBVEFfRVNDQVBFRF9EQVNIX1NUQVRFID0gJ1NDUklQVF9EQVRBX0VTQ0FQRURfREFTSF9TVEFURScsXG4gICAgU0NSSVBUX0RBVEFfRVNDQVBFRF9EQVNIX0RBU0hfU1RBVEUgPSAnU0NSSVBUX0RBVEFfRVNDQVBFRF9EQVNIX0RBU0hfU1RBVEUnLFxuICAgIFNDUklQVF9EQVRBX0VTQ0FQRURfTEVTU19USEFOX1NJR05fU1RBVEUgPSAnU0NSSVBUX0RBVEFfRVNDQVBFRF9MRVNTX1RIQU5fU0lHTl9TVEFURScsXG4gICAgU0NSSVBUX0RBVEFfRVNDQVBFRF9FTkRfVEFHX09QRU5fU1RBVEUgPSAnU0NSSVBUX0RBVEFfRVNDQVBFRF9FTkRfVEFHX09QRU5fU1RBVEUnLFxuICAgIFNDUklQVF9EQVRBX0VTQ0FQRURfRU5EX1RBR19OQU1FX1NUQVRFID0gJ1NDUklQVF9EQVRBX0VTQ0FQRURfRU5EX1RBR19OQU1FX1NUQVRFJyxcbiAgICBTQ1JJUFRfREFUQV9ET1VCTEVfRVNDQVBFX1NUQVJUX1NUQVRFID0gJ1NDUklQVF9EQVRBX0RPVUJMRV9FU0NBUEVfU1RBUlRfU1RBVEUnLFxuICAgIFNDUklQVF9EQVRBX0RPVUJMRV9FU0NBUEVEX1NUQVRFID0gJ1NDUklQVF9EQVRBX0RPVUJMRV9FU0NBUEVEX1NUQVRFJyxcbiAgICBTQ1JJUFRfREFUQV9ET1VCTEVfRVNDQVBFRF9EQVNIX1NUQVRFID0gJ1NDUklQVF9EQVRBX0RPVUJMRV9FU0NBUEVEX0RBU0hfU1RBVEUnLFxuICAgIFNDUklQVF9EQVRBX0RPVUJMRV9FU0NBUEVEX0RBU0hfREFTSF9TVEFURSA9ICdTQ1JJUFRfREFUQV9ET1VCTEVfRVNDQVBFRF9EQVNIX0RBU0hfU1RBVEUnLFxuICAgIFNDUklQVF9EQVRBX0RPVUJMRV9FU0NBUEVEX0xFU1NfVEhBTl9TSUdOX1NUQVRFID0gJ1NDUklQVF9EQVRBX0RPVUJMRV9FU0NBUEVEX0xFU1NfVEhBTl9TSUdOX1NUQVRFJyxcbiAgICBTQ1JJUFRfREFUQV9ET1VCTEVfRVNDQVBFX0VORF9TVEFURSA9ICdTQ1JJUFRfREFUQV9ET1VCTEVfRVNDQVBFX0VORF9TVEFURScsXG4gICAgQkVGT1JFX0FUVFJJQlVURV9OQU1FX1NUQVRFID0gJ0JFRk9SRV9BVFRSSUJVVEVfTkFNRV9TVEFURScsXG4gICAgQVRUUklCVVRFX05BTUVfU1RBVEUgPSAnQVRUUklCVVRFX05BTUVfU1RBVEUnLFxuICAgIEFGVEVSX0FUVFJJQlVURV9OQU1FX1NUQVRFID0gJ0FGVEVSX0FUVFJJQlVURV9OQU1FX1NUQVRFJyxcbiAgICBCRUZPUkVfQVRUUklCVVRFX1ZBTFVFX1NUQVRFID0gJ0JFRk9SRV9BVFRSSUJVVEVfVkFMVUVfU1RBVEUnLFxuICAgIEFUVFJJQlVURV9WQUxVRV9ET1VCTEVfUVVPVEVEX1NUQVRFID0gJ0FUVFJJQlVURV9WQUxVRV9ET1VCTEVfUVVPVEVEX1NUQVRFJyxcbiAgICBBVFRSSUJVVEVfVkFMVUVfU0lOR0xFX1FVT1RFRF9TVEFURSA9ICdBVFRSSUJVVEVfVkFMVUVfU0lOR0xFX1FVT1RFRF9TVEFURScsXG4gICAgQVRUUklCVVRFX1ZBTFVFX1VOUVVPVEVEX1NUQVRFID0gJ0FUVFJJQlVURV9WQUxVRV9VTlFVT1RFRF9TVEFURScsXG4gICAgQ0hBUkFDVEVSX1JFRkVSRU5DRV9JTl9BVFRSSUJVVEVfVkFMVUVfU1RBVEUgPSAnQ0hBUkFDVEVSX1JFRkVSRU5DRV9JTl9BVFRSSUJVVEVfVkFMVUVfU1RBVEUnLFxuICAgIEFGVEVSX0FUVFJJQlVURV9WQUxVRV9RVU9URURfU1RBVEUgPSAnQUZURVJfQVRUUklCVVRFX1ZBTFVFX1FVT1RFRF9TVEFURScsXG4gICAgU0VMRl9DTE9TSU5HX1NUQVJUX1RBR19TVEFURSA9ICdTRUxGX0NMT1NJTkdfU1RBUlRfVEFHX1NUQVRFJyxcbiAgICBCT0dVU19DT01NRU5UX1NUQVRFID0gJ0JPR1VTX0NPTU1FTlRfU1RBVEUnLFxuICAgIEJPR1VTX0NPTU1FTlRfU1RBVEVfQ09OVElOVUFUSU9OID0gJ0JPR1VTX0NPTU1FTlRfU1RBVEVfQ09OVElOVUFUSU9OJyxcbiAgICBNQVJLVVBfREVDTEFSQVRJT05fT1BFTl9TVEFURSA9ICdNQVJLVVBfREVDTEFSQVRJT05fT1BFTl9TVEFURScsXG4gICAgQ09NTUVOVF9TVEFSVF9TVEFURSA9ICdDT01NRU5UX1NUQVJUX1NUQVRFJyxcbiAgICBDT01NRU5UX1NUQVJUX0RBU0hfU1RBVEUgPSAnQ09NTUVOVF9TVEFSVF9EQVNIX1NUQVRFJyxcbiAgICBDT01NRU5UX1NUQVRFID0gJ0NPTU1FTlRfU1RBVEUnLFxuICAgIENPTU1FTlRfRU5EX0RBU0hfU1RBVEUgPSAnQ09NTUVOVF9FTkRfREFTSF9TVEFURScsXG4gICAgQ09NTUVOVF9FTkRfU1RBVEUgPSAnQ09NTUVOVF9FTkRfU1RBVEUnLFxuICAgIENPTU1FTlRfRU5EX0JBTkdfU1RBVEUgPSAnQ09NTUVOVF9FTkRfQkFOR19TVEFURScsXG4gICAgRE9DVFlQRV9TVEFURSA9ICdET0NUWVBFX1NUQVRFJyxcbiAgICBET0NUWVBFX05BTUVfU1RBVEUgPSAnRE9DVFlQRV9OQU1FX1NUQVRFJyxcbiAgICBBRlRFUl9ET0NUWVBFX05BTUVfU1RBVEUgPSAnQUZURVJfRE9DVFlQRV9OQU1FX1NUQVRFJyxcbiAgICBCRUZPUkVfRE9DVFlQRV9QVUJMSUNfSURFTlRJRklFUl9TVEFURSA9ICdCRUZPUkVfRE9DVFlQRV9QVUJMSUNfSURFTlRJRklFUl9TVEFURScsXG4gICAgRE9DVFlQRV9QVUJMSUNfSURFTlRJRklFUl9ET1VCTEVfUVVPVEVEX1NUQVRFID0gJ0RPQ1RZUEVfUFVCTElDX0lERU5USUZJRVJfRE9VQkxFX1FVT1RFRF9TVEFURScsXG4gICAgRE9DVFlQRV9QVUJMSUNfSURFTlRJRklFUl9TSU5HTEVfUVVPVEVEX1NUQVRFID0gJ0RPQ1RZUEVfUFVCTElDX0lERU5USUZJRVJfU0lOR0xFX1FVT1RFRF9TVEFURScsXG4gICAgQkVUV0VFTl9ET0NUWVBFX1BVQkxJQ19BTkRfU1lTVEVNX0lERU5USUZJRVJTX1NUQVRFID0gJ0JFVFdFRU5fRE9DVFlQRV9QVUJMSUNfQU5EX1NZU1RFTV9JREVOVElGSUVSU19TVEFURScsXG4gICAgQkVGT1JFX0RPQ1RZUEVfU1lTVEVNX0lERU5USUZJRVJfU1RBVEUgPSAnQkVGT1JFX0RPQ1RZUEVfU1lTVEVNX0lERU5USUZJRVJfU1RBVEUnLFxuICAgIERPQ1RZUEVfU1lTVEVNX0lERU5USUZJRVJfRE9VQkxFX1FVT1RFRF9TVEFURSA9ICdET0NUWVBFX1NZU1RFTV9JREVOVElGSUVSX0RPVUJMRV9RVU9URURfU1RBVEUnLFxuICAgIERPQ1RZUEVfU1lTVEVNX0lERU5USUZJRVJfU0lOR0xFX1FVT1RFRF9TVEFURSA9ICdET0NUWVBFX1NZU1RFTV9JREVOVElGSUVSX1NJTkdMRV9RVU9URURfU1RBVEUnLFxuICAgIEFGVEVSX0RPQ1RZUEVfU1lTVEVNX0lERU5USUZJRVJfU1RBVEUgPSAnQUZURVJfRE9DVFlQRV9TWVNURU1fSURFTlRJRklFUl9TVEFURScsXG4gICAgQk9HVVNfRE9DVFlQRV9TVEFURSA9ICdCT0dVU19ET0NUWVBFX1NUQVRFJyxcbiAgICBDREFUQV9TRUNUSU9OX1NUQVRFID0gJ0NEQVRBX1NFQ1RJT05fU1RBVEUnO1xuXG4vL1V0aWxzXG5cbi8vT1BUSU1JWkFUSU9OOiB0aGVzZSB1dGlsaXR5IGZ1bmN0aW9ucyBzaG91bGQgbm90IGJlIG1vdmVkIG91dCBvZiB0aGlzIG1vZHVsZS4gVjggQ3JhbmtzaGFmdCB3aWxsIG5vdCBpbmxpbmVcbi8vdGhpcyBmdW5jdGlvbnMgaWYgdGhleSB3aWxsIGJlIHNpdHVhdGVkIGluIGFub3RoZXIgbW9kdWxlIGR1ZSB0byBjb250ZXh0IHN3aXRjaC5cbi8vQWx3YXlzIHBlcmZvcm0gaW5saW5pbmcgY2hlY2sgYmVmb3JlIG1vZGlmeWluZyB0aGlzIGZ1bmN0aW9ucyAoJ25vZGUgLS10cmFjZS1pbmxpbmluZycpLlxuZnVuY3Rpb24gaXNXaGl0ZXNwYWNlKGNwKSB7XG4gICAgcmV0dXJuIGNwID09PSAkLlNQQUNFIHx8IGNwID09PSAkLkxJTkVfRkVFRCB8fCBjcCA9PT0gJC5UQUJVTEFUSU9OIHx8IGNwID09PSAkLkZPUk1fRkVFRDtcbn1cblxuZnVuY3Rpb24gaXNBc2NpaURpZ2l0KGNwKSB7XG4gICAgcmV0dXJuIGNwID49ICQuRElHSVRfMCAmJiBjcCA8PSAkLkRJR0lUXzk7XG59XG5cbmZ1bmN0aW9uIGlzQXNjaWlVcHBlcihjcCkge1xuICAgIHJldHVybiBjcCA+PSAkLkxBVElOX0NBUElUQUxfQSAmJiBjcCA8PSAkLkxBVElOX0NBUElUQUxfWjtcbn1cblxuZnVuY3Rpb24gaXNBc2NpaUxvd2VyKGNwKSB7XG4gICAgcmV0dXJuIGNwID49ICQuTEFUSU5fU01BTExfQSAmJiBjcCA8PSAkLkxBVElOX1NNQUxMX1o7XG59XG5cbmZ1bmN0aW9uIGlzQXNjaWlMZXR0ZXIoY3ApIHtcbiAgICByZXR1cm4gaXNBc2NpaUxvd2VyKGNwKSB8fCBpc0FzY2lpVXBwZXIoY3ApO1xufVxuXG5mdW5jdGlvbiBpc0FzY2lpQWxwaGFOdW1lcmljKGNwKSB7XG4gICAgcmV0dXJuIGlzQXNjaWlMZXR0ZXIoY3ApIHx8IGlzQXNjaWlEaWdpdChjcCk7XG59XG5cbmZ1bmN0aW9uIGlzRGlnaXQoY3AsIGlzSGV4KSB7XG4gICAgcmV0dXJuIGlzQXNjaWlEaWdpdChjcCkgfHwgaXNIZXggJiYgKGNwID49ICQuTEFUSU5fQ0FQSVRBTF9BICYmIGNwIDw9ICQuTEFUSU5fQ0FQSVRBTF9GIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNwID49ICQuTEFUSU5fU01BTExfQSAmJiBjcCA8PSAkLkxBVElOX1NNQUxMX0YpO1xufVxuXG5mdW5jdGlvbiBpc1Jlc2VydmVkQ29kZVBvaW50KGNwKSB7XG4gICAgcmV0dXJuIGNwID49IDB4RDgwMCAmJiBjcCA8PSAweERGRkYgfHwgY3AgPiAweDEwRkZGRjtcbn1cblxuZnVuY3Rpb24gdG9Bc2NpaUxvd2VyQ29kZVBvaW50KGNwKSB7XG4gICAgcmV0dXJuIGNwICsgMHgwMDIwO1xufVxuXG4vL05PVEU6IFN0cmluZy5mcm9tQ2hhckNvZGUoKSBmdW5jdGlvbiBjYW4gaGFuZGxlIG9ubHkgY2hhcmFjdGVycyBmcm9tIEJNUCBzdWJzZXQuXG4vL1NvLCB3ZSBuZWVkIHRvIHdvcmthcm91bmQgdGhpcyBtYW51YWxseS5cbi8vKHNlZTogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9TdHJpbmcvZnJvbUNoYXJDb2RlI0dldHRpbmdfaXRfdG9fd29ya193aXRoX2hpZ2hlcl92YWx1ZXMpXG5mdW5jdGlvbiB0b0NoYXIoY3ApIHtcbiAgICBpZiAoY3AgPD0gMHhGRkZGKVxuICAgICAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShjcCk7XG5cbiAgICBjcCAtPSAweDEwMDAwO1xuICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGNwID4+PiAxMCAmIDB4M0ZGIHwgMHhEODAwKSArIFN0cmluZy5mcm9tQ2hhckNvZGUoMHhEQzAwIHwgY3AgJiAweDNGRik7XG59XG5cbmZ1bmN0aW9uIHRvQXNjaWlMb3dlckNoYXIoY3ApIHtcbiAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZSh0b0FzY2lpTG93ZXJDb2RlUG9pbnQoY3ApKTtcbn1cblxuZnVuY3Rpb24gZmluZE5hbWVkRW50aXR5VHJlZUJyYW5jaChub2RlSXgsIGNwKSB7XG4gICAgdmFyIGJyYW5jaENvdW50ID0gbmVUcmVlWysrbm9kZUl4XSxcbiAgICAgICAgbG8gPSArK25vZGVJeCxcbiAgICAgICAgaGkgPSBsbyArIGJyYW5jaENvdW50IC0gMTtcblxuICAgIHdoaWxlIChsbyA8PSBoaSkge1xuICAgICAgICB2YXIgbWlkID0gbG8gKyBoaSA+Pj4gMSxcbiAgICAgICAgICAgIG1pZENwID0gbmVUcmVlW21pZF07XG5cbiAgICAgICAgaWYgKG1pZENwIDwgY3ApXG4gICAgICAgICAgICBsbyA9IG1pZCArIDE7XG5cbiAgICAgICAgZWxzZSBpZiAobWlkQ3AgPiBjcClcbiAgICAgICAgICAgIGhpID0gbWlkIC0gMTtcblxuICAgICAgICBlbHNlXG4gICAgICAgICAgICByZXR1cm4gbmVUcmVlW21pZCArIGJyYW5jaENvdW50XTtcbiAgICB9XG5cbiAgICByZXR1cm4gLTE7XG59XG5cblxuLy9Ub2tlbml6ZXJcbnZhciBUb2tlbml6ZXIgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnByZXByb2Nlc3NvciA9IG5ldyBQcmVwcm9jZXNzb3IoKTtcblxuICAgIHRoaXMudG9rZW5RdWV1ZSA9IFtdO1xuXG4gICAgdGhpcy5hbGxvd0NEQVRBID0gZmFsc2U7XG5cbiAgICB0aGlzLnN0YXRlID0gREFUQV9TVEFURTtcbiAgICB0aGlzLnJldHVyblN0YXRlID0gJyc7XG5cbiAgICB0aGlzLnRlbXBCdWZmID0gW107XG4gICAgdGhpcy5hZGRpdGlvbmFsQWxsb3dlZENwID0gdm9pZCAwO1xuICAgIHRoaXMubGFzdFN0YXJ0VGFnTmFtZSA9ICcnO1xuXG4gICAgdGhpcy5jb25zdW1lZEFmdGVyU25hcHNob3QgPSAtMTtcbiAgICB0aGlzLmFjdGl2ZSA9IGZhbHNlO1xuXG4gICAgdGhpcy5jdXJyZW50Q2hhcmFjdGVyVG9rZW4gPSBudWxsO1xuICAgIHRoaXMuY3VycmVudFRva2VuID0gbnVsbDtcbiAgICB0aGlzLmN1cnJlbnRBdHRyID0gbnVsbDtcbn07XG5cbi8vVG9rZW4gdHlwZXNcblRva2VuaXplci5DSEFSQUNURVJfVE9LRU4gPSAnQ0hBUkFDVEVSX1RPS0VOJztcblRva2VuaXplci5OVUxMX0NIQVJBQ1RFUl9UT0tFTiA9ICdOVUxMX0NIQVJBQ1RFUl9UT0tFTic7XG5Ub2tlbml6ZXIuV0hJVEVTUEFDRV9DSEFSQUNURVJfVE9LRU4gPSAnV0hJVEVTUEFDRV9DSEFSQUNURVJfVE9LRU4nO1xuVG9rZW5pemVyLlNUQVJUX1RBR19UT0tFTiA9ICdTVEFSVF9UQUdfVE9LRU4nO1xuVG9rZW5pemVyLkVORF9UQUdfVE9LRU4gPSAnRU5EX1RBR19UT0tFTic7XG5Ub2tlbml6ZXIuQ09NTUVOVF9UT0tFTiA9ICdDT01NRU5UX1RPS0VOJztcblRva2VuaXplci5ET0NUWVBFX1RPS0VOID0gJ0RPQ1RZUEVfVE9LRU4nO1xuVG9rZW5pemVyLkVPRl9UT0tFTiA9ICdFT0ZfVE9LRU4nO1xuVG9rZW5pemVyLkhJQkVSTkFUSU9OX1RPS0VOID0gJ0hJQkVSTkFUSU9OX1RPS0VOJztcblxuLy9Ub2tlbml6ZXIgaW5pdGlhbCBzdGF0ZXMgZm9yIGRpZmZlcmVudCBtb2Rlc1xuVG9rZW5pemVyLk1PREUgPSB7XG4gICAgREFUQTogREFUQV9TVEFURSxcbiAgICBSQ0RBVEE6IFJDREFUQV9TVEFURSxcbiAgICBSQVdURVhUOiBSQVdURVhUX1NUQVRFLFxuICAgIFNDUklQVF9EQVRBOiBTQ1JJUFRfREFUQV9TVEFURSxcbiAgICBQTEFJTlRFWFQ6IFBMQUlOVEVYVF9TVEFURVxufTtcblxuLy9TdGF0aWNcblRva2VuaXplci5nZXRUb2tlbkF0dHIgPSBmdW5jdGlvbiAodG9rZW4sIGF0dHJOYW1lKSB7XG4gICAgZm9yICh2YXIgaSA9IHRva2VuLmF0dHJzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIGlmICh0b2tlbi5hdHRyc1tpXS5uYW1lID09PSBhdHRyTmFtZSlcbiAgICAgICAgICAgIHJldHVybiB0b2tlbi5hdHRyc1tpXS52YWx1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbn07XG5cbi8vQVBJXG5Ub2tlbml6ZXIucHJvdG90eXBlLmdldE5leHRUb2tlbiA9IGZ1bmN0aW9uICgpIHtcbiAgICB3aGlsZSAoIXRoaXMudG9rZW5RdWV1ZS5sZW5ndGggJiYgdGhpcy5hY3RpdmUpIHtcbiAgICAgICAgdGhpcy5faGliZXJuYXRpb25TbmFwc2hvdCgpO1xuXG4gICAgICAgIHZhciBjcCA9IHRoaXMuX2NvbnN1bWUoKTtcblxuICAgICAgICBpZiAoIXRoaXMuX2Vuc3VyZUhpYmVybmF0aW9uKCkpXG4gICAgICAgICAgICB0aGlzW3RoaXMuc3RhdGVdKGNwKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy50b2tlblF1ZXVlLnNoaWZ0KCk7XG59O1xuXG5Ub2tlbml6ZXIucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gKGNodW5rLCBpc0xhc3RDaHVuaykge1xuICAgIHRoaXMuYWN0aXZlID0gdHJ1ZTtcbiAgICB0aGlzLnByZXByb2Nlc3Nvci53cml0ZShjaHVuaywgaXNMYXN0Q2h1bmspO1xufTtcblxuVG9rZW5pemVyLnByb3RvdHlwZS5pbnNlcnRIdG1sQXRDdXJyZW50UG9zID0gZnVuY3Rpb24gKGNodW5rKSB7XG4gICAgdGhpcy5hY3RpdmUgPSB0cnVlO1xuICAgIHRoaXMucHJlcHJvY2Vzc29yLmluc2VydEh0bWxBdEN1cnJlbnRQb3MoY2h1bmspO1xufTtcblxuLy9IaWJlcm5hdGlvblxuVG9rZW5pemVyLnByb3RvdHlwZS5faGliZXJuYXRpb25TbmFwc2hvdCA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmNvbnN1bWVkQWZ0ZXJTbmFwc2hvdCA9IDA7XG59O1xuXG5Ub2tlbml6ZXIucHJvdG90eXBlLl9lbnN1cmVIaWJlcm5hdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5wcmVwcm9jZXNzb3IuZW5kT2ZDaHVua0hpdCkge1xuICAgICAgICBmb3IgKDsgdGhpcy5jb25zdW1lZEFmdGVyU25hcHNob3QgPiAwOyB0aGlzLmNvbnN1bWVkQWZ0ZXJTbmFwc2hvdC0tKVxuICAgICAgICAgICAgdGhpcy5wcmVwcm9jZXNzb3IucmV0cmVhdCgpO1xuXG4gICAgICAgIHRoaXMuYWN0aXZlID0gZmFsc2U7XG4gICAgICAgIHRoaXMudG9rZW5RdWV1ZS5wdXNoKHt0eXBlOiBUb2tlbml6ZXIuSElCRVJOQVRJT05fVE9LRU59KTtcblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG59O1xuXG5cbi8vQ29uc3VtcHRpb25cblRva2VuaXplci5wcm90b3R5cGUuX2NvbnN1bWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5jb25zdW1lZEFmdGVyU25hcHNob3QrKztcbiAgICByZXR1cm4gdGhpcy5wcmVwcm9jZXNzb3IuYWR2YW5jZSgpO1xufTtcblxuVG9rZW5pemVyLnByb3RvdHlwZS5fdW5jb25zdW1lID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuY29uc3VtZWRBZnRlclNuYXBzaG90LS07XG4gICAgdGhpcy5wcmVwcm9jZXNzb3IucmV0cmVhdCgpO1xufTtcblxuVG9rZW5pemVyLnByb3RvdHlwZS5fdW5jb25zdW1lU2V2ZXJhbCA9IGZ1bmN0aW9uIChjb3VudCkge1xuICAgIHdoaWxlIChjb3VudC0tKVxuICAgICAgICB0aGlzLl91bmNvbnN1bWUoKTtcbn07XG5cblRva2VuaXplci5wcm90b3R5cGUuX3JlY29uc3VtZUluU3RhdGUgPSBmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICB0aGlzLnN0YXRlID0gc3RhdGU7XG4gICAgdGhpcy5fdW5jb25zdW1lKCk7XG59O1xuXG5Ub2tlbml6ZXIucHJvdG90eXBlLl9jb25zdW1lU3Vic2VxdWVudElmTWF0Y2ggPSBmdW5jdGlvbiAocGF0dGVybiwgc3RhcnRDcCwgY2FzZVNlbnNpdGl2ZSkge1xuICAgIHZhciBjb25zdW1lZENvdW50ID0gMCxcbiAgICAgICAgaXNNYXRjaCA9IHRydWUsXG4gICAgICAgIHBhdHRlcm5MZW5ndGggPSBwYXR0ZXJuLmxlbmd0aCxcbiAgICAgICAgcGF0dGVyblBvcyA9IDAsXG4gICAgICAgIGNwID0gc3RhcnRDcCxcbiAgICAgICAgcGF0dGVybkNwID0gdm9pZCAwO1xuXG4gICAgZm9yICg7IHBhdHRlcm5Qb3MgPCBwYXR0ZXJuTGVuZ3RoOyBwYXR0ZXJuUG9zKyspIHtcbiAgICAgICAgaWYgKHBhdHRlcm5Qb3MgPiAwKSB7XG4gICAgICAgICAgICBjcCA9IHRoaXMuX2NvbnN1bWUoKTtcbiAgICAgICAgICAgIGNvbnN1bWVkQ291bnQrKztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjcCA9PT0gJC5FT0YpIHtcbiAgICAgICAgICAgIGlzTWF0Y2ggPSBmYWxzZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgcGF0dGVybkNwID0gcGF0dGVybltwYXR0ZXJuUG9zXTtcblxuICAgICAgICBpZiAoY3AgIT09IHBhdHRlcm5DcCAmJiAoY2FzZVNlbnNpdGl2ZSB8fCBjcCAhPT0gdG9Bc2NpaUxvd2VyQ29kZVBvaW50KHBhdHRlcm5DcCkpKSB7XG4gICAgICAgICAgICBpc01hdGNoID0gZmFsc2U7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmICghaXNNYXRjaClcbiAgICAgICAgdGhpcy5fdW5jb25zdW1lU2V2ZXJhbChjb25zdW1lZENvdW50KTtcblxuICAgIHJldHVybiBpc01hdGNoO1xufTtcblxuLy9Mb29rYWhlYWRcblRva2VuaXplci5wcm90b3R5cGUuX2xvb2thaGVhZCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgY3AgPSB0aGlzLl9jb25zdW1lKCk7XG5cbiAgICB0aGlzLl91bmNvbnN1bWUoKTtcblxuICAgIHJldHVybiBjcDtcbn07XG5cbi8vVGVtcCBidWZmZXJcblRva2VuaXplci5wcm90b3R5cGUuaXNUZW1wQnVmZmVyRXF1YWxUb1NjcmlwdFN0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy50ZW1wQnVmZi5sZW5ndGggIT09ICQkLlNDUklQVF9TVFJJTkcubGVuZ3RoKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMudGVtcEJ1ZmYubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKHRoaXMudGVtcEJ1ZmZbaV0gIT09ICQkLlNDUklQVF9TVFJJTkdbaV0pXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG59O1xuXG4vL1Rva2VuIGNyZWF0aW9uXG5Ub2tlbml6ZXIucHJvdG90eXBlLl9jcmVhdGVTdGFydFRhZ1Rva2VuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuY3VycmVudFRva2VuID0ge1xuICAgICAgICB0eXBlOiBUb2tlbml6ZXIuU1RBUlRfVEFHX1RPS0VOLFxuICAgICAgICB0YWdOYW1lOiAnJyxcbiAgICAgICAgc2VsZkNsb3Npbmc6IGZhbHNlLFxuICAgICAgICBhdHRyczogW11cbiAgICB9O1xufTtcblxuVG9rZW5pemVyLnByb3RvdHlwZS5fY3JlYXRlRW5kVGFnVG9rZW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5jdXJyZW50VG9rZW4gPSB7XG4gICAgICAgIHR5cGU6IFRva2VuaXplci5FTkRfVEFHX1RPS0VOLFxuICAgICAgICB0YWdOYW1lOiAnJyxcbiAgICAgICAgYXR0cnM6IFtdXG4gICAgfTtcbn07XG5cblRva2VuaXplci5wcm90b3R5cGUuX2NyZWF0ZUNvbW1lbnRUb2tlbiA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmN1cnJlbnRUb2tlbiA9IHtcbiAgICAgICAgdHlwZTogVG9rZW5pemVyLkNPTU1FTlRfVE9LRU4sXG4gICAgICAgIGRhdGE6ICcnXG4gICAgfTtcbn07XG5cblRva2VuaXplci5wcm90b3R5cGUuX2NyZWF0ZURvY3R5cGVUb2tlbiA9IGZ1bmN0aW9uIChpbml0aWFsTmFtZSkge1xuICAgIHRoaXMuY3VycmVudFRva2VuID0ge1xuICAgICAgICB0eXBlOiBUb2tlbml6ZXIuRE9DVFlQRV9UT0tFTixcbiAgICAgICAgbmFtZTogaW5pdGlhbE5hbWUsXG4gICAgICAgIGZvcmNlUXVpcmtzOiBmYWxzZSxcbiAgICAgICAgcHVibGljSWQ6IG51bGwsXG4gICAgICAgIHN5c3RlbUlkOiBudWxsXG4gICAgfTtcbn07XG5cblRva2VuaXplci5wcm90b3R5cGUuX2NyZWF0ZUNoYXJhY3RlclRva2VuID0gZnVuY3Rpb24gKHR5cGUsIGNoKSB7XG4gICAgdGhpcy5jdXJyZW50Q2hhcmFjdGVyVG9rZW4gPSB7XG4gICAgICAgIHR5cGU6IHR5cGUsXG4gICAgICAgIGNoYXJzOiBjaFxuICAgIH07XG59O1xuXG4vL1RhZyBhdHRyaWJ1dGVzXG5Ub2tlbml6ZXIucHJvdG90eXBlLl9jcmVhdGVBdHRyID0gZnVuY3Rpb24gKGF0dHJOYW1lRmlyc3RDaCkge1xuICAgIHRoaXMuY3VycmVudEF0dHIgPSB7XG4gICAgICAgIG5hbWU6IGF0dHJOYW1lRmlyc3RDaCxcbiAgICAgICAgdmFsdWU6ICcnXG4gICAgfTtcbn07XG5cblRva2VuaXplci5wcm90b3R5cGUuX2lzRHVwbGljYXRlQXR0ciA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gVG9rZW5pemVyLmdldFRva2VuQXR0cih0aGlzLmN1cnJlbnRUb2tlbiwgdGhpcy5jdXJyZW50QXR0ci5uYW1lKSAhPT0gbnVsbDtcbn07XG5cblRva2VuaXplci5wcm90b3R5cGUuX2xlYXZlQXR0ck5hbWUgPSBmdW5jdGlvbiAodG9TdGF0ZSkge1xuICAgIHRoaXMuc3RhdGUgPSB0b1N0YXRlO1xuXG4gICAgaWYgKCF0aGlzLl9pc0R1cGxpY2F0ZUF0dHIoKSlcbiAgICAgICAgdGhpcy5jdXJyZW50VG9rZW4uYXR0cnMucHVzaCh0aGlzLmN1cnJlbnRBdHRyKTtcbn07XG5cblRva2VuaXplci5wcm90b3R5cGUuX2xlYXZlQXR0clZhbHVlID0gZnVuY3Rpb24gKHRvU3RhdGUpIHtcbiAgICB0aGlzLnN0YXRlID0gdG9TdGF0ZTtcbn07XG5cbi8vQXBwcm9wcmlhdGUgZW5kIHRhZyB0b2tlblxuLy8oc2VlOiBodHRwOi8vd3d3LndoYXR3Zy5vcmcvc3BlY3Mvd2ViLWFwcHMvY3VycmVudC13b3JrL211bHRpcGFnZS90b2tlbml6YXRpb24uaHRtbCNhcHByb3ByaWF0ZS1lbmQtdGFnLXRva2VuKVxuVG9rZW5pemVyLnByb3RvdHlwZS5faXNBcHByb3ByaWF0ZUVuZFRhZ1Rva2VuID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLmxhc3RTdGFydFRhZ05hbWUgPT09IHRoaXMuY3VycmVudFRva2VuLnRhZ05hbWU7XG59O1xuXG4vL1Rva2VuIGVtaXNzaW9uXG5Ub2tlbml6ZXIucHJvdG90eXBlLl9lbWl0Q3VycmVudFRva2VuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuX2VtaXRDdXJyZW50Q2hhcmFjdGVyVG9rZW4oKTtcblxuICAgIC8vTk9URTogc3RvcmUgZW1pdGVkIHN0YXJ0IHRhZydzIHRhZ05hbWUgdG8gZGV0ZXJtaW5lIGlzIHRoZSBmb2xsb3dpbmcgZW5kIHRhZyB0b2tlbiBpcyBhcHByb3ByaWF0ZS5cbiAgICBpZiAodGhpcy5jdXJyZW50VG9rZW4udHlwZSA9PT0gVG9rZW5pemVyLlNUQVJUX1RBR19UT0tFTilcbiAgICAgICAgdGhpcy5sYXN0U3RhcnRUYWdOYW1lID0gdGhpcy5jdXJyZW50VG9rZW4udGFnTmFtZTtcblxuICAgIHRoaXMudG9rZW5RdWV1ZS5wdXNoKHRoaXMuY3VycmVudFRva2VuKTtcbiAgICB0aGlzLmN1cnJlbnRUb2tlbiA9IG51bGw7XG59O1xuXG5Ub2tlbml6ZXIucHJvdG90eXBlLl9lbWl0Q3VycmVudENoYXJhY3RlclRva2VuID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLmN1cnJlbnRDaGFyYWN0ZXJUb2tlbikge1xuICAgICAgICB0aGlzLnRva2VuUXVldWUucHVzaCh0aGlzLmN1cnJlbnRDaGFyYWN0ZXJUb2tlbik7XG4gICAgICAgIHRoaXMuY3VycmVudENoYXJhY3RlclRva2VuID0gbnVsbDtcbiAgICB9XG59O1xuXG5Ub2tlbml6ZXIucHJvdG90eXBlLl9lbWl0RU9GVG9rZW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5fZW1pdEN1cnJlbnRDaGFyYWN0ZXJUb2tlbigpO1xuICAgIHRoaXMudG9rZW5RdWV1ZS5wdXNoKHt0eXBlOiBUb2tlbml6ZXIuRU9GX1RPS0VOfSk7XG59O1xuXG4vL0NoYXJhY3RlcnMgZW1pc3Npb25cblxuLy9PUFRJTUlaQVRJT046IHNwZWNpZmljYXRpb24gdXNlcyBvbmx5IG9uZSB0eXBlIG9mIGNoYXJhY3RlciB0b2tlbnMgKG9uZSB0b2tlbiBwZXIgY2hhcmFjdGVyKS5cbi8vVGhpcyBjYXVzZXMgYSBodWdlIG1lbW9yeSBvdmVyaGVhZCBhbmQgYSBsb3Qgb2YgdW5uZWNlc3NhcnkgcGFyc2VyIGxvb3BzLiBwYXJzZTUgdXNlcyAzIGdyb3VwcyBvZiBjaGFyYWN0ZXJzLlxuLy9JZiB3ZSBoYXZlIGEgc2VxdWVuY2Ugb2YgY2hhcmFjdGVycyB0aGF0IGJlbG9uZyB0byB0aGUgc2FtZSBncm91cCwgcGFyc2VyIGNhbiBwcm9jZXNzIGl0XG4vL2FzIGEgc2luZ2xlIHNvbGlkIGNoYXJhY3RlciB0b2tlbi5cbi8vU28sIHRoZXJlIGFyZSAzIHR5cGVzIG9mIGNoYXJhY3RlciB0b2tlbnMgaW4gcGFyc2U1OlxuLy8xKU5VTExfQ0hBUkFDVEVSX1RPS0VOIC0gXFx1MDAwMC1jaGFyYWN0ZXIgc2VxdWVuY2VzIChlLmcuICdcXHUwMDAwXFx1MDAwMFxcdTAwMDAnKVxuLy8yKVdISVRFU1BBQ0VfQ0hBUkFDVEVSX1RPS0VOIC0gYW55IHdoaXRlc3BhY2UvbmV3LWxpbmUgY2hhcmFjdGVyIHNlcXVlbmNlcyAoZS5nLiAnXFxuICBcXHJcXHQgICBcXGYnKVxuLy8zKUNIQVJBQ1RFUl9UT0tFTiAtIGFueSBjaGFyYWN0ZXIgc2VxdWVuY2Ugd2hpY2ggZG9uJ3QgYmVsb25nIHRvIGdyb3VwcyAxIGFuZCAyIChlLmcuICdhYmNkZWYxMjM0QEAjJCVeJylcblRva2VuaXplci5wcm90b3R5cGUuX2FwcGVuZENoYXJUb0N1cnJlbnRDaGFyYWN0ZXJUb2tlbiA9IGZ1bmN0aW9uICh0eXBlLCBjaCkge1xuICAgIGlmICh0aGlzLmN1cnJlbnRDaGFyYWN0ZXJUb2tlbiAmJiB0aGlzLmN1cnJlbnRDaGFyYWN0ZXJUb2tlbi50eXBlICE9PSB0eXBlKVxuICAgICAgICB0aGlzLl9lbWl0Q3VycmVudENoYXJhY3RlclRva2VuKCk7XG5cbiAgICBpZiAodGhpcy5jdXJyZW50Q2hhcmFjdGVyVG9rZW4pXG4gICAgICAgIHRoaXMuY3VycmVudENoYXJhY3RlclRva2VuLmNoYXJzICs9IGNoO1xuXG4gICAgZWxzZVxuICAgICAgICB0aGlzLl9jcmVhdGVDaGFyYWN0ZXJUb2tlbih0eXBlLCBjaCk7XG59O1xuXG5Ub2tlbml6ZXIucHJvdG90eXBlLl9lbWl0Q29kZVBvaW50ID0gZnVuY3Rpb24gKGNwKSB7XG4gICAgdmFyIHR5cGUgPSBUb2tlbml6ZXIuQ0hBUkFDVEVSX1RPS0VOO1xuXG4gICAgaWYgKGlzV2hpdGVzcGFjZShjcCkpXG4gICAgICAgIHR5cGUgPSBUb2tlbml6ZXIuV0hJVEVTUEFDRV9DSEFSQUNURVJfVE9LRU47XG5cbiAgICBlbHNlIGlmIChjcCA9PT0gJC5OVUxMKVxuICAgICAgICB0eXBlID0gVG9rZW5pemVyLk5VTExfQ0hBUkFDVEVSX1RPS0VOO1xuXG4gICAgdGhpcy5fYXBwZW5kQ2hhclRvQ3VycmVudENoYXJhY3RlclRva2VuKHR5cGUsIHRvQ2hhcihjcCkpO1xufTtcblxuVG9rZW5pemVyLnByb3RvdHlwZS5fZW1pdFNldmVyYWxDb2RlUG9pbnRzID0gZnVuY3Rpb24gKGNvZGVQb2ludHMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvZGVQb2ludHMubGVuZ3RoOyBpKyspXG4gICAgICAgIHRoaXMuX2VtaXRDb2RlUG9pbnQoY29kZVBvaW50c1tpXSk7XG59O1xuXG4vL05PVEU6IHVzZWQgdGhlbiB3ZSBlbWl0IGNoYXJhY3RlciBleHBsaWNpdGx5LiBUaGlzIGlzIGFsd2F5cyBhIG5vbi13aGl0ZXNwYWNlIGFuZCBhIG5vbi1udWxsIGNoYXJhY3Rlci5cbi8vU28gd2UgY2FuIGF2b2lkIGFkZGl0aW9uYWwgY2hlY2tzIGhlcmUuXG5Ub2tlbml6ZXIucHJvdG90eXBlLl9lbWl0Q2hhciA9IGZ1bmN0aW9uIChjaCkge1xuICAgIHRoaXMuX2FwcGVuZENoYXJUb0N1cnJlbnRDaGFyYWN0ZXJUb2tlbihUb2tlbml6ZXIuQ0hBUkFDVEVSX1RPS0VOLCBjaCk7XG59O1xuXG4vL0NoYXJhY3RlciByZWZlcmVuY2UgdG9rZW5pemF0aW9uXG5Ub2tlbml6ZXIucHJvdG90eXBlLl9jb25zdW1lTnVtZXJpY0VudGl0eSA9IGZ1bmN0aW9uIChpc0hleCkge1xuICAgIHZhciBkaWdpdHMgPSAnJyxcbiAgICAgICAgbmV4dENwID0gdm9pZCAwO1xuXG4gICAgZG8ge1xuICAgICAgICBkaWdpdHMgKz0gdG9DaGFyKHRoaXMuX2NvbnN1bWUoKSk7XG4gICAgICAgIG5leHRDcCA9IHRoaXMuX2xvb2thaGVhZCgpO1xuICAgIH0gd2hpbGUgKG5leHRDcCAhPT0gJC5FT0YgJiYgaXNEaWdpdChuZXh0Q3AsIGlzSGV4KSk7XG5cbiAgICBpZiAodGhpcy5fbG9va2FoZWFkKCkgPT09ICQuU0VNSUNPTE9OKVxuICAgICAgICB0aGlzLl9jb25zdW1lKCk7XG5cbiAgICB2YXIgcmVmZXJlbmNlZENwID0gcGFyc2VJbnQoZGlnaXRzLCBpc0hleCA/IDE2IDogMTApLFxuICAgICAgICByZXBsYWNlbWVudCA9IE5VTUVSSUNfRU5USVRZX1JFUExBQ0VNRU5UU1tyZWZlcmVuY2VkQ3BdO1xuXG4gICAgaWYgKHJlcGxhY2VtZW50KVxuICAgICAgICByZXR1cm4gcmVwbGFjZW1lbnQ7XG5cbiAgICBpZiAoaXNSZXNlcnZlZENvZGVQb2ludChyZWZlcmVuY2VkQ3ApKVxuICAgICAgICByZXR1cm4gJC5SRVBMQUNFTUVOVF9DSEFSQUNURVI7XG5cbiAgICByZXR1cm4gcmVmZXJlbmNlZENwO1xufTtcblxuLy8gTk9URTogZm9yIHRoZSBkZXRhaWxzIG9uIHRoaXMgYWxnb3JpdGhtIHNlZVxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2luaWt1bGluL3BhcnNlNS90cmVlL21hc3Rlci9zY3JpcHRzL2dlbmVyYXRlX25hbWVkX2VudGl0eV9kYXRhL1JFQURNRS5tZFxuVG9rZW5pemVyLnByb3RvdHlwZS5fY29uc3VtZU5hbWVkRW50aXR5ID0gZnVuY3Rpb24gKGluQXR0cikge1xuICAgIHZhciByZWZlcmVuY2VkQ29kZVBvaW50cyA9IG51bGwsXG4gICAgICAgIHJlZmVyZW5jZVNpemUgPSAwLFxuICAgICAgICBjcCA9IG51bGwsXG4gICAgICAgIGNvbnN1bWVkQ291bnQgPSAwLFxuICAgICAgICBzZW1pY29sb25UZXJtaW5hdGVkID0gZmFsc2U7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA+IC0xOykge1xuICAgICAgICB2YXIgY3VycmVudCA9IG5lVHJlZVtpXSxcbiAgICAgICAgICAgIGluTm9kZSA9IGN1cnJlbnQgPCBNQVhfQlJBTkNIX01BUktFUl9WQUxVRSxcbiAgICAgICAgICAgIG5vZGVXaXRoRGF0YSA9IGluTm9kZSAmJiBjdXJyZW50ICYgSEFTX0RBVEFfRkxBRztcblxuICAgICAgICBpZiAobm9kZVdpdGhEYXRhKSB7XG4gICAgICAgICAgICByZWZlcmVuY2VkQ29kZVBvaW50cyA9IGN1cnJlbnQgJiBEQVRBX0RVUExFVF9GTEFHID8gW25lVHJlZVsrK2ldLCBuZVRyZWVbKytpXV0gOiBbbmVUcmVlWysraV1dO1xuICAgICAgICAgICAgcmVmZXJlbmNlU2l6ZSA9IGNvbnN1bWVkQ291bnQ7XG5cbiAgICAgICAgICAgIGlmIChjcCA9PT0gJC5TRU1JQ09MT04pIHtcbiAgICAgICAgICAgICAgICBzZW1pY29sb25UZXJtaW5hdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNwID0gdGhpcy5fY29uc3VtZSgpO1xuICAgICAgICBjb25zdW1lZENvdW50Kys7XG5cbiAgICAgICAgaWYgKGNwID09PSAkLkVPRilcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGlmIChpbk5vZGUpXG4gICAgICAgICAgICBpID0gY3VycmVudCAmIEhBU19CUkFOQ0hFU19GTEFHID8gZmluZE5hbWVkRW50aXR5VHJlZUJyYW5jaChpLCBjcCkgOiAtMTtcblxuICAgICAgICBlbHNlXG4gICAgICAgICAgICBpID0gY3AgPT09IGN1cnJlbnQgPyArK2kgOiAtMTtcbiAgICB9XG5cblxuICAgIGlmIChyZWZlcmVuY2VkQ29kZVBvaW50cykge1xuICAgICAgICBpZiAoIXNlbWljb2xvblRlcm1pbmF0ZWQpIHtcbiAgICAgICAgICAgIC8vTk9URTogdW5jb25zdW1lIGV4Y2VzcyAoZS5nLiAnaXQnIGluICcmbm90aXQnKVxuICAgICAgICAgICAgdGhpcy5fdW5jb25zdW1lU2V2ZXJhbChjb25zdW1lZENvdW50IC0gcmVmZXJlbmNlU2l6ZSk7XG5cbiAgICAgICAgICAgIC8vTk9URTogSWYgdGhlIGNoYXJhY3RlciByZWZlcmVuY2UgaXMgYmVpbmcgY29uc3VtZWQgYXMgcGFydCBvZiBhbiBhdHRyaWJ1dGUgYW5kIHRoZSBuZXh0IGNoYXJhY3RlclxuICAgICAgICAgICAgLy9pcyBlaXRoZXIgYSBVKzAwM0QgRVFVQUxTIFNJR04gY2hhcmFjdGVyICg9KSBvciBhbiBhbHBoYW51bWVyaWMgQVNDSUkgY2hhcmFjdGVyLCB0aGVuLCBmb3IgaGlzdG9yaWNhbFxuICAgICAgICAgICAgLy9yZWFzb25zLCBhbGwgdGhlIGNoYXJhY3RlcnMgdGhhdCB3ZXJlIG1hdGNoZWQgYWZ0ZXIgdGhlIFUrMDAyNiBBTVBFUlNBTkQgY2hhcmFjdGVyICgmKSBtdXN0IGJlXG4gICAgICAgICAgICAvL3VuY29uc3VtZWQsIGFuZCBub3RoaW5nIGlzIHJldHVybmVkLlxuICAgICAgICAgICAgLy9Ib3dldmVyLCBpZiB0aGlzIG5leHQgY2hhcmFjdGVyIGlzIGluIGZhY3QgYSBVKzAwM0QgRVFVQUxTIFNJR04gY2hhcmFjdGVyICg9KSwgdGhlbiB0aGlzIGlzIGFcbiAgICAgICAgICAgIC8vcGFyc2UgZXJyb3IsIGJlY2F1c2Ugc29tZSBsZWdhY3kgdXNlciBhZ2VudHMgd2lsbCBtaXNpbnRlcnByZXQgdGhlIG1hcmt1cCBpbiB0aG9zZSBjYXNlcy5cbiAgICAgICAgICAgIC8vKHNlZTogaHR0cDovL3d3dy53aGF0d2cub3JnL3NwZWNzL3dlYi1hcHBzL2N1cnJlbnQtd29yay9tdWx0aXBhZ2UvdG9rZW5pemF0aW9uLmh0bWwjdG9rZW5pemluZy1jaGFyYWN0ZXItcmVmZXJlbmNlcylcbiAgICAgICAgICAgIGlmIChpbkF0dHIpIHtcbiAgICAgICAgICAgICAgICB2YXIgbmV4dENwID0gdGhpcy5fbG9va2FoZWFkKCk7XG5cbiAgICAgICAgICAgICAgICBpZiAobmV4dENwID09PSAkLkVRVUFMU19TSUdOIHx8IGlzQXNjaWlBbHBoYU51bWVyaWMobmV4dENwKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl91bmNvbnN1bWVTZXZlcmFsKHJlZmVyZW5jZVNpemUpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVmZXJlbmNlZENvZGVQb2ludHM7XG4gICAgfVxuXG4gICAgdGhpcy5fdW5jb25zdW1lU2V2ZXJhbChjb25zdW1lZENvdW50KTtcblxuICAgIHJldHVybiBudWxsO1xufTtcblxuVG9rZW5pemVyLnByb3RvdHlwZS5fY29uc3VtZUNoYXJhY3RlclJlZmVyZW5jZSA9IGZ1bmN0aW9uIChzdGFydENwLCBpbkF0dHIpIHtcbiAgICBpZiAoaXNXaGl0ZXNwYWNlKHN0YXJ0Q3ApIHx8IHN0YXJ0Q3AgPT09ICQuR1JFQVRFUl9USEFOX1NJR04gfHxcbiAgICAgICAgc3RhcnRDcCA9PT0gJC5BTVBFUlNBTkQgfHwgc3RhcnRDcCA9PT0gdGhpcy5hZGRpdGlvbmFsQWxsb3dlZENwIHx8IHN0YXJ0Q3AgPT09ICQuRU9GKSB7XG4gICAgICAgIC8vTk9URTogbm90IGEgY2hhcmFjdGVyIHJlZmVyZW5jZS4gTm8gY2hhcmFjdGVycyBhcmUgY29uc3VtZWQsIGFuZCBub3RoaW5nIGlzIHJldHVybmVkLlxuICAgICAgICB0aGlzLl91bmNvbnN1bWUoKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgaWYgKHN0YXJ0Q3AgPT09ICQuTlVNQkVSX1NJR04pIHtcbiAgICAgICAgLy9OT1RFOiB3ZSBoYXZlIGEgbnVtZXJpYyBlbnRpdHkgY2FuZGlkYXRlLCBub3cgd2Ugc2hvdWxkIGRldGVybWluZSBpZiBpdCdzIGhleCBvciBkZWNpbWFsXG4gICAgICAgIHZhciBpc0hleCA9IGZhbHNlLFxuICAgICAgICAgICAgbmV4dENwID0gdGhpcy5fbG9va2FoZWFkKCk7XG5cbiAgICAgICAgaWYgKG5leHRDcCA9PT0gJC5MQVRJTl9TTUFMTF9YIHx8IG5leHRDcCA9PT0gJC5MQVRJTl9DQVBJVEFMX1gpIHtcbiAgICAgICAgICAgIHRoaXMuX2NvbnN1bWUoKTtcbiAgICAgICAgICAgIGlzSGV4ID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIG5leHRDcCA9IHRoaXMuX2xvb2thaGVhZCgpO1xuXG4gICAgICAgIC8vTk9URTogaWYgd2UgaGF2ZSBhdCBsZWFzdCBvbmUgZGlnaXQgdGhpcyBpcyBhIG51bWVyaWMgZW50aXR5IGZvciBzdXJlLCBzbyB3ZSBjb25zdW1lIGl0XG4gICAgICAgIGlmIChuZXh0Q3AgIT09ICQuRU9GICYmIGlzRGlnaXQobmV4dENwLCBpc0hleCkpXG4gICAgICAgICAgICByZXR1cm4gW3RoaXMuX2NvbnN1bWVOdW1lcmljRW50aXR5KGlzSGV4KV07XG5cbiAgICAgICAgLy9OT1RFOiBvdGhlcndpc2UgdGhpcyBpcyBhIGJvZ3VzIG51bWJlciBlbnRpdHkgYW5kIGEgcGFyc2UgZXJyb3IuIFVuY29uc3VtZSB0aGUgbnVtYmVyIHNpZ25cbiAgICAgICAgLy9hbmQgdGhlICd4Jy1jaGFyYWN0ZXIgaWYgYXBwcm9wcmlhdGUuXG4gICAgICAgIHRoaXMuX3VuY29uc3VtZVNldmVyYWwoaXNIZXggPyAyIDogMSk7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHRoaXMuX3VuY29uc3VtZSgpO1xuXG4gICAgcmV0dXJuIHRoaXMuX2NvbnN1bWVOYW1lZEVudGl0eShpbkF0dHIpO1xufTtcblxuLy9TdGF0ZSBtYWNoaW5lXG52YXIgXyA9IFRva2VuaXplci5wcm90b3R5cGU7XG5cbi8vMTIuMi40LjEgRGF0YSBzdGF0ZVxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbl9bREFUQV9TVEFURV0gPSBmdW5jdGlvbiBkYXRhU3RhdGUoY3ApIHtcbiAgICB0aGlzLnByZXByb2Nlc3Nvci5kcm9wUGFyc2VkQ2h1bmsoKTtcblxuICAgIGlmIChjcCA9PT0gJC5BTVBFUlNBTkQpXG4gICAgICAgIHRoaXMuc3RhdGUgPSBDSEFSQUNURVJfUkVGRVJFTkNFX0lOX0RBVEFfU1RBVEU7XG5cbiAgICBlbHNlIGlmIChjcCA9PT0gJC5MRVNTX1RIQU5fU0lHTilcbiAgICAgICAgdGhpcy5zdGF0ZSA9IFRBR19PUEVOX1NUQVRFO1xuXG4gICAgZWxzZSBpZiAoY3AgPT09ICQuTlVMTClcbiAgICAgICAgdGhpcy5fZW1pdENvZGVQb2ludChjcCk7XG5cbiAgICBlbHNlIGlmIChjcCA9PT0gJC5FT0YpXG4gICAgICAgIHRoaXMuX2VtaXRFT0ZUb2tlbigpO1xuXG4gICAgZWxzZVxuICAgICAgICB0aGlzLl9lbWl0Q29kZVBvaW50KGNwKTtcbn07XG5cblxuLy8xMi4yLjQuMiBDaGFyYWN0ZXIgcmVmZXJlbmNlIGluIGRhdGEgc3RhdGVcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5fW0NIQVJBQ1RFUl9SRUZFUkVOQ0VfSU5fREFUQV9TVEFURV0gPSBmdW5jdGlvbiBjaGFyYWN0ZXJSZWZlcmVuY2VJbkRhdGFTdGF0ZShjcCkge1xuICAgIHRoaXMuYWRkaXRpb25hbEFsbG93ZWRDcCA9IHZvaWQgMDtcblxuICAgIHZhciByZWZlcmVuY2VkQ29kZVBvaW50cyA9IHRoaXMuX2NvbnN1bWVDaGFyYWN0ZXJSZWZlcmVuY2UoY3AsIGZhbHNlKTtcblxuICAgIGlmICghdGhpcy5fZW5zdXJlSGliZXJuYXRpb24oKSkge1xuICAgICAgICBpZiAocmVmZXJlbmNlZENvZGVQb2ludHMpXG4gICAgICAgICAgICB0aGlzLl9lbWl0U2V2ZXJhbENvZGVQb2ludHMocmVmZXJlbmNlZENvZGVQb2ludHMpO1xuXG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHRoaXMuX2VtaXRDaGFyKCcmJyk7XG5cbiAgICAgICAgdGhpcy5zdGF0ZSA9IERBVEFfU1RBVEU7XG4gICAgfVxufTtcblxuXG4vLzEyLjIuNC4zIFJDREFUQSBzdGF0ZVxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbl9bUkNEQVRBX1NUQVRFXSA9IGZ1bmN0aW9uIHJjZGF0YVN0YXRlKGNwKSB7XG4gICAgdGhpcy5wcmVwcm9jZXNzb3IuZHJvcFBhcnNlZENodW5rKCk7XG5cbiAgICBpZiAoY3AgPT09ICQuQU1QRVJTQU5EKVxuICAgICAgICB0aGlzLnN0YXRlID0gQ0hBUkFDVEVSX1JFRkVSRU5DRV9JTl9SQ0RBVEFfU1RBVEU7XG5cbiAgICBlbHNlIGlmIChjcCA9PT0gJC5MRVNTX1RIQU5fU0lHTilcbiAgICAgICAgdGhpcy5zdGF0ZSA9IFJDREFUQV9MRVNTX1RIQU5fU0lHTl9TVEFURTtcblxuICAgIGVsc2UgaWYgKGNwID09PSAkLk5VTEwpXG4gICAgICAgIHRoaXMuX2VtaXRDaGFyKFVOSUNPREUuUkVQTEFDRU1FTlRfQ0hBUkFDVEVSKTtcblxuICAgIGVsc2UgaWYgKGNwID09PSAkLkVPRilcbiAgICAgICAgdGhpcy5fZW1pdEVPRlRva2VuKCk7XG5cbiAgICBlbHNlXG4gICAgICAgIHRoaXMuX2VtaXRDb2RlUG9pbnQoY3ApO1xufTtcblxuXG4vLzEyLjIuNC40IENoYXJhY3RlciByZWZlcmVuY2UgaW4gUkNEQVRBIHN0YXRlXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuX1tDSEFSQUNURVJfUkVGRVJFTkNFX0lOX1JDREFUQV9TVEFURV0gPSBmdW5jdGlvbiBjaGFyYWN0ZXJSZWZlcmVuY2VJblJjZGF0YVN0YXRlKGNwKSB7XG4gICAgdGhpcy5hZGRpdGlvbmFsQWxsb3dlZENwID0gdm9pZCAwO1xuXG4gICAgdmFyIHJlZmVyZW5jZWRDb2RlUG9pbnRzID0gdGhpcy5fY29uc3VtZUNoYXJhY3RlclJlZmVyZW5jZShjcCwgZmFsc2UpO1xuXG4gICAgaWYgKCF0aGlzLl9lbnN1cmVIaWJlcm5hdGlvbigpKSB7XG4gICAgICAgIGlmIChyZWZlcmVuY2VkQ29kZVBvaW50cylcbiAgICAgICAgICAgIHRoaXMuX2VtaXRTZXZlcmFsQ29kZVBvaW50cyhyZWZlcmVuY2VkQ29kZVBvaW50cyk7XG5cbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgdGhpcy5fZW1pdENoYXIoJyYnKTtcblxuICAgICAgICB0aGlzLnN0YXRlID0gUkNEQVRBX1NUQVRFO1xuICAgIH1cbn07XG5cblxuLy8xMi4yLjQuNSBSQVdURVhUIHN0YXRlXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuX1tSQVdURVhUX1NUQVRFXSA9IGZ1bmN0aW9uIHJhd3RleHRTdGF0ZShjcCkge1xuICAgIHRoaXMucHJlcHJvY2Vzc29yLmRyb3BQYXJzZWRDaHVuaygpO1xuXG4gICAgaWYgKGNwID09PSAkLkxFU1NfVEhBTl9TSUdOKVxuICAgICAgICB0aGlzLnN0YXRlID0gUkFXVEVYVF9MRVNTX1RIQU5fU0lHTl9TVEFURTtcblxuICAgIGVsc2UgaWYgKGNwID09PSAkLk5VTEwpXG4gICAgICAgIHRoaXMuX2VtaXRDaGFyKFVOSUNPREUuUkVQTEFDRU1FTlRfQ0hBUkFDVEVSKTtcblxuICAgIGVsc2UgaWYgKGNwID09PSAkLkVPRilcbiAgICAgICAgdGhpcy5fZW1pdEVPRlRva2VuKCk7XG5cbiAgICBlbHNlXG4gICAgICAgIHRoaXMuX2VtaXRDb2RlUG9pbnQoY3ApO1xufTtcblxuXG4vLzEyLjIuNC42IFNjcmlwdCBkYXRhIHN0YXRlXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuX1tTQ1JJUFRfREFUQV9TVEFURV0gPSBmdW5jdGlvbiBzY3JpcHREYXRhU3RhdGUoY3ApIHtcbiAgICB0aGlzLnByZXByb2Nlc3Nvci5kcm9wUGFyc2VkQ2h1bmsoKTtcblxuICAgIGlmIChjcCA9PT0gJC5MRVNTX1RIQU5fU0lHTilcbiAgICAgICAgdGhpcy5zdGF0ZSA9IFNDUklQVF9EQVRBX0xFU1NfVEhBTl9TSUdOX1NUQVRFO1xuXG4gICAgZWxzZSBpZiAoY3AgPT09ICQuTlVMTClcbiAgICAgICAgdGhpcy5fZW1pdENoYXIoVU5JQ09ERS5SRVBMQUNFTUVOVF9DSEFSQUNURVIpO1xuXG4gICAgZWxzZSBpZiAoY3AgPT09ICQuRU9GKVxuICAgICAgICB0aGlzLl9lbWl0RU9GVG9rZW4oKTtcblxuICAgIGVsc2VcbiAgICAgICAgdGhpcy5fZW1pdENvZGVQb2ludChjcCk7XG59O1xuXG5cbi8vMTIuMi40LjcgUExBSU5URVhUIHN0YXRlXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuX1tQTEFJTlRFWFRfU1RBVEVdID0gZnVuY3Rpb24gcGxhaW50ZXh0U3RhdGUoY3ApIHtcbiAgICB0aGlzLnByZXByb2Nlc3Nvci5kcm9wUGFyc2VkQ2h1bmsoKTtcblxuICAgIGlmIChjcCA9PT0gJC5OVUxMKVxuICAgICAgICB0aGlzLl9lbWl0Q2hhcihVTklDT0RFLlJFUExBQ0VNRU5UX0NIQVJBQ1RFUik7XG5cbiAgICBlbHNlIGlmIChjcCA9PT0gJC5FT0YpXG4gICAgICAgIHRoaXMuX2VtaXRFT0ZUb2tlbigpO1xuXG4gICAgZWxzZVxuICAgICAgICB0aGlzLl9lbWl0Q29kZVBvaW50KGNwKTtcbn07XG5cblxuLy8xMi4yLjQuOCBUYWcgb3BlbiBzdGF0ZVxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbl9bVEFHX09QRU5fU1RBVEVdID0gZnVuY3Rpb24gdGFnT3BlblN0YXRlKGNwKSB7XG4gICAgaWYgKGNwID09PSAkLkVYQ0xBTUFUSU9OX01BUkspXG4gICAgICAgIHRoaXMuc3RhdGUgPSBNQVJLVVBfREVDTEFSQVRJT05fT1BFTl9TVEFURTtcblxuICAgIGVsc2UgaWYgKGNwID09PSAkLlNPTElEVVMpXG4gICAgICAgIHRoaXMuc3RhdGUgPSBFTkRfVEFHX09QRU5fU1RBVEU7XG5cbiAgICBlbHNlIGlmIChpc0FzY2lpTGV0dGVyKGNwKSkge1xuICAgICAgICB0aGlzLl9jcmVhdGVTdGFydFRhZ1Rva2VuKCk7XG4gICAgICAgIHRoaXMuX3JlY29uc3VtZUluU3RhdGUoVEFHX05BTUVfU1RBVEUpO1xuICAgIH1cblxuICAgIGVsc2UgaWYgKGNwID09PSAkLlFVRVNUSU9OX01BUkspXG4gICAgICAgIHRoaXMuX3JlY29uc3VtZUluU3RhdGUoQk9HVVNfQ09NTUVOVF9TVEFURSk7XG5cbiAgICBlbHNlIHtcbiAgICAgICAgdGhpcy5fZW1pdENoYXIoJzwnKTtcbiAgICAgICAgdGhpcy5fcmVjb25zdW1lSW5TdGF0ZShEQVRBX1NUQVRFKTtcbiAgICB9XG59O1xuXG5cbi8vMTIuMi40LjkgRW5kIHRhZyBvcGVuIHN0YXRlXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuX1tFTkRfVEFHX09QRU5fU1RBVEVdID0gZnVuY3Rpb24gZW5kVGFnT3BlblN0YXRlKGNwKSB7XG4gICAgaWYgKGlzQXNjaWlMZXR0ZXIoY3ApKSB7XG4gICAgICAgIHRoaXMuX2NyZWF0ZUVuZFRhZ1Rva2VuKCk7XG4gICAgICAgIHRoaXMuX3JlY29uc3VtZUluU3RhdGUoVEFHX05BTUVfU1RBVEUpO1xuICAgIH1cblxuICAgIGVsc2UgaWYgKGNwID09PSAkLkdSRUFURVJfVEhBTl9TSUdOKVxuICAgICAgICB0aGlzLnN0YXRlID0gREFUQV9TVEFURTtcblxuICAgIGVsc2UgaWYgKGNwID09PSAkLkVPRikge1xuICAgICAgICB0aGlzLl9yZWNvbnN1bWVJblN0YXRlKERBVEFfU1RBVEUpO1xuICAgICAgICB0aGlzLl9lbWl0Q2hhcignPCcpO1xuICAgICAgICB0aGlzLl9lbWl0Q2hhcignLycpO1xuICAgIH1cblxuICAgIGVsc2VcbiAgICAgICAgdGhpcy5fcmVjb25zdW1lSW5TdGF0ZShCT0dVU19DT01NRU5UX1NUQVRFKTtcbn07XG5cblxuLy8xMi4yLjQuMTAgVGFnIG5hbWUgc3RhdGVcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5fW1RBR19OQU1FX1NUQVRFXSA9IGZ1bmN0aW9uIHRhZ05hbWVTdGF0ZShjcCkge1xuICAgIGlmIChpc1doaXRlc3BhY2UoY3ApKVxuICAgICAgICB0aGlzLnN0YXRlID0gQkVGT1JFX0FUVFJJQlVURV9OQU1FX1NUQVRFO1xuXG4gICAgZWxzZSBpZiAoY3AgPT09ICQuU09MSURVUylcbiAgICAgICAgdGhpcy5zdGF0ZSA9IFNFTEZfQ0xPU0lOR19TVEFSVF9UQUdfU1RBVEU7XG5cbiAgICBlbHNlIGlmIChjcCA9PT0gJC5HUkVBVEVSX1RIQU5fU0lHTikge1xuICAgICAgICB0aGlzLnN0YXRlID0gREFUQV9TVEFURTtcbiAgICAgICAgdGhpcy5fZW1pdEN1cnJlbnRUb2tlbigpO1xuICAgIH1cblxuICAgIGVsc2UgaWYgKGlzQXNjaWlVcHBlcihjcCkpXG4gICAgICAgIHRoaXMuY3VycmVudFRva2VuLnRhZ05hbWUgKz0gdG9Bc2NpaUxvd2VyQ2hhcihjcCk7XG5cbiAgICBlbHNlIGlmIChjcCA9PT0gJC5OVUxMKVxuICAgICAgICB0aGlzLmN1cnJlbnRUb2tlbi50YWdOYW1lICs9IFVOSUNPREUuUkVQTEFDRU1FTlRfQ0hBUkFDVEVSO1xuXG4gICAgZWxzZSBpZiAoY3AgPT09ICQuRU9GKVxuICAgICAgICB0aGlzLl9yZWNvbnN1bWVJblN0YXRlKERBVEFfU1RBVEUpO1xuXG4gICAgZWxzZVxuICAgICAgICB0aGlzLmN1cnJlbnRUb2tlbi50YWdOYW1lICs9IHRvQ2hhcihjcCk7XG59O1xuXG5cbi8vMTIuMi40LjExIFJDREFUQSBsZXNzLXRoYW4gc2lnbiBzdGF0ZVxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbl9bUkNEQVRBX0xFU1NfVEhBTl9TSUdOX1NUQVRFXSA9IGZ1bmN0aW9uIHJjZGF0YUxlc3NUaGFuU2lnblN0YXRlKGNwKSB7XG4gICAgaWYgKGNwID09PSAkLlNPTElEVVMpIHtcbiAgICAgICAgdGhpcy50ZW1wQnVmZiA9IFtdO1xuICAgICAgICB0aGlzLnN0YXRlID0gUkNEQVRBX0VORF9UQUdfT1BFTl9TVEFURTtcbiAgICB9XG5cbiAgICBlbHNlIHtcbiAgICAgICAgdGhpcy5fZW1pdENoYXIoJzwnKTtcbiAgICAgICAgdGhpcy5fcmVjb25zdW1lSW5TdGF0ZShSQ0RBVEFfU1RBVEUpO1xuICAgIH1cbn07XG5cblxuLy8xMi4yLjQuMTIgUkNEQVRBIGVuZCB0YWcgb3BlbiBzdGF0ZVxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbl9bUkNEQVRBX0VORF9UQUdfT1BFTl9TVEFURV0gPSBmdW5jdGlvbiByY2RhdGFFbmRUYWdPcGVuU3RhdGUoY3ApIHtcbiAgICBpZiAoaXNBc2NpaUxldHRlcihjcCkpIHtcbiAgICAgICAgdGhpcy5fY3JlYXRlRW5kVGFnVG9rZW4oKTtcbiAgICAgICAgdGhpcy5fcmVjb25zdW1lSW5TdGF0ZShSQ0RBVEFfRU5EX1RBR19OQU1FX1NUQVRFKTtcbiAgICB9XG5cbiAgICBlbHNlIHtcbiAgICAgICAgdGhpcy5fZW1pdENoYXIoJzwnKTtcbiAgICAgICAgdGhpcy5fZW1pdENoYXIoJy8nKTtcbiAgICAgICAgdGhpcy5fcmVjb25zdW1lSW5TdGF0ZShSQ0RBVEFfU1RBVEUpO1xuICAgIH1cbn07XG5cblxuLy8xMi4yLjQuMTMgUkNEQVRBIGVuZCB0YWcgbmFtZSBzdGF0ZVxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbl9bUkNEQVRBX0VORF9UQUdfTkFNRV9TVEFURV0gPSBmdW5jdGlvbiByY2RhdGFFbmRUYWdOYW1lU3RhdGUoY3ApIHtcbiAgICBpZiAoaXNBc2NpaVVwcGVyKGNwKSkge1xuICAgICAgICB0aGlzLmN1cnJlbnRUb2tlbi50YWdOYW1lICs9IHRvQXNjaWlMb3dlckNoYXIoY3ApO1xuICAgICAgICB0aGlzLnRlbXBCdWZmLnB1c2goY3ApO1xuICAgIH1cblxuICAgIGVsc2UgaWYgKGlzQXNjaWlMb3dlcihjcCkpIHtcbiAgICAgICAgdGhpcy5jdXJyZW50VG9rZW4udGFnTmFtZSArPSB0b0NoYXIoY3ApO1xuICAgICAgICB0aGlzLnRlbXBCdWZmLnB1c2goY3ApO1xuICAgIH1cblxuICAgIGVsc2Uge1xuICAgICAgICBpZiAodGhpcy5faXNBcHByb3ByaWF0ZUVuZFRhZ1Rva2VuKCkpIHtcbiAgICAgICAgICAgIGlmIChpc1doaXRlc3BhY2UoY3ApKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IEJFRk9SRV9BVFRSSUJVVEVfTkFNRV9TVEFURTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChjcCA9PT0gJC5TT0xJRFVTKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFNFTEZfQ0xPU0lOR19TVEFSVF9UQUdfU1RBVEU7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoY3AgPT09ICQuR1JFQVRFUl9USEFOX1NJR04pIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gREFUQV9TVEFURTtcbiAgICAgICAgICAgICAgICB0aGlzLl9lbWl0Q3VycmVudFRva2VuKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fZW1pdENoYXIoJzwnKTtcbiAgICAgICAgdGhpcy5fZW1pdENoYXIoJy8nKTtcbiAgICAgICAgdGhpcy5fZW1pdFNldmVyYWxDb2RlUG9pbnRzKHRoaXMudGVtcEJ1ZmYpO1xuICAgICAgICB0aGlzLl9yZWNvbnN1bWVJblN0YXRlKFJDREFUQV9TVEFURSk7XG4gICAgfVxufTtcblxuXG4vLzEyLjIuNC4xNCBSQVdURVhUIGxlc3MtdGhhbiBzaWduIHN0YXRlXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuX1tSQVdURVhUX0xFU1NfVEhBTl9TSUdOX1NUQVRFXSA9IGZ1bmN0aW9uIHJhd3RleHRMZXNzVGhhblNpZ25TdGF0ZShjcCkge1xuICAgIGlmIChjcCA9PT0gJC5TT0xJRFVTKSB7XG4gICAgICAgIHRoaXMudGVtcEJ1ZmYgPSBbXTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IFJBV1RFWFRfRU5EX1RBR19PUEVOX1NUQVRFO1xuICAgIH1cblxuICAgIGVsc2Uge1xuICAgICAgICB0aGlzLl9lbWl0Q2hhcignPCcpO1xuICAgICAgICB0aGlzLl9yZWNvbnN1bWVJblN0YXRlKFJBV1RFWFRfU1RBVEUpO1xuICAgIH1cbn07XG5cblxuLy8xMi4yLjQuMTUgUkFXVEVYVCBlbmQgdGFnIG9wZW4gc3RhdGVcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5fW1JBV1RFWFRfRU5EX1RBR19PUEVOX1NUQVRFXSA9IGZ1bmN0aW9uIHJhd3RleHRFbmRUYWdPcGVuU3RhdGUoY3ApIHtcbiAgICBpZiAoaXNBc2NpaUxldHRlcihjcCkpIHtcbiAgICAgICAgdGhpcy5fY3JlYXRlRW5kVGFnVG9rZW4oKTtcbiAgICAgICAgdGhpcy5fcmVjb25zdW1lSW5TdGF0ZShSQVdURVhUX0VORF9UQUdfTkFNRV9TVEFURSk7XG4gICAgfVxuXG4gICAgZWxzZSB7XG4gICAgICAgIHRoaXMuX2VtaXRDaGFyKCc8Jyk7XG4gICAgICAgIHRoaXMuX2VtaXRDaGFyKCcvJyk7XG4gICAgICAgIHRoaXMuX3JlY29uc3VtZUluU3RhdGUoUkFXVEVYVF9TVEFURSk7XG4gICAgfVxufTtcblxuXG4vLzEyLjIuNC4xNiBSQVdURVhUIGVuZCB0YWcgbmFtZSBzdGF0ZVxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbl9bUkFXVEVYVF9FTkRfVEFHX05BTUVfU1RBVEVdID0gZnVuY3Rpb24gcmF3dGV4dEVuZFRhZ05hbWVTdGF0ZShjcCkge1xuICAgIGlmIChpc0FzY2lpVXBwZXIoY3ApKSB7XG4gICAgICAgIHRoaXMuY3VycmVudFRva2VuLnRhZ05hbWUgKz0gdG9Bc2NpaUxvd2VyQ2hhcihjcCk7XG4gICAgICAgIHRoaXMudGVtcEJ1ZmYucHVzaChjcCk7XG4gICAgfVxuXG4gICAgZWxzZSBpZiAoaXNBc2NpaUxvd2VyKGNwKSkge1xuICAgICAgICB0aGlzLmN1cnJlbnRUb2tlbi50YWdOYW1lICs9IHRvQ2hhcihjcCk7XG4gICAgICAgIHRoaXMudGVtcEJ1ZmYucHVzaChjcCk7XG4gICAgfVxuXG4gICAgZWxzZSB7XG4gICAgICAgIGlmICh0aGlzLl9pc0FwcHJvcHJpYXRlRW5kVGFnVG9rZW4oKSkge1xuICAgICAgICAgICAgaWYgKGlzV2hpdGVzcGFjZShjcCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gQkVGT1JFX0FUVFJJQlVURV9OQU1FX1NUQVRFO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGNwID09PSAkLlNPTElEVVMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gU0VMRl9DTE9TSU5HX1NUQVJUX1RBR19TVEFURTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChjcCA9PT0gJC5HUkVBVEVSX1RIQU5fU0lHTikge1xuICAgICAgICAgICAgICAgIHRoaXMuX2VtaXRDdXJyZW50VG9rZW4oKTtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gREFUQV9TVEFURTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9lbWl0Q2hhcignPCcpO1xuICAgICAgICB0aGlzLl9lbWl0Q2hhcignLycpO1xuICAgICAgICB0aGlzLl9lbWl0U2V2ZXJhbENvZGVQb2ludHModGhpcy50ZW1wQnVmZik7XG4gICAgICAgIHRoaXMuX3JlY29uc3VtZUluU3RhdGUoUkFXVEVYVF9TVEFURSk7XG4gICAgfVxufTtcblxuXG4vLzEyLjIuNC4xNyBTY3JpcHQgZGF0YSBsZXNzLXRoYW4gc2lnbiBzdGF0ZVxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbl9bU0NSSVBUX0RBVEFfTEVTU19USEFOX1NJR05fU1RBVEVdID0gZnVuY3Rpb24gc2NyaXB0RGF0YUxlc3NUaGFuU2lnblN0YXRlKGNwKSB7XG4gICAgaWYgKGNwID09PSAkLlNPTElEVVMpIHtcbiAgICAgICAgdGhpcy50ZW1wQnVmZiA9IFtdO1xuICAgICAgICB0aGlzLnN0YXRlID0gU0NSSVBUX0RBVEFfRU5EX1RBR19PUEVOX1NUQVRFO1xuICAgIH1cblxuICAgIGVsc2UgaWYgKGNwID09PSAkLkVYQ0xBTUFUSU9OX01BUkspIHtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IFNDUklQVF9EQVRBX0VTQ0FQRV9TVEFSVF9TVEFURTtcbiAgICAgICAgdGhpcy5fZW1pdENoYXIoJzwnKTtcbiAgICAgICAgdGhpcy5fZW1pdENoYXIoJyEnKTtcbiAgICB9XG5cbiAgICBlbHNlIHtcbiAgICAgICAgdGhpcy5fZW1pdENoYXIoJzwnKTtcbiAgICAgICAgdGhpcy5fcmVjb25zdW1lSW5TdGF0ZShTQ1JJUFRfREFUQV9TVEFURSk7XG4gICAgfVxufTtcblxuXG4vLzEyLjIuNC4xOCBTY3JpcHQgZGF0YSBlbmQgdGFnIG9wZW4gc3RhdGVcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5fW1NDUklQVF9EQVRBX0VORF9UQUdfT1BFTl9TVEFURV0gPSBmdW5jdGlvbiBzY3JpcHREYXRhRW5kVGFnT3BlblN0YXRlKGNwKSB7XG4gICAgaWYgKGlzQXNjaWlMZXR0ZXIoY3ApKSB7XG4gICAgICAgIHRoaXMuX2NyZWF0ZUVuZFRhZ1Rva2VuKCk7XG4gICAgICAgIHRoaXMuX3JlY29uc3VtZUluU3RhdGUoU0NSSVBUX0RBVEFfRU5EX1RBR19OQU1FX1NUQVRFKTtcbiAgICB9XG5cbiAgICBlbHNlIHtcbiAgICAgICAgdGhpcy5fZW1pdENoYXIoJzwnKTtcbiAgICAgICAgdGhpcy5fZW1pdENoYXIoJy8nKTtcbiAgICAgICAgdGhpcy5fcmVjb25zdW1lSW5TdGF0ZShTQ1JJUFRfREFUQV9TVEFURSk7XG4gICAgfVxufTtcblxuXG4vLzEyLjIuNC4xOSBTY3JpcHQgZGF0YSBlbmQgdGFnIG5hbWUgc3RhdGVcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5fW1NDUklQVF9EQVRBX0VORF9UQUdfTkFNRV9TVEFURV0gPSBmdW5jdGlvbiBzY3JpcHREYXRhRW5kVGFnTmFtZVN0YXRlKGNwKSB7XG4gICAgaWYgKGlzQXNjaWlVcHBlcihjcCkpIHtcbiAgICAgICAgdGhpcy5jdXJyZW50VG9rZW4udGFnTmFtZSArPSB0b0FzY2lpTG93ZXJDaGFyKGNwKTtcbiAgICAgICAgdGhpcy50ZW1wQnVmZi5wdXNoKGNwKTtcbiAgICB9XG5cbiAgICBlbHNlIGlmIChpc0FzY2lpTG93ZXIoY3ApKSB7XG4gICAgICAgIHRoaXMuY3VycmVudFRva2VuLnRhZ05hbWUgKz0gdG9DaGFyKGNwKTtcbiAgICAgICAgdGhpcy50ZW1wQnVmZi5wdXNoKGNwKTtcbiAgICB9XG5cbiAgICBlbHNlIHtcbiAgICAgICAgaWYgKHRoaXMuX2lzQXBwcm9wcmlhdGVFbmRUYWdUb2tlbigpKSB7XG4gICAgICAgICAgICBpZiAoaXNXaGl0ZXNwYWNlKGNwKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBCRUZPUkVfQVRUUklCVVRFX05BTUVfU1RBVEU7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBlbHNlIGlmIChjcCA9PT0gJC5TT0xJRFVTKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFNFTEZfQ0xPU0lOR19TVEFSVF9UQUdfU1RBVEU7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBlbHNlIGlmIChjcCA9PT0gJC5HUkVBVEVSX1RIQU5fU0lHTikge1xuICAgICAgICAgICAgICAgIHRoaXMuX2VtaXRDdXJyZW50VG9rZW4oKTtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gREFUQV9TVEFURTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9lbWl0Q2hhcignPCcpO1xuICAgICAgICB0aGlzLl9lbWl0Q2hhcignLycpO1xuICAgICAgICB0aGlzLl9lbWl0U2V2ZXJhbENvZGVQb2ludHModGhpcy50ZW1wQnVmZik7XG4gICAgICAgIHRoaXMuX3JlY29uc3VtZUluU3RhdGUoU0NSSVBUX0RBVEFfU1RBVEUpO1xuICAgIH1cbn07XG5cblxuLy8xMi4yLjQuMjAgU2NyaXB0IGRhdGEgZXNjYXBlIHN0YXJ0IHN0YXRlXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuX1tTQ1JJUFRfREFUQV9FU0NBUEVfU1RBUlRfU1RBVEVdID0gZnVuY3Rpb24gc2NyaXB0RGF0YUVzY2FwZVN0YXJ0U3RhdGUoY3ApIHtcbiAgICBpZiAoY3AgPT09ICQuSFlQSEVOX01JTlVTKSB7XG4gICAgICAgIHRoaXMuc3RhdGUgPSBTQ1JJUFRfREFUQV9FU0NBUEVfU1RBUlRfREFTSF9TVEFURTtcbiAgICAgICAgdGhpcy5fZW1pdENoYXIoJy0nKTtcbiAgICB9XG5cbiAgICBlbHNlXG4gICAgICAgIHRoaXMuX3JlY29uc3VtZUluU3RhdGUoU0NSSVBUX0RBVEFfU1RBVEUpO1xufTtcblxuXG4vLzEyLjIuNC4yMSBTY3JpcHQgZGF0YSBlc2NhcGUgc3RhcnQgZGFzaCBzdGF0ZVxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbl9bU0NSSVBUX0RBVEFfRVNDQVBFX1NUQVJUX0RBU0hfU1RBVEVdID0gZnVuY3Rpb24gc2NyaXB0RGF0YUVzY2FwZVN0YXJ0RGFzaFN0YXRlKGNwKSB7XG4gICAgaWYgKGNwID09PSAkLkhZUEhFTl9NSU5VUykge1xuICAgICAgICB0aGlzLnN0YXRlID0gU0NSSVBUX0RBVEFfRVNDQVBFRF9EQVNIX0RBU0hfU1RBVEU7XG4gICAgICAgIHRoaXMuX2VtaXRDaGFyKCctJyk7XG4gICAgfVxuXG4gICAgZWxzZVxuICAgICAgICB0aGlzLl9yZWNvbnN1bWVJblN0YXRlKFNDUklQVF9EQVRBX1NUQVRFKTtcbn07XG5cblxuLy8xMi4yLjQuMjIgU2NyaXB0IGRhdGEgZXNjYXBlZCBzdGF0ZVxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbl9bU0NSSVBUX0RBVEFfRVNDQVBFRF9TVEFURV0gPSBmdW5jdGlvbiBzY3JpcHREYXRhRXNjYXBlZFN0YXRlKGNwKSB7XG4gICAgaWYgKGNwID09PSAkLkhZUEhFTl9NSU5VUykge1xuICAgICAgICB0aGlzLnN0YXRlID0gU0NSSVBUX0RBVEFfRVNDQVBFRF9EQVNIX1NUQVRFO1xuICAgICAgICB0aGlzLl9lbWl0Q2hhcignLScpO1xuICAgIH1cblxuICAgIGVsc2UgaWYgKGNwID09PSAkLkxFU1NfVEhBTl9TSUdOKVxuICAgICAgICB0aGlzLnN0YXRlID0gU0NSSVBUX0RBVEFfRVNDQVBFRF9MRVNTX1RIQU5fU0lHTl9TVEFURTtcblxuICAgIGVsc2UgaWYgKGNwID09PSAkLk5VTEwpXG4gICAgICAgIHRoaXMuX2VtaXRDaGFyKFVOSUNPREUuUkVQTEFDRU1FTlRfQ0hBUkFDVEVSKTtcblxuICAgIGVsc2UgaWYgKGNwID09PSAkLkVPRilcbiAgICAgICAgdGhpcy5fcmVjb25zdW1lSW5TdGF0ZShEQVRBX1NUQVRFKTtcblxuICAgIGVsc2VcbiAgICAgICAgdGhpcy5fZW1pdENvZGVQb2ludChjcCk7XG59O1xuXG5cbi8vMTIuMi40LjIzIFNjcmlwdCBkYXRhIGVzY2FwZWQgZGFzaCBzdGF0ZVxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbl9bU0NSSVBUX0RBVEFfRVNDQVBFRF9EQVNIX1NUQVRFXSA9IGZ1bmN0aW9uIHNjcmlwdERhdGFFc2NhcGVkRGFzaFN0YXRlKGNwKSB7XG4gICAgaWYgKGNwID09PSAkLkhZUEhFTl9NSU5VUykge1xuICAgICAgICB0aGlzLnN0YXRlID0gU0NSSVBUX0RBVEFfRVNDQVBFRF9EQVNIX0RBU0hfU1RBVEU7XG4gICAgICAgIHRoaXMuX2VtaXRDaGFyKCctJyk7XG4gICAgfVxuXG4gICAgZWxzZSBpZiAoY3AgPT09ICQuTEVTU19USEFOX1NJR04pXG4gICAgICAgIHRoaXMuc3RhdGUgPSBTQ1JJUFRfREFUQV9FU0NBUEVEX0xFU1NfVEhBTl9TSUdOX1NUQVRFO1xuXG4gICAgZWxzZSBpZiAoY3AgPT09ICQuTlVMTCkge1xuICAgICAgICB0aGlzLnN0YXRlID0gU0NSSVBUX0RBVEFfRVNDQVBFRF9TVEFURTtcbiAgICAgICAgdGhpcy5fZW1pdENoYXIoVU5JQ09ERS5SRVBMQUNFTUVOVF9DSEFSQUNURVIpO1xuICAgIH1cblxuICAgIGVsc2UgaWYgKGNwID09PSAkLkVPRilcbiAgICAgICAgdGhpcy5fcmVjb25zdW1lSW5TdGF0ZShEQVRBX1NUQVRFKTtcblxuICAgIGVsc2Uge1xuICAgICAgICB0aGlzLnN0YXRlID0gU0NSSVBUX0RBVEFfRVNDQVBFRF9TVEFURTtcbiAgICAgICAgdGhpcy5fZW1pdENvZGVQb2ludChjcCk7XG4gICAgfVxufTtcblxuXG4vLzEyLjIuNC4yNCBTY3JpcHQgZGF0YSBlc2NhcGVkIGRhc2ggZGFzaCBzdGF0ZVxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbl9bU0NSSVBUX0RBVEFfRVNDQVBFRF9EQVNIX0RBU0hfU1RBVEVdID0gZnVuY3Rpb24gc2NyaXB0RGF0YUVzY2FwZWREYXNoRGFzaFN0YXRlKGNwKSB7XG4gICAgaWYgKGNwID09PSAkLkhZUEhFTl9NSU5VUylcbiAgICAgICAgdGhpcy5fZW1pdENoYXIoJy0nKTtcblxuICAgIGVsc2UgaWYgKGNwID09PSAkLkxFU1NfVEhBTl9TSUdOKVxuICAgICAgICB0aGlzLnN0YXRlID0gU0NSSVBUX0RBVEFfRVNDQVBFRF9MRVNTX1RIQU5fU0lHTl9TVEFURTtcblxuICAgIGVsc2UgaWYgKGNwID09PSAkLkdSRUFURVJfVEhBTl9TSUdOKSB7XG4gICAgICAgIHRoaXMuc3RhdGUgPSBTQ1JJUFRfREFUQV9TVEFURTtcbiAgICAgICAgdGhpcy5fZW1pdENoYXIoJz4nKTtcbiAgICB9XG5cbiAgICBlbHNlIGlmIChjcCA9PT0gJC5OVUxMKSB7XG4gICAgICAgIHRoaXMuc3RhdGUgPSBTQ1JJUFRfREFUQV9FU0NBUEVEX1NUQVRFO1xuICAgICAgICB0aGlzLl9lbWl0Q2hhcihVTklDT0RFLlJFUExBQ0VNRU5UX0NIQVJBQ1RFUik7XG4gICAgfVxuXG4gICAgZWxzZSBpZiAoY3AgPT09ICQuRU9GKVxuICAgICAgICB0aGlzLl9yZWNvbnN1bWVJblN0YXRlKERBVEFfU1RBVEUpO1xuXG4gICAgZWxzZSB7XG4gICAgICAgIHRoaXMuc3RhdGUgPSBTQ1JJUFRfREFUQV9FU0NBUEVEX1NUQVRFO1xuICAgICAgICB0aGlzLl9lbWl0Q29kZVBvaW50KGNwKTtcbiAgICB9XG59O1xuXG5cbi8vMTIuMi40LjI1IFNjcmlwdCBkYXRhIGVzY2FwZWQgbGVzcy10aGFuIHNpZ24gc3RhdGVcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5fW1NDUklQVF9EQVRBX0VTQ0FQRURfTEVTU19USEFOX1NJR05fU1RBVEVdID0gZnVuY3Rpb24gc2NyaXB0RGF0YUVzY2FwZWRMZXNzVGhhblNpZ25TdGF0ZShjcCkge1xuICAgIGlmIChjcCA9PT0gJC5TT0xJRFVTKSB7XG4gICAgICAgIHRoaXMudGVtcEJ1ZmYgPSBbXTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IFNDUklQVF9EQVRBX0VTQ0FQRURfRU5EX1RBR19PUEVOX1NUQVRFO1xuICAgIH1cblxuICAgIGVsc2UgaWYgKGlzQXNjaWlMZXR0ZXIoY3ApKSB7XG4gICAgICAgIHRoaXMudGVtcEJ1ZmYgPSBbXTtcbiAgICAgICAgdGhpcy5fZW1pdENoYXIoJzwnKTtcbiAgICAgICAgdGhpcy5fcmVjb25zdW1lSW5TdGF0ZShTQ1JJUFRfREFUQV9ET1VCTEVfRVNDQVBFX1NUQVJUX1NUQVRFKTtcbiAgICB9XG5cbiAgICBlbHNlIHtcbiAgICAgICAgdGhpcy5fZW1pdENoYXIoJzwnKTtcbiAgICAgICAgdGhpcy5fcmVjb25zdW1lSW5TdGF0ZShTQ1JJUFRfREFUQV9FU0NBUEVEX1NUQVRFKTtcbiAgICB9XG59O1xuXG5cbi8vMTIuMi40LjI2IFNjcmlwdCBkYXRhIGVzY2FwZWQgZW5kIHRhZyBvcGVuIHN0YXRlXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuX1tTQ1JJUFRfREFUQV9FU0NBUEVEX0VORF9UQUdfT1BFTl9TVEFURV0gPSBmdW5jdGlvbiBzY3JpcHREYXRhRXNjYXBlZEVuZFRhZ09wZW5TdGF0ZShjcCkge1xuICAgIGlmIChpc0FzY2lpTGV0dGVyKGNwKSkge1xuICAgICAgICB0aGlzLl9jcmVhdGVFbmRUYWdUb2tlbigpO1xuICAgICAgICB0aGlzLl9yZWNvbnN1bWVJblN0YXRlKFNDUklQVF9EQVRBX0VTQ0FQRURfRU5EX1RBR19OQU1FX1NUQVRFKTtcbiAgICB9XG5cbiAgICBlbHNlIHtcbiAgICAgICAgdGhpcy5fZW1pdENoYXIoJzwnKTtcbiAgICAgICAgdGhpcy5fZW1pdENoYXIoJy8nKTtcbiAgICAgICAgdGhpcy5fcmVjb25zdW1lSW5TdGF0ZShTQ1JJUFRfREFUQV9FU0NBUEVEX1NUQVRFKTtcbiAgICB9XG59O1xuXG5cbi8vMTIuMi40LjI3IFNjcmlwdCBkYXRhIGVzY2FwZWQgZW5kIHRhZyBuYW1lIHN0YXRlXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuX1tTQ1JJUFRfREFUQV9FU0NBUEVEX0VORF9UQUdfTkFNRV9TVEFURV0gPSBmdW5jdGlvbiBzY3JpcHREYXRhRXNjYXBlZEVuZFRhZ05hbWVTdGF0ZShjcCkge1xuICAgIGlmIChpc0FzY2lpVXBwZXIoY3ApKSB7XG4gICAgICAgIHRoaXMuY3VycmVudFRva2VuLnRhZ05hbWUgKz0gdG9Bc2NpaUxvd2VyQ2hhcihjcCk7XG4gICAgICAgIHRoaXMudGVtcEJ1ZmYucHVzaChjcCk7XG4gICAgfVxuXG4gICAgZWxzZSBpZiAoaXNBc2NpaUxvd2VyKGNwKSkge1xuICAgICAgICB0aGlzLmN1cnJlbnRUb2tlbi50YWdOYW1lICs9IHRvQ2hhcihjcCk7XG4gICAgICAgIHRoaXMudGVtcEJ1ZmYucHVzaChjcCk7XG4gICAgfVxuXG4gICAgZWxzZSB7XG4gICAgICAgIGlmICh0aGlzLl9pc0FwcHJvcHJpYXRlRW5kVGFnVG9rZW4oKSkge1xuICAgICAgICAgICAgaWYgKGlzV2hpdGVzcGFjZShjcCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gQkVGT1JFX0FUVFJJQlVURV9OQU1FX1NUQVRFO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGNwID09PSAkLlNPTElEVVMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gU0VMRl9DTE9TSU5HX1NUQVJUX1RBR19TVEFURTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChjcCA9PT0gJC5HUkVBVEVSX1RIQU5fU0lHTikge1xuICAgICAgICAgICAgICAgIHRoaXMuX2VtaXRDdXJyZW50VG9rZW4oKTtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gREFUQV9TVEFURTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9lbWl0Q2hhcignPCcpO1xuICAgICAgICB0aGlzLl9lbWl0Q2hhcignLycpO1xuICAgICAgICB0aGlzLl9lbWl0U2V2ZXJhbENvZGVQb2ludHModGhpcy50ZW1wQnVmZik7XG4gICAgICAgIHRoaXMuX3JlY29uc3VtZUluU3RhdGUoU0NSSVBUX0RBVEFfRVNDQVBFRF9TVEFURSk7XG4gICAgfVxufTtcblxuXG4vLzEyLjIuNC4yOCBTY3JpcHQgZGF0YSBkb3VibGUgZXNjYXBlIHN0YXJ0IHN0YXRlXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuX1tTQ1JJUFRfREFUQV9ET1VCTEVfRVNDQVBFX1NUQVJUX1NUQVRFXSA9IGZ1bmN0aW9uIHNjcmlwdERhdGFEb3VibGVFc2NhcGVTdGFydFN0YXRlKGNwKSB7XG4gICAgaWYgKGlzV2hpdGVzcGFjZShjcCkgfHwgY3AgPT09ICQuU09MSURVUyB8fCBjcCA9PT0gJC5HUkVBVEVSX1RIQU5fU0lHTikge1xuICAgICAgICB0aGlzLnN0YXRlID0gdGhpcy5pc1RlbXBCdWZmZXJFcXVhbFRvU2NyaXB0U3RyaW5nKCkgPyBTQ1JJUFRfREFUQV9ET1VCTEVfRVNDQVBFRF9TVEFURSA6IFNDUklQVF9EQVRBX0VTQ0FQRURfU1RBVEU7XG4gICAgICAgIHRoaXMuX2VtaXRDb2RlUG9pbnQoY3ApO1xuICAgIH1cblxuICAgIGVsc2UgaWYgKGlzQXNjaWlVcHBlcihjcCkpIHtcbiAgICAgICAgdGhpcy50ZW1wQnVmZi5wdXNoKHRvQXNjaWlMb3dlckNvZGVQb2ludChjcCkpO1xuICAgICAgICB0aGlzLl9lbWl0Q29kZVBvaW50KGNwKTtcbiAgICB9XG5cbiAgICBlbHNlIGlmIChpc0FzY2lpTG93ZXIoY3ApKSB7XG4gICAgICAgIHRoaXMudGVtcEJ1ZmYucHVzaChjcCk7XG4gICAgICAgIHRoaXMuX2VtaXRDb2RlUG9pbnQoY3ApO1xuICAgIH1cblxuICAgIGVsc2VcbiAgICAgICAgdGhpcy5fcmVjb25zdW1lSW5TdGF0ZShTQ1JJUFRfREFUQV9FU0NBUEVEX1NUQVRFKTtcbn07XG5cblxuLy8xMi4yLjQuMjkgU2NyaXB0IGRhdGEgZG91YmxlIGVzY2FwZWQgc3RhdGVcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5fW1NDUklQVF9EQVRBX0RPVUJMRV9FU0NBUEVEX1NUQVRFXSA9IGZ1bmN0aW9uIHNjcmlwdERhdGFEb3VibGVFc2NhcGVkU3RhdGUoY3ApIHtcbiAgICBpZiAoY3AgPT09ICQuSFlQSEVOX01JTlVTKSB7XG4gICAgICAgIHRoaXMuc3RhdGUgPSBTQ1JJUFRfREFUQV9ET1VCTEVfRVNDQVBFRF9EQVNIX1NUQVRFO1xuICAgICAgICB0aGlzLl9lbWl0Q2hhcignLScpO1xuICAgIH1cblxuICAgIGVsc2UgaWYgKGNwID09PSAkLkxFU1NfVEhBTl9TSUdOKSB7XG4gICAgICAgIHRoaXMuc3RhdGUgPSBTQ1JJUFRfREFUQV9ET1VCTEVfRVNDQVBFRF9MRVNTX1RIQU5fU0lHTl9TVEFURTtcbiAgICAgICAgdGhpcy5fZW1pdENoYXIoJzwnKTtcbiAgICB9XG5cbiAgICBlbHNlIGlmIChjcCA9PT0gJC5OVUxMKVxuICAgICAgICB0aGlzLl9lbWl0Q2hhcihVTklDT0RFLlJFUExBQ0VNRU5UX0NIQVJBQ1RFUik7XG5cbiAgICBlbHNlIGlmIChjcCA9PT0gJC5FT0YpXG4gICAgICAgIHRoaXMuX3JlY29uc3VtZUluU3RhdGUoREFUQV9TVEFURSk7XG5cbiAgICBlbHNlXG4gICAgICAgIHRoaXMuX2VtaXRDb2RlUG9pbnQoY3ApO1xufTtcblxuXG4vLzEyLjIuNC4zMCBTY3JpcHQgZGF0YSBkb3VibGUgZXNjYXBlZCBkYXNoIHN0YXRlXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuX1tTQ1JJUFRfREFUQV9ET1VCTEVfRVNDQVBFRF9EQVNIX1NUQVRFXSA9IGZ1bmN0aW9uIHNjcmlwdERhdGFEb3VibGVFc2NhcGVkRGFzaFN0YXRlKGNwKSB7XG4gICAgaWYgKGNwID09PSAkLkhZUEhFTl9NSU5VUykge1xuICAgICAgICB0aGlzLnN0YXRlID0gU0NSSVBUX0RBVEFfRE9VQkxFX0VTQ0FQRURfREFTSF9EQVNIX1NUQVRFO1xuICAgICAgICB0aGlzLl9lbWl0Q2hhcignLScpO1xuICAgIH1cblxuICAgIGVsc2UgaWYgKGNwID09PSAkLkxFU1NfVEhBTl9TSUdOKSB7XG4gICAgICAgIHRoaXMuc3RhdGUgPSBTQ1JJUFRfREFUQV9ET1VCTEVfRVNDQVBFRF9MRVNTX1RIQU5fU0lHTl9TVEFURTtcbiAgICAgICAgdGhpcy5fZW1pdENoYXIoJzwnKTtcbiAgICB9XG5cbiAgICBlbHNlIGlmIChjcCA9PT0gJC5OVUxMKSB7XG4gICAgICAgIHRoaXMuc3RhdGUgPSBTQ1JJUFRfREFUQV9ET1VCTEVfRVNDQVBFRF9TVEFURTtcbiAgICAgICAgdGhpcy5fZW1pdENoYXIoVU5JQ09ERS5SRVBMQUNFTUVOVF9DSEFSQUNURVIpO1xuICAgIH1cblxuICAgIGVsc2UgaWYgKGNwID09PSAkLkVPRilcbiAgICAgICAgdGhpcy5fcmVjb25zdW1lSW5TdGF0ZShEQVRBX1NUQVRFKTtcblxuICAgIGVsc2Uge1xuICAgICAgICB0aGlzLnN0YXRlID0gU0NSSVBUX0RBVEFfRE9VQkxFX0VTQ0FQRURfU1RBVEU7XG4gICAgICAgIHRoaXMuX2VtaXRDb2RlUG9pbnQoY3ApO1xuICAgIH1cbn07XG5cblxuLy8xMi4yLjQuMzEgU2NyaXB0IGRhdGEgZG91YmxlIGVzY2FwZWQgZGFzaCBkYXNoIHN0YXRlXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuX1tTQ1JJUFRfREFUQV9ET1VCTEVfRVNDQVBFRF9EQVNIX0RBU0hfU1RBVEVdID0gZnVuY3Rpb24gc2NyaXB0RGF0YURvdWJsZUVzY2FwZWREYXNoRGFzaFN0YXRlKGNwKSB7XG4gICAgaWYgKGNwID09PSAkLkhZUEhFTl9NSU5VUylcbiAgICAgICAgdGhpcy5fZW1pdENoYXIoJy0nKTtcblxuICAgIGVsc2UgaWYgKGNwID09PSAkLkxFU1NfVEhBTl9TSUdOKSB7XG4gICAgICAgIHRoaXMuc3RhdGUgPSBTQ1JJUFRfREFUQV9ET1VCTEVfRVNDQVBFRF9MRVNTX1RIQU5fU0lHTl9TVEFURTtcbiAgICAgICAgdGhpcy5fZW1pdENoYXIoJzwnKTtcbiAgICB9XG5cbiAgICBlbHNlIGlmIChjcCA9PT0gJC5HUkVBVEVSX1RIQU5fU0lHTikge1xuICAgICAgICB0aGlzLnN0YXRlID0gU0NSSVBUX0RBVEFfU1RBVEU7XG4gICAgICAgIHRoaXMuX2VtaXRDaGFyKCc+Jyk7XG4gICAgfVxuXG4gICAgZWxzZSBpZiAoY3AgPT09ICQuTlVMTCkge1xuICAgICAgICB0aGlzLnN0YXRlID0gU0NSSVBUX0RBVEFfRE9VQkxFX0VTQ0FQRURfU1RBVEU7XG4gICAgICAgIHRoaXMuX2VtaXRDaGFyKFVOSUNPREUuUkVQTEFDRU1FTlRfQ0hBUkFDVEVSKTtcbiAgICB9XG5cbiAgICBlbHNlIGlmIChjcCA9PT0gJC5FT0YpXG4gICAgICAgIHRoaXMuX3JlY29uc3VtZUluU3RhdGUoREFUQV9TVEFURSk7XG5cbiAgICBlbHNlIHtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IFNDUklQVF9EQVRBX0RPVUJMRV9FU0NBUEVEX1NUQVRFO1xuICAgICAgICB0aGlzLl9lbWl0Q29kZVBvaW50KGNwKTtcbiAgICB9XG59O1xuXG5cbi8vMTIuMi40LjMyIFNjcmlwdCBkYXRhIGRvdWJsZSBlc2NhcGVkIGxlc3MtdGhhbiBzaWduIHN0YXRlXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuX1tTQ1JJUFRfREFUQV9ET1VCTEVfRVNDQVBFRF9MRVNTX1RIQU5fU0lHTl9TVEFURV0gPSBmdW5jdGlvbiBzY3JpcHREYXRhRG91YmxlRXNjYXBlZExlc3NUaGFuU2lnblN0YXRlKGNwKSB7XG4gICAgaWYgKGNwID09PSAkLlNPTElEVVMpIHtcbiAgICAgICAgdGhpcy50ZW1wQnVmZiA9IFtdO1xuICAgICAgICB0aGlzLnN0YXRlID0gU0NSSVBUX0RBVEFfRE9VQkxFX0VTQ0FQRV9FTkRfU1RBVEU7XG4gICAgICAgIHRoaXMuX2VtaXRDaGFyKCcvJyk7XG4gICAgfVxuXG4gICAgZWxzZVxuICAgICAgICB0aGlzLl9yZWNvbnN1bWVJblN0YXRlKFNDUklQVF9EQVRBX0RPVUJMRV9FU0NBUEVEX1NUQVRFKTtcbn07XG5cblxuLy8xMi4yLjQuMzMgU2NyaXB0IGRhdGEgZG91YmxlIGVzY2FwZSBlbmQgc3RhdGVcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5fW1NDUklQVF9EQVRBX0RPVUJMRV9FU0NBUEVfRU5EX1NUQVRFXSA9IGZ1bmN0aW9uIHNjcmlwdERhdGFEb3VibGVFc2NhcGVFbmRTdGF0ZShjcCkge1xuICAgIGlmIChpc1doaXRlc3BhY2UoY3ApIHx8IGNwID09PSAkLlNPTElEVVMgfHwgY3AgPT09ICQuR1JFQVRFUl9USEFOX1NJR04pIHtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHRoaXMuaXNUZW1wQnVmZmVyRXF1YWxUb1NjcmlwdFN0cmluZygpID8gU0NSSVBUX0RBVEFfRVNDQVBFRF9TVEFURSA6IFNDUklQVF9EQVRBX0RPVUJMRV9FU0NBUEVEX1NUQVRFO1xuXG4gICAgICAgIHRoaXMuX2VtaXRDb2RlUG9pbnQoY3ApO1xuICAgIH1cblxuICAgIGVsc2UgaWYgKGlzQXNjaWlVcHBlcihjcCkpIHtcbiAgICAgICAgdGhpcy50ZW1wQnVmZi5wdXNoKHRvQXNjaWlMb3dlckNvZGVQb2ludChjcCkpO1xuICAgICAgICB0aGlzLl9lbWl0Q29kZVBvaW50KGNwKTtcbiAgICB9XG5cbiAgICBlbHNlIGlmIChpc0FzY2lpTG93ZXIoY3ApKSB7XG4gICAgICAgIHRoaXMudGVtcEJ1ZmYucHVzaChjcCk7XG4gICAgICAgIHRoaXMuX2VtaXRDb2RlUG9pbnQoY3ApO1xuICAgIH1cblxuICAgIGVsc2VcbiAgICAgICAgdGhpcy5fcmVjb25zdW1lSW5TdGF0ZShTQ1JJUFRfREFUQV9ET1VCTEVfRVNDQVBFRF9TVEFURSk7XG59O1xuXG5cbi8vMTIuMi40LjM0IEJlZm9yZSBhdHRyaWJ1dGUgbmFtZSBzdGF0ZVxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbl9bQkVGT1JFX0FUVFJJQlVURV9OQU1FX1NUQVRFXSA9IGZ1bmN0aW9uIGJlZm9yZUF0dHJpYnV0ZU5hbWVTdGF0ZShjcCkge1xuICAgIGlmIChpc1doaXRlc3BhY2UoY3ApKVxuICAgICAgICByZXR1cm47XG5cbiAgICBpZiAoY3AgPT09ICQuU09MSURVUyB8fCBjcCA9PT0gJC5HUkVBVEVSX1RIQU5fU0lHTiB8fCBjcCA9PT0gJC5FT0YpXG4gICAgICAgIHRoaXMuX3JlY29uc3VtZUluU3RhdGUoQUZURVJfQVRUUklCVVRFX05BTUVfU1RBVEUpO1xuXG4gICAgZWxzZSBpZiAoY3AgPT09ICQuRVFVQUxTX1NJR04pIHtcbiAgICAgICAgdGhpcy5fY3JlYXRlQXR0cignPScpO1xuICAgICAgICB0aGlzLnN0YXRlID0gQVRUUklCVVRFX05BTUVfU1RBVEU7XG4gICAgfVxuXG4gICAgZWxzZSB7XG4gICAgICAgIHRoaXMuX2NyZWF0ZUF0dHIoJycpO1xuICAgICAgICB0aGlzLl9yZWNvbnN1bWVJblN0YXRlKEFUVFJJQlVURV9OQU1FX1NUQVRFKTtcbiAgICB9XG59O1xuXG5cbi8vMTIuMi40LjM1IEF0dHJpYnV0ZSBuYW1lIHN0YXRlXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuX1tBVFRSSUJVVEVfTkFNRV9TVEFURV0gPSBmdW5jdGlvbiBhdHRyaWJ1dGVOYW1lU3RhdGUoY3ApIHtcbiAgICBpZiAoaXNXaGl0ZXNwYWNlKGNwKSB8fCBjcCA9PT0gJC5TT0xJRFVTIHx8IGNwID09PSAkLkdSRUFURVJfVEhBTl9TSUdOIHx8IGNwID09PSAkLkVPRikge1xuICAgICAgICB0aGlzLl9sZWF2ZUF0dHJOYW1lKEFGVEVSX0FUVFJJQlVURV9OQU1FX1NUQVRFKTtcbiAgICAgICAgdGhpcy5fdW5jb25zdW1lKCk7XG4gICAgfVxuXG4gICAgZWxzZSBpZiAoY3AgPT09ICQuRVFVQUxTX1NJR04pXG4gICAgICAgIHRoaXMuX2xlYXZlQXR0ck5hbWUoQkVGT1JFX0FUVFJJQlVURV9WQUxVRV9TVEFURSk7XG5cbiAgICBlbHNlIGlmIChpc0FzY2lpVXBwZXIoY3ApKVxuICAgICAgICB0aGlzLmN1cnJlbnRBdHRyLm5hbWUgKz0gdG9Bc2NpaUxvd2VyQ2hhcihjcCk7XG5cbiAgICBlbHNlIGlmIChjcCA9PT0gJC5RVU9UQVRJT05fTUFSSyB8fCBjcCA9PT0gJC5BUE9TVFJPUEhFIHx8IGNwID09PSAkLkxFU1NfVEhBTl9TSUdOKVxuICAgICAgICB0aGlzLmN1cnJlbnRBdHRyLm5hbWUgKz0gdG9DaGFyKGNwKTtcblxuICAgIGVsc2UgaWYgKGNwID09PSAkLk5VTEwpXG4gICAgICAgIHRoaXMuY3VycmVudEF0dHIubmFtZSArPSBVTklDT0RFLlJFUExBQ0VNRU5UX0NIQVJBQ1RFUjtcblxuICAgIGVsc2VcbiAgICAgICAgdGhpcy5jdXJyZW50QXR0ci5uYW1lICs9IHRvQ2hhcihjcCk7XG59O1xuXG5cbi8vMTIuMi40LjM2IEFmdGVyIGF0dHJpYnV0ZSBuYW1lIHN0YXRlXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuX1tBRlRFUl9BVFRSSUJVVEVfTkFNRV9TVEFURV0gPSBmdW5jdGlvbiBhZnRlckF0dHJpYnV0ZU5hbWVTdGF0ZShjcCkge1xuICAgIGlmIChpc1doaXRlc3BhY2UoY3ApKVxuICAgICAgICByZXR1cm47XG5cbiAgICBpZiAoY3AgPT09ICQuU09MSURVUylcbiAgICAgICAgdGhpcy5zdGF0ZSA9IFNFTEZfQ0xPU0lOR19TVEFSVF9UQUdfU1RBVEU7XG5cbiAgICBlbHNlIGlmIChjcCA9PT0gJC5FUVVBTFNfU0lHTilcbiAgICAgICAgdGhpcy5zdGF0ZSA9IEJFRk9SRV9BVFRSSUJVVEVfVkFMVUVfU1RBVEU7XG5cbiAgICBlbHNlIGlmIChjcCA9PT0gJC5HUkVBVEVSX1RIQU5fU0lHTikge1xuICAgICAgICB0aGlzLnN0YXRlID0gREFUQV9TVEFURTtcbiAgICAgICAgdGhpcy5fZW1pdEN1cnJlbnRUb2tlbigpO1xuICAgIH1cblxuICAgIGVsc2UgaWYgKGNwID09PSAkLkVPRilcbiAgICAgICAgdGhpcy5fcmVjb25zdW1lSW5TdGF0ZShEQVRBX1NUQVRFKTtcblxuICAgIGVsc2Uge1xuICAgICAgICB0aGlzLl9jcmVhdGVBdHRyKCcnKTtcbiAgICAgICAgdGhpcy5fcmVjb25zdW1lSW5TdGF0ZShBVFRSSUJVVEVfTkFNRV9TVEFURSk7XG4gICAgfVxufTtcblxuXG4vLzEyLjIuNC4zNyBCZWZvcmUgYXR0cmlidXRlIHZhbHVlIHN0YXRlXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuX1tCRUZPUkVfQVRUUklCVVRFX1ZBTFVFX1NUQVRFXSA9IGZ1bmN0aW9uIGJlZm9yZUF0dHJpYnV0ZVZhbHVlU3RhdGUoY3ApIHtcbiAgICBpZiAoaXNXaGl0ZXNwYWNlKGNwKSlcbiAgICAgICAgcmV0dXJuO1xuXG4gICAgaWYgKGNwID09PSAkLlFVT1RBVElPTl9NQVJLKVxuICAgICAgICB0aGlzLnN0YXRlID0gQVRUUklCVVRFX1ZBTFVFX0RPVUJMRV9RVU9URURfU1RBVEU7XG5cbiAgICBlbHNlIGlmIChjcCA9PT0gJC5BUE9TVFJPUEhFKVxuICAgICAgICB0aGlzLnN0YXRlID0gQVRUUklCVVRFX1ZBTFVFX1NJTkdMRV9RVU9URURfU1RBVEU7XG5cbiAgICBlbHNlXG4gICAgICAgIHRoaXMuX3JlY29uc3VtZUluU3RhdGUoQVRUUklCVVRFX1ZBTFVFX1VOUVVPVEVEX1NUQVRFKTtcbn07XG5cblxuLy8xMi4yLjQuMzggQXR0cmlidXRlIHZhbHVlIChkb3VibGUtcXVvdGVkKSBzdGF0ZVxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbl9bQVRUUklCVVRFX1ZBTFVFX0RPVUJMRV9RVU9URURfU1RBVEVdID0gZnVuY3Rpb24gYXR0cmlidXRlVmFsdWVEb3VibGVRdW90ZWRTdGF0ZShjcCkge1xuICAgIGlmIChjcCA9PT0gJC5RVU9UQVRJT05fTUFSSylcbiAgICAgICAgdGhpcy5zdGF0ZSA9IEFGVEVSX0FUVFJJQlVURV9WQUxVRV9RVU9URURfU1RBVEU7XG5cbiAgICBlbHNlIGlmIChjcCA9PT0gJC5BTVBFUlNBTkQpIHtcbiAgICAgICAgdGhpcy5hZGRpdGlvbmFsQWxsb3dlZENwID0gJC5RVU9UQVRJT05fTUFSSztcbiAgICAgICAgdGhpcy5yZXR1cm5TdGF0ZSA9IHRoaXMuc3RhdGU7XG4gICAgICAgIHRoaXMuc3RhdGUgPSBDSEFSQUNURVJfUkVGRVJFTkNFX0lOX0FUVFJJQlVURV9WQUxVRV9TVEFURTtcbiAgICB9XG5cbiAgICBlbHNlIGlmIChjcCA9PT0gJC5OVUxMKVxuICAgICAgICB0aGlzLmN1cnJlbnRBdHRyLnZhbHVlICs9IFVOSUNPREUuUkVQTEFDRU1FTlRfQ0hBUkFDVEVSO1xuXG4gICAgZWxzZSBpZiAoY3AgPT09ICQuRU9GKVxuICAgICAgICB0aGlzLl9yZWNvbnN1bWVJblN0YXRlKERBVEFfU1RBVEUpO1xuXG4gICAgZWxzZVxuICAgICAgICB0aGlzLmN1cnJlbnRBdHRyLnZhbHVlICs9IHRvQ2hhcihjcCk7XG59O1xuXG5cbi8vMTIuMi40LjM5IEF0dHJpYnV0ZSB2YWx1ZSAoc2luZ2xlLXF1b3RlZCkgc3RhdGVcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5fW0FUVFJJQlVURV9WQUxVRV9TSU5HTEVfUVVPVEVEX1NUQVRFXSA9IGZ1bmN0aW9uIGF0dHJpYnV0ZVZhbHVlU2luZ2xlUXVvdGVkU3RhdGUoY3ApIHtcbiAgICBpZiAoY3AgPT09ICQuQVBPU1RST1BIRSlcbiAgICAgICAgdGhpcy5zdGF0ZSA9IEFGVEVSX0FUVFJJQlVURV9WQUxVRV9RVU9URURfU1RBVEU7XG5cbiAgICBlbHNlIGlmIChjcCA9PT0gJC5BTVBFUlNBTkQpIHtcbiAgICAgICAgdGhpcy5hZGRpdGlvbmFsQWxsb3dlZENwID0gJC5BUE9TVFJPUEhFO1xuICAgICAgICB0aGlzLnJldHVyblN0YXRlID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IENIQVJBQ1RFUl9SRUZFUkVOQ0VfSU5fQVRUUklCVVRFX1ZBTFVFX1NUQVRFO1xuICAgIH1cblxuICAgIGVsc2UgaWYgKGNwID09PSAkLk5VTEwpXG4gICAgICAgIHRoaXMuY3VycmVudEF0dHIudmFsdWUgKz0gVU5JQ09ERS5SRVBMQUNFTUVOVF9DSEFSQUNURVI7XG5cbiAgICBlbHNlIGlmIChjcCA9PT0gJC5FT0YpXG4gICAgICAgIHRoaXMuX3JlY29uc3VtZUluU3RhdGUoREFUQV9TVEFURSk7XG5cbiAgICBlbHNlXG4gICAgICAgIHRoaXMuY3VycmVudEF0dHIudmFsdWUgKz0gdG9DaGFyKGNwKTtcbn07XG5cblxuLy8xMi4yLjQuNDAgQXR0cmlidXRlIHZhbHVlICh1bnF1b3RlZCkgc3RhdGVcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5fW0FUVFJJQlVURV9WQUxVRV9VTlFVT1RFRF9TVEFURV0gPSBmdW5jdGlvbiBhdHRyaWJ1dGVWYWx1ZVVucXVvdGVkU3RhdGUoY3ApIHtcbiAgICBpZiAoaXNXaGl0ZXNwYWNlKGNwKSlcbiAgICAgICAgdGhpcy5fbGVhdmVBdHRyVmFsdWUoQkVGT1JFX0FUVFJJQlVURV9OQU1FX1NUQVRFKTtcblxuICAgIGVsc2UgaWYgKGNwID09PSAkLkFNUEVSU0FORCkge1xuICAgICAgICB0aGlzLmFkZGl0aW9uYWxBbGxvd2VkQ3AgPSAkLkdSRUFURVJfVEhBTl9TSUdOO1xuICAgICAgICB0aGlzLnJldHVyblN0YXRlID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IENIQVJBQ1RFUl9SRUZFUkVOQ0VfSU5fQVRUUklCVVRFX1ZBTFVFX1NUQVRFO1xuICAgIH1cblxuICAgIGVsc2UgaWYgKGNwID09PSAkLkdSRUFURVJfVEhBTl9TSUdOKSB7XG4gICAgICAgIHRoaXMuX2xlYXZlQXR0clZhbHVlKERBVEFfU1RBVEUpO1xuICAgICAgICB0aGlzLl9lbWl0Q3VycmVudFRva2VuKCk7XG4gICAgfVxuXG4gICAgZWxzZSBpZiAoY3AgPT09ICQuTlVMTClcbiAgICAgICAgdGhpcy5jdXJyZW50QXR0ci52YWx1ZSArPSBVTklDT0RFLlJFUExBQ0VNRU5UX0NIQVJBQ1RFUjtcblxuICAgIGVsc2UgaWYgKGNwID09PSAkLlFVT1RBVElPTl9NQVJLIHx8IGNwID09PSAkLkFQT1NUUk9QSEUgfHwgY3AgPT09ICQuTEVTU19USEFOX1NJR04gfHxcbiAgICAgICAgICAgICBjcCA9PT0gJC5FUVVBTFNfU0lHTiB8fCBjcCA9PT0gJC5HUkFWRV9BQ0NFTlQpXG4gICAgICAgIHRoaXMuY3VycmVudEF0dHIudmFsdWUgKz0gdG9DaGFyKGNwKTtcblxuICAgIGVsc2UgaWYgKGNwID09PSAkLkVPRilcbiAgICAgICAgdGhpcy5fcmVjb25zdW1lSW5TdGF0ZShEQVRBX1NUQVRFKTtcblxuICAgIGVsc2VcbiAgICAgICAgdGhpcy5jdXJyZW50QXR0ci52YWx1ZSArPSB0b0NoYXIoY3ApO1xufTtcblxuXG4vLzEyLjIuNC40MSBDaGFyYWN0ZXIgcmVmZXJlbmNlIGluIGF0dHJpYnV0ZSB2YWx1ZSBzdGF0ZVxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbl9bQ0hBUkFDVEVSX1JFRkVSRU5DRV9JTl9BVFRSSUJVVEVfVkFMVUVfU1RBVEVdID0gZnVuY3Rpb24gY2hhcmFjdGVyUmVmZXJlbmNlSW5BdHRyaWJ1dGVWYWx1ZVN0YXRlKGNwKSB7XG4gICAgdmFyIHJlZmVyZW5jZWRDb2RlUG9pbnRzID0gdGhpcy5fY29uc3VtZUNoYXJhY3RlclJlZmVyZW5jZShjcCwgdHJ1ZSk7XG5cbiAgICBpZiAoIXRoaXMuX2Vuc3VyZUhpYmVybmF0aW9uKCkpIHtcbiAgICAgICAgaWYgKHJlZmVyZW5jZWRDb2RlUG9pbnRzKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlZmVyZW5jZWRDb2RlUG9pbnRzLmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudEF0dHIudmFsdWUgKz0gdG9DaGFyKHJlZmVyZW5jZWRDb2RlUG9pbnRzW2ldKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRBdHRyLnZhbHVlICs9ICcmJztcblxuICAgICAgICB0aGlzLnN0YXRlID0gdGhpcy5yZXR1cm5TdGF0ZTtcbiAgICB9XG59O1xuXG5cbi8vMTIuMi40LjQyIEFmdGVyIGF0dHJpYnV0ZSB2YWx1ZSAocXVvdGVkKSBzdGF0ZVxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbl9bQUZURVJfQVRUUklCVVRFX1ZBTFVFX1FVT1RFRF9TVEFURV0gPSBmdW5jdGlvbiBhZnRlckF0dHJpYnV0ZVZhbHVlUXVvdGVkU3RhdGUoY3ApIHtcbiAgICBpZiAoaXNXaGl0ZXNwYWNlKGNwKSlcbiAgICAgICAgdGhpcy5fbGVhdmVBdHRyVmFsdWUoQkVGT1JFX0FUVFJJQlVURV9OQU1FX1NUQVRFKTtcblxuICAgIGVsc2UgaWYgKGNwID09PSAkLlNPTElEVVMpXG4gICAgICAgIHRoaXMuX2xlYXZlQXR0clZhbHVlKFNFTEZfQ0xPU0lOR19TVEFSVF9UQUdfU1RBVEUpO1xuXG4gICAgZWxzZSBpZiAoY3AgPT09ICQuR1JFQVRFUl9USEFOX1NJR04pIHtcbiAgICAgICAgdGhpcy5fbGVhdmVBdHRyVmFsdWUoREFUQV9TVEFURSk7XG4gICAgICAgIHRoaXMuX2VtaXRDdXJyZW50VG9rZW4oKTtcbiAgICB9XG5cbiAgICBlbHNlIGlmIChjcCA9PT0gJC5FT0YpXG4gICAgICAgIHRoaXMuX3JlY29uc3VtZUluU3RhdGUoREFUQV9TVEFURSk7XG5cbiAgICBlbHNlXG4gICAgICAgIHRoaXMuX3JlY29uc3VtZUluU3RhdGUoQkVGT1JFX0FUVFJJQlVURV9OQU1FX1NUQVRFKTtcbn07XG5cblxuLy8xMi4yLjQuNDMgU2VsZi1jbG9zaW5nIHN0YXJ0IHRhZyBzdGF0ZVxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbl9bU0VMRl9DTE9TSU5HX1NUQVJUX1RBR19TVEFURV0gPSBmdW5jdGlvbiBzZWxmQ2xvc2luZ1N0YXJ0VGFnU3RhdGUoY3ApIHtcbiAgICBpZiAoY3AgPT09ICQuR1JFQVRFUl9USEFOX1NJR04pIHtcbiAgICAgICAgdGhpcy5jdXJyZW50VG9rZW4uc2VsZkNsb3NpbmcgPSB0cnVlO1xuICAgICAgICB0aGlzLnN0YXRlID0gREFUQV9TVEFURTtcbiAgICAgICAgdGhpcy5fZW1pdEN1cnJlbnRUb2tlbigpO1xuICAgIH1cblxuICAgIGVsc2UgaWYgKGNwID09PSAkLkVPRilcbiAgICAgICAgdGhpcy5fcmVjb25zdW1lSW5TdGF0ZShEQVRBX1NUQVRFKTtcblxuICAgIGVsc2VcbiAgICAgICAgdGhpcy5fcmVjb25zdW1lSW5TdGF0ZShCRUZPUkVfQVRUUklCVVRFX05BTUVfU1RBVEUpO1xufTtcblxuXG4vLzEyLjIuNC40NCBCb2d1cyBjb21tZW50IHN0YXRlXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuX1tCT0dVU19DT01NRU5UX1NUQVRFXSA9IGZ1bmN0aW9uIGJvZ3VzQ29tbWVudFN0YXRlKCkge1xuICAgIHRoaXMuX2NyZWF0ZUNvbW1lbnRUb2tlbigpO1xuICAgIHRoaXMuX3JlY29uc3VtZUluU3RhdGUoQk9HVVNfQ09NTUVOVF9TVEFURV9DT05USU5VQVRJT04pO1xufTtcblxuLy9IQUNLOiB0byBzdXBwb3J0IHN0cmVhbWluZyBhbmQgbWFrZSBCT0dVU19DT01NRU5UX1NUQVRFIHJlZW50cmFudCB3ZSd2ZVxuLy9pbnRyb2R1Y2VkIEJPR1VTX0NPTU1FTlRfU1RBVEVfQ09OVElOVUFUSU9OIHN0YXRlIHdoaWNoIHdpbGwgbm90IHByb2R1Y2Vcbi8vY29tbWVudCB0b2tlbiBvbiBlYWNoIGNhbGwuXG5fW0JPR1VTX0NPTU1FTlRfU1RBVEVfQ09OVElOVUFUSU9OXSA9IGZ1bmN0aW9uIGJvZ3VzQ29tbWVudFN0YXRlQ29udGludWF0aW9uKGNwKSB7XG4gICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgaWYgKGNwID09PSAkLkdSRUFURVJfVEhBTl9TSUdOKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gREFUQV9TVEFURTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgZWxzZSBpZiAoY3AgPT09ICQuRU9GKSB7XG4gICAgICAgICAgICB0aGlzLl9yZWNvbnN1bWVJblN0YXRlKERBVEFfU1RBVEUpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudFRva2VuLmRhdGEgKz0gY3AgPT09ICQuTlVMTCA/IFVOSUNPREUuUkVQTEFDRU1FTlRfQ0hBUkFDVEVSIDogdG9DaGFyKGNwKTtcblxuICAgICAgICAgICAgdGhpcy5faGliZXJuYXRpb25TbmFwc2hvdCgpO1xuICAgICAgICAgICAgY3AgPSB0aGlzLl9jb25zdW1lKCk7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLl9lbnN1cmVIaWJlcm5hdGlvbigpKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuX2VtaXRDdXJyZW50VG9rZW4oKTtcbn07XG5cbi8vMTIuMi40LjQ1IE1hcmt1cCBkZWNsYXJhdGlvbiBvcGVuIHN0YXRlXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuX1tNQVJLVVBfREVDTEFSQVRJT05fT1BFTl9TVEFURV0gPSBmdW5jdGlvbiBtYXJrdXBEZWNsYXJhdGlvbk9wZW5TdGF0ZShjcCkge1xuICAgIHZhciBkYXNoRGFzaE1hdGNoID0gdGhpcy5fY29uc3VtZVN1YnNlcXVlbnRJZk1hdGNoKCQkLkRBU0hfREFTSF9TVFJJTkcsIGNwLCB0cnVlKSxcbiAgICAgICAgZG9jdHlwZU1hdGNoID0gIWRhc2hEYXNoTWF0Y2ggJiYgdGhpcy5fY29uc3VtZVN1YnNlcXVlbnRJZk1hdGNoKCQkLkRPQ1RZUEVfU1RSSU5HLCBjcCwgZmFsc2UpLFxuICAgICAgICBjZGF0YU1hdGNoID0gIWRhc2hEYXNoTWF0Y2ggJiYgIWRvY3R5cGVNYXRjaCAmJlxuICAgICAgICAgICAgICAgICAgICAgdGhpcy5hbGxvd0NEQVRBICYmXG4gICAgICAgICAgICAgICAgICAgICB0aGlzLl9jb25zdW1lU3Vic2VxdWVudElmTWF0Y2goJCQuQ0RBVEFfU1RBUlRfU1RSSU5HLCBjcCwgdHJ1ZSk7XG5cbiAgICBpZiAoIXRoaXMuX2Vuc3VyZUhpYmVybmF0aW9uKCkpIHtcbiAgICAgICAgaWYgKGRhc2hEYXNoTWF0Y2gpIHtcbiAgICAgICAgICAgIHRoaXMuX2NyZWF0ZUNvbW1lbnRUb2tlbigpO1xuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IENPTU1FTlRfU1RBUlRfU1RBVEU7XG4gICAgICAgIH1cblxuICAgICAgICBlbHNlIGlmIChkb2N0eXBlTWF0Y2gpXG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gRE9DVFlQRV9TVEFURTtcblxuICAgICAgICBlbHNlIGlmIChjZGF0YU1hdGNoKVxuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IENEQVRBX1NFQ1RJT05fU1RBVEU7XG5cbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgdGhpcy5fcmVjb25zdW1lSW5TdGF0ZShCT0dVU19DT01NRU5UX1NUQVRFKTtcbiAgICB9XG59O1xuXG5cbi8vMTIuMi40LjQ2IENvbW1lbnQgc3RhcnQgc3RhdGVcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5fW0NPTU1FTlRfU1RBUlRfU1RBVEVdID0gZnVuY3Rpb24gY29tbWVudFN0YXJ0U3RhdGUoY3ApIHtcbiAgICBpZiAoY3AgPT09ICQuSFlQSEVOX01JTlVTKVxuICAgICAgICB0aGlzLnN0YXRlID0gQ09NTUVOVF9TVEFSVF9EQVNIX1NUQVRFO1xuXG4gICAgZWxzZSBpZiAoY3AgPT09ICQuTlVMTCkge1xuICAgICAgICB0aGlzLmN1cnJlbnRUb2tlbi5kYXRhICs9IFVOSUNPREUuUkVQTEFDRU1FTlRfQ0hBUkFDVEVSO1xuICAgICAgICB0aGlzLnN0YXRlID0gQ09NTUVOVF9TVEFURTtcbiAgICB9XG5cbiAgICBlbHNlIGlmIChjcCA9PT0gJC5HUkVBVEVSX1RIQU5fU0lHTikge1xuICAgICAgICB0aGlzLnN0YXRlID0gREFUQV9TVEFURTtcbiAgICAgICAgdGhpcy5fZW1pdEN1cnJlbnRUb2tlbigpO1xuICAgIH1cblxuICAgIGVsc2UgaWYgKGNwID09PSAkLkVPRikge1xuICAgICAgICB0aGlzLl9lbWl0Q3VycmVudFRva2VuKCk7XG4gICAgICAgIHRoaXMuX3JlY29uc3VtZUluU3RhdGUoREFUQV9TVEFURSk7XG4gICAgfVxuXG4gICAgZWxzZSB7XG4gICAgICAgIHRoaXMuY3VycmVudFRva2VuLmRhdGEgKz0gdG9DaGFyKGNwKTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IENPTU1FTlRfU1RBVEU7XG4gICAgfVxufTtcblxuXG4vLzEyLjIuNC40NyBDb21tZW50IHN0YXJ0IGRhc2ggc3RhdGVcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5fW0NPTU1FTlRfU1RBUlRfREFTSF9TVEFURV0gPSBmdW5jdGlvbiBjb21tZW50U3RhcnREYXNoU3RhdGUoY3ApIHtcbiAgICBpZiAoY3AgPT09ICQuSFlQSEVOX01JTlVTKVxuICAgICAgICB0aGlzLnN0YXRlID0gQ09NTUVOVF9FTkRfU1RBVEU7XG5cbiAgICBlbHNlIGlmIChjcCA9PT0gJC5OVUxMKSB7XG4gICAgICAgIHRoaXMuY3VycmVudFRva2VuLmRhdGEgKz0gJy0nO1xuICAgICAgICB0aGlzLmN1cnJlbnRUb2tlbi5kYXRhICs9IFVOSUNPREUuUkVQTEFDRU1FTlRfQ0hBUkFDVEVSO1xuICAgICAgICB0aGlzLnN0YXRlID0gQ09NTUVOVF9TVEFURTtcbiAgICB9XG5cbiAgICBlbHNlIGlmIChjcCA9PT0gJC5HUkVBVEVSX1RIQU5fU0lHTikge1xuICAgICAgICB0aGlzLnN0YXRlID0gREFUQV9TVEFURTtcbiAgICAgICAgdGhpcy5fZW1pdEN1cnJlbnRUb2tlbigpO1xuICAgIH1cblxuICAgIGVsc2UgaWYgKGNwID09PSAkLkVPRikge1xuICAgICAgICB0aGlzLl9lbWl0Q3VycmVudFRva2VuKCk7XG4gICAgICAgIHRoaXMuX3JlY29uc3VtZUluU3RhdGUoREFUQV9TVEFURSk7XG4gICAgfVxuXG4gICAgZWxzZSB7XG4gICAgICAgIHRoaXMuY3VycmVudFRva2VuLmRhdGEgKz0gJy0nO1xuICAgICAgICB0aGlzLmN1cnJlbnRUb2tlbi5kYXRhICs9IHRvQ2hhcihjcCk7XG4gICAgICAgIHRoaXMuc3RhdGUgPSBDT01NRU5UX1NUQVRFO1xuICAgIH1cbn07XG5cblxuLy8xMi4yLjQuNDggQ29tbWVudCBzdGF0ZVxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbl9bQ09NTUVOVF9TVEFURV0gPSBmdW5jdGlvbiBjb21tZW50U3RhdGUoY3ApIHtcbiAgICBpZiAoY3AgPT09ICQuSFlQSEVOX01JTlVTKVxuICAgICAgICB0aGlzLnN0YXRlID0gQ09NTUVOVF9FTkRfREFTSF9TVEFURTtcblxuICAgIGVsc2UgaWYgKGNwID09PSAkLk5VTEwpXG4gICAgICAgIHRoaXMuY3VycmVudFRva2VuLmRhdGEgKz0gVU5JQ09ERS5SRVBMQUNFTUVOVF9DSEFSQUNURVI7XG5cbiAgICBlbHNlIGlmIChjcCA9PT0gJC5FT0YpIHtcbiAgICAgICAgdGhpcy5fZW1pdEN1cnJlbnRUb2tlbigpO1xuICAgICAgICB0aGlzLl9yZWNvbnN1bWVJblN0YXRlKERBVEFfU1RBVEUpO1xuICAgIH1cblxuICAgIGVsc2VcbiAgICAgICAgdGhpcy5jdXJyZW50VG9rZW4uZGF0YSArPSB0b0NoYXIoY3ApO1xufTtcblxuXG4vLzEyLjIuNC40OSBDb21tZW50IGVuZCBkYXNoIHN0YXRlXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuX1tDT01NRU5UX0VORF9EQVNIX1NUQVRFXSA9IGZ1bmN0aW9uIGNvbW1lbnRFbmREYXNoU3RhdGUoY3ApIHtcbiAgICBpZiAoY3AgPT09ICQuSFlQSEVOX01JTlVTKVxuICAgICAgICB0aGlzLnN0YXRlID0gQ09NTUVOVF9FTkRfU1RBVEU7XG5cbiAgICBlbHNlIGlmIChjcCA9PT0gJC5OVUxMKSB7XG4gICAgICAgIHRoaXMuY3VycmVudFRva2VuLmRhdGEgKz0gJy0nO1xuICAgICAgICB0aGlzLmN1cnJlbnRUb2tlbi5kYXRhICs9IFVOSUNPREUuUkVQTEFDRU1FTlRfQ0hBUkFDVEVSO1xuICAgICAgICB0aGlzLnN0YXRlID0gQ09NTUVOVF9TVEFURTtcbiAgICB9XG5cbiAgICBlbHNlIGlmIChjcCA9PT0gJC5FT0YpIHtcbiAgICAgICAgdGhpcy5fZW1pdEN1cnJlbnRUb2tlbigpO1xuICAgICAgICB0aGlzLl9yZWNvbnN1bWVJblN0YXRlKERBVEFfU1RBVEUpO1xuICAgIH1cblxuICAgIGVsc2Uge1xuICAgICAgICB0aGlzLmN1cnJlbnRUb2tlbi5kYXRhICs9ICctJztcbiAgICAgICAgdGhpcy5jdXJyZW50VG9rZW4uZGF0YSArPSB0b0NoYXIoY3ApO1xuICAgICAgICB0aGlzLnN0YXRlID0gQ09NTUVOVF9TVEFURTtcbiAgICB9XG59O1xuXG5cbi8vMTIuMi40LjUwIENvbW1lbnQgZW5kIHN0YXRlXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuX1tDT01NRU5UX0VORF9TVEFURV0gPSBmdW5jdGlvbiBjb21tZW50RW5kU3RhdGUoY3ApIHtcbiAgICBpZiAoY3AgPT09ICQuR1JFQVRFUl9USEFOX1NJR04pIHtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IERBVEFfU1RBVEU7XG4gICAgICAgIHRoaXMuX2VtaXRDdXJyZW50VG9rZW4oKTtcbiAgICB9XG5cbiAgICBlbHNlIGlmIChjcCA9PT0gJC5FWENMQU1BVElPTl9NQVJLKVxuICAgICAgICB0aGlzLnN0YXRlID0gQ09NTUVOVF9FTkRfQkFOR19TVEFURTtcblxuICAgIGVsc2UgaWYgKGNwID09PSAkLkhZUEhFTl9NSU5VUylcbiAgICAgICAgdGhpcy5jdXJyZW50VG9rZW4uZGF0YSArPSAnLSc7XG5cbiAgICBlbHNlIGlmIChjcCA9PT0gJC5OVUxMKSB7XG4gICAgICAgIHRoaXMuY3VycmVudFRva2VuLmRhdGEgKz0gJy0tJztcbiAgICAgICAgdGhpcy5jdXJyZW50VG9rZW4uZGF0YSArPSBVTklDT0RFLlJFUExBQ0VNRU5UX0NIQVJBQ1RFUjtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IENPTU1FTlRfU1RBVEU7XG4gICAgfVxuXG4gICAgZWxzZSBpZiAoY3AgPT09ICQuRU9GKSB7XG4gICAgICAgIHRoaXMuX3JlY29uc3VtZUluU3RhdGUoREFUQV9TVEFURSk7XG4gICAgICAgIHRoaXMuX2VtaXRDdXJyZW50VG9rZW4oKTtcbiAgICB9XG5cbiAgICBlbHNlIHtcbiAgICAgICAgdGhpcy5jdXJyZW50VG9rZW4uZGF0YSArPSAnLS0nO1xuICAgICAgICB0aGlzLmN1cnJlbnRUb2tlbi5kYXRhICs9IHRvQ2hhcihjcCk7XG4gICAgICAgIHRoaXMuc3RhdGUgPSBDT01NRU5UX1NUQVRFO1xuICAgIH1cbn07XG5cblxuLy8xMi4yLjQuNTEgQ29tbWVudCBlbmQgYmFuZyBzdGF0ZVxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbl9bQ09NTUVOVF9FTkRfQkFOR19TVEFURV0gPSBmdW5jdGlvbiBjb21tZW50RW5kQmFuZ1N0YXRlKGNwKSB7XG4gICAgaWYgKGNwID09PSAkLkhZUEhFTl9NSU5VUykge1xuICAgICAgICB0aGlzLmN1cnJlbnRUb2tlbi5kYXRhICs9ICctLSEnO1xuICAgICAgICB0aGlzLnN0YXRlID0gQ09NTUVOVF9FTkRfREFTSF9TVEFURTtcbiAgICB9XG5cbiAgICBlbHNlIGlmIChjcCA9PT0gJC5HUkVBVEVSX1RIQU5fU0lHTikge1xuICAgICAgICB0aGlzLnN0YXRlID0gREFUQV9TVEFURTtcbiAgICAgICAgdGhpcy5fZW1pdEN1cnJlbnRUb2tlbigpO1xuICAgIH1cblxuICAgIGVsc2UgaWYgKGNwID09PSAkLk5VTEwpIHtcbiAgICAgICAgdGhpcy5jdXJyZW50VG9rZW4uZGF0YSArPSAnLS0hJztcbiAgICAgICAgdGhpcy5jdXJyZW50VG9rZW4uZGF0YSArPSBVTklDT0RFLlJFUExBQ0VNRU5UX0NIQVJBQ1RFUjtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IENPTU1FTlRfU1RBVEU7XG4gICAgfVxuXG4gICAgZWxzZSBpZiAoY3AgPT09ICQuRU9GKSB7XG4gICAgICAgIHRoaXMuX2VtaXRDdXJyZW50VG9rZW4oKTtcbiAgICAgICAgdGhpcy5fcmVjb25zdW1lSW5TdGF0ZShEQVRBX1NUQVRFKTtcbiAgICB9XG5cbiAgICBlbHNlIHtcbiAgICAgICAgdGhpcy5jdXJyZW50VG9rZW4uZGF0YSArPSAnLS0hJztcbiAgICAgICAgdGhpcy5jdXJyZW50VG9rZW4uZGF0YSArPSB0b0NoYXIoY3ApO1xuICAgICAgICB0aGlzLnN0YXRlID0gQ09NTUVOVF9TVEFURTtcbiAgICB9XG59O1xuXG5cbi8vMTIuMi40LjUyIERPQ1RZUEUgc3RhdGVcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5fW0RPQ1RZUEVfU1RBVEVdID0gZnVuY3Rpb24gZG9jdHlwZVN0YXRlKGNwKSB7XG4gICAgaWYgKGlzV2hpdGVzcGFjZShjcCkpXG4gICAgICAgIHJldHVybjtcblxuICAgIGVsc2UgaWYgKGNwID09PSAkLkdSRUFURVJfVEhBTl9TSUdOKSB7XG4gICAgICAgIHRoaXMuX2NyZWF0ZURvY3R5cGVUb2tlbihudWxsKTtcbiAgICAgICAgdGhpcy5jdXJyZW50VG9rZW4uZm9yY2VRdWlya3MgPSB0cnVlO1xuICAgICAgICB0aGlzLl9lbWl0Q3VycmVudFRva2VuKCk7XG4gICAgICAgIHRoaXMuc3RhdGUgPSBEQVRBX1NUQVRFO1xuICAgIH1cblxuICAgIGVsc2UgaWYgKGNwID09PSAkLkVPRikge1xuICAgICAgICB0aGlzLl9jcmVhdGVEb2N0eXBlVG9rZW4obnVsbCk7XG4gICAgICAgIHRoaXMuY3VycmVudFRva2VuLmZvcmNlUXVpcmtzID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fZW1pdEN1cnJlbnRUb2tlbigpO1xuICAgICAgICB0aGlzLl9yZWNvbnN1bWVJblN0YXRlKERBVEFfU1RBVEUpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdGhpcy5fY3JlYXRlRG9jdHlwZVRva2VuKCcnKTtcbiAgICAgICAgdGhpcy5fcmVjb25zdW1lSW5TdGF0ZShET0NUWVBFX05BTUVfU1RBVEUpO1xuICAgIH1cbn07XG5cblxuLy8xMi4yLjQuNTQgRE9DVFlQRSBuYW1lIHN0YXRlXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuX1tET0NUWVBFX05BTUVfU1RBVEVdID0gZnVuY3Rpb24gZG9jdHlwZU5hbWVTdGF0ZShjcCkge1xuICAgIGlmIChpc1doaXRlc3BhY2UoY3ApIHx8IGNwID09PSAkLkdSRUFURVJfVEhBTl9TSUdOIHx8IGNwID09PSAkLkVPRilcbiAgICAgICAgdGhpcy5fcmVjb25zdW1lSW5TdGF0ZShBRlRFUl9ET0NUWVBFX05BTUVfU1RBVEUpO1xuXG4gICAgZWxzZSBpZiAoaXNBc2NpaVVwcGVyKGNwKSlcbiAgICAgICAgdGhpcy5jdXJyZW50VG9rZW4ubmFtZSArPSB0b0FzY2lpTG93ZXJDaGFyKGNwKTtcblxuICAgIGVsc2UgaWYgKGNwID09PSAkLk5VTEwpXG4gICAgICAgIHRoaXMuY3VycmVudFRva2VuLm5hbWUgKz0gVU5JQ09ERS5SRVBMQUNFTUVOVF9DSEFSQUNURVI7XG5cbiAgICBlbHNlXG4gICAgICAgIHRoaXMuY3VycmVudFRva2VuLm5hbWUgKz0gdG9DaGFyKGNwKTtcbn07XG5cblxuLy8xMi4yLjQuNTUgQWZ0ZXIgRE9DVFlQRSBuYW1lIHN0YXRlXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuX1tBRlRFUl9ET0NUWVBFX05BTUVfU1RBVEVdID0gZnVuY3Rpb24gYWZ0ZXJEb2N0eXBlTmFtZVN0YXRlKGNwKSB7XG4gICAgaWYgKGlzV2hpdGVzcGFjZShjcCkpXG4gICAgICAgIHJldHVybjtcblxuICAgIGlmIChjcCA9PT0gJC5HUkVBVEVSX1RIQU5fU0lHTikge1xuICAgICAgICB0aGlzLnN0YXRlID0gREFUQV9TVEFURTtcbiAgICAgICAgdGhpcy5fZW1pdEN1cnJlbnRUb2tlbigpO1xuICAgIH1cblxuICAgIGVsc2Uge1xuICAgICAgICB2YXIgcHVibGljTWF0Y2ggPSB0aGlzLl9jb25zdW1lU3Vic2VxdWVudElmTWF0Y2goJCQuUFVCTElDX1NUUklORywgY3AsIGZhbHNlKSxcbiAgICAgICAgICAgIHN5c3RlbU1hdGNoID0gIXB1YmxpY01hdGNoICYmIHRoaXMuX2NvbnN1bWVTdWJzZXF1ZW50SWZNYXRjaCgkJC5TWVNURU1fU1RSSU5HLCBjcCwgZmFsc2UpO1xuXG4gICAgICAgIGlmICghdGhpcy5fZW5zdXJlSGliZXJuYXRpb24oKSkge1xuICAgICAgICAgICAgaWYgKHB1YmxpY01hdGNoKVxuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBCRUZPUkVfRE9DVFlQRV9QVUJMSUNfSURFTlRJRklFUl9TVEFURTtcblxuICAgICAgICAgICAgZWxzZSBpZiAoc3lzdGVtTWF0Y2gpXG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IEJFRk9SRV9ET0NUWVBFX1NZU1RFTV9JREVOVElGSUVSX1NUQVRFO1xuXG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRUb2tlbi5mb3JjZVF1aXJrcyA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IEJPR1VTX0RPQ1RZUEVfU1RBVEU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG5cbi8vMTIuMi40LjU3IEJlZm9yZSBET0NUWVBFIHB1YmxpYyBpZGVudGlmaWVyIHN0YXRlXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuX1tCRUZPUkVfRE9DVFlQRV9QVUJMSUNfSURFTlRJRklFUl9TVEFURV0gPSBmdW5jdGlvbiBiZWZvcmVEb2N0eXBlUHVibGljSWRlbnRpZmllclN0YXRlKGNwKSB7XG4gICAgaWYgKGlzV2hpdGVzcGFjZShjcCkpXG4gICAgICAgIHJldHVybjtcblxuICAgIGlmIChjcCA9PT0gJC5RVU9UQVRJT05fTUFSSykge1xuICAgICAgICB0aGlzLmN1cnJlbnRUb2tlbi5wdWJsaWNJZCA9ICcnO1xuICAgICAgICB0aGlzLnN0YXRlID0gRE9DVFlQRV9QVUJMSUNfSURFTlRJRklFUl9ET1VCTEVfUVVPVEVEX1NUQVRFO1xuICAgIH1cblxuICAgIGVsc2UgaWYgKGNwID09PSAkLkFQT1NUUk9QSEUpIHtcbiAgICAgICAgdGhpcy5jdXJyZW50VG9rZW4ucHVibGljSWQgPSAnJztcbiAgICAgICAgdGhpcy5zdGF0ZSA9IERPQ1RZUEVfUFVCTElDX0lERU5USUZJRVJfU0lOR0xFX1FVT1RFRF9TVEFURTtcbiAgICB9XG5cbiAgICBlbHNlIHtcbiAgICAgICAgdGhpcy5jdXJyZW50VG9rZW4uZm9yY2VRdWlya3MgPSB0cnVlO1xuICAgICAgICB0aGlzLl9yZWNvbnN1bWVJblN0YXRlKEJPR1VTX0RPQ1RZUEVfU1RBVEUpO1xuICAgIH1cbn07XG5cblxuLy8xMi4yLjQuNTggRE9DVFlQRSBwdWJsaWMgaWRlbnRpZmllciAoZG91YmxlLXF1b3RlZCkgc3RhdGVcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5fW0RPQ1RZUEVfUFVCTElDX0lERU5USUZJRVJfRE9VQkxFX1FVT1RFRF9TVEFURV0gPSBmdW5jdGlvbiBkb2N0eXBlUHVibGljSWRlbnRpZmllckRvdWJsZVF1b3RlZFN0YXRlKGNwKSB7XG4gICAgaWYgKGNwID09PSAkLlFVT1RBVElPTl9NQVJLKVxuICAgICAgICB0aGlzLnN0YXRlID0gQkVUV0VFTl9ET0NUWVBFX1BVQkxJQ19BTkRfU1lTVEVNX0lERU5USUZJRVJTX1NUQVRFO1xuXG4gICAgZWxzZSBpZiAoY3AgPT09ICQuTlVMTClcbiAgICAgICAgdGhpcy5jdXJyZW50VG9rZW4ucHVibGljSWQgKz0gVU5JQ09ERS5SRVBMQUNFTUVOVF9DSEFSQUNURVI7XG5cbiAgICBlbHNlIGlmIChjcCA9PT0gJC5HUkVBVEVSX1RIQU5fU0lHTikge1xuICAgICAgICB0aGlzLmN1cnJlbnRUb2tlbi5mb3JjZVF1aXJrcyA9IHRydWU7XG4gICAgICAgIHRoaXMuX2VtaXRDdXJyZW50VG9rZW4oKTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IERBVEFfU1RBVEU7XG4gICAgfVxuXG4gICAgZWxzZSBpZiAoY3AgPT09ICQuRU9GKSB7XG4gICAgICAgIHRoaXMuY3VycmVudFRva2VuLmZvcmNlUXVpcmtzID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fZW1pdEN1cnJlbnRUb2tlbigpO1xuICAgICAgICB0aGlzLl9yZWNvbnN1bWVJblN0YXRlKERBVEFfU1RBVEUpO1xuICAgIH1cblxuICAgIGVsc2VcbiAgICAgICAgdGhpcy5jdXJyZW50VG9rZW4ucHVibGljSWQgKz0gdG9DaGFyKGNwKTtcbn07XG5cblxuLy8xMi4yLjQuNTkgRE9DVFlQRSBwdWJsaWMgaWRlbnRpZmllciAoc2luZ2xlLXF1b3RlZCkgc3RhdGVcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5fW0RPQ1RZUEVfUFVCTElDX0lERU5USUZJRVJfU0lOR0xFX1FVT1RFRF9TVEFURV0gPSBmdW5jdGlvbiBkb2N0eXBlUHVibGljSWRlbnRpZmllclNpbmdsZVF1b3RlZFN0YXRlKGNwKSB7XG4gICAgaWYgKGNwID09PSAkLkFQT1NUUk9QSEUpXG4gICAgICAgIHRoaXMuc3RhdGUgPSBCRVRXRUVOX0RPQ1RZUEVfUFVCTElDX0FORF9TWVNURU1fSURFTlRJRklFUlNfU1RBVEU7XG5cbiAgICBlbHNlIGlmIChjcCA9PT0gJC5OVUxMKVxuICAgICAgICB0aGlzLmN1cnJlbnRUb2tlbi5wdWJsaWNJZCArPSBVTklDT0RFLlJFUExBQ0VNRU5UX0NIQVJBQ1RFUjtcblxuICAgIGVsc2UgaWYgKGNwID09PSAkLkdSRUFURVJfVEhBTl9TSUdOKSB7XG4gICAgICAgIHRoaXMuY3VycmVudFRva2VuLmZvcmNlUXVpcmtzID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fZW1pdEN1cnJlbnRUb2tlbigpO1xuICAgICAgICB0aGlzLnN0YXRlID0gREFUQV9TVEFURTtcbiAgICB9XG5cbiAgICBlbHNlIGlmIChjcCA9PT0gJC5FT0YpIHtcbiAgICAgICAgdGhpcy5jdXJyZW50VG9rZW4uZm9yY2VRdWlya3MgPSB0cnVlO1xuICAgICAgICB0aGlzLl9lbWl0Q3VycmVudFRva2VuKCk7XG4gICAgICAgIHRoaXMuX3JlY29uc3VtZUluU3RhdGUoREFUQV9TVEFURSk7XG4gICAgfVxuXG4gICAgZWxzZVxuICAgICAgICB0aGlzLmN1cnJlbnRUb2tlbi5wdWJsaWNJZCArPSB0b0NoYXIoY3ApO1xufTtcblxuXG4vLzEyLjIuNC42MSBCZXR3ZWVuIERPQ1RZUEUgcHVibGljIGFuZCBzeXN0ZW0gaWRlbnRpZmllcnMgc3RhdGVcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5fW0JFVFdFRU5fRE9DVFlQRV9QVUJMSUNfQU5EX1NZU1RFTV9JREVOVElGSUVSU19TVEFURV0gPSBmdW5jdGlvbiBiZXR3ZWVuRG9jdHlwZVB1YmxpY0FuZFN5c3RlbUlkZW50aWZpZXJzU3RhdGUoY3ApIHtcbiAgICBpZiAoaXNXaGl0ZXNwYWNlKGNwKSlcbiAgICAgICAgcmV0dXJuO1xuXG4gICAgaWYgKGNwID09PSAkLkdSRUFURVJfVEhBTl9TSUdOKSB7XG4gICAgICAgIHRoaXMuX2VtaXRDdXJyZW50VG9rZW4oKTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IERBVEFfU1RBVEU7XG4gICAgfVxuXG4gICAgZWxzZSBpZiAoY3AgPT09ICQuUVVPVEFUSU9OX01BUkspIHtcbiAgICAgICAgdGhpcy5jdXJyZW50VG9rZW4uc3lzdGVtSWQgPSAnJztcbiAgICAgICAgdGhpcy5zdGF0ZSA9IERPQ1RZUEVfU1lTVEVNX0lERU5USUZJRVJfRE9VQkxFX1FVT1RFRF9TVEFURTtcbiAgICB9XG5cblxuICAgIGVsc2UgaWYgKGNwID09PSAkLkFQT1NUUk9QSEUpIHtcbiAgICAgICAgdGhpcy5jdXJyZW50VG9rZW4uc3lzdGVtSWQgPSAnJztcbiAgICAgICAgdGhpcy5zdGF0ZSA9IERPQ1RZUEVfU1lTVEVNX0lERU5USUZJRVJfU0lOR0xFX1FVT1RFRF9TVEFURTtcbiAgICB9XG5cbiAgICBlbHNlIHtcbiAgICAgICAgdGhpcy5jdXJyZW50VG9rZW4uZm9yY2VRdWlya3MgPSB0cnVlO1xuICAgICAgICB0aGlzLl9yZWNvbnN1bWVJblN0YXRlKEJPR1VTX0RPQ1RZUEVfU1RBVEUpO1xuICAgIH1cbn07XG5cblxuLy8xMi4yLjQuNjMgQmVmb3JlIERPQ1RZUEUgc3lzdGVtIGlkZW50aWZpZXIgc3RhdGVcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5fW0JFRk9SRV9ET0NUWVBFX1NZU1RFTV9JREVOVElGSUVSX1NUQVRFXSA9IGZ1bmN0aW9uIGJlZm9yZURvY3R5cGVTeXN0ZW1JZGVudGlmaWVyU3RhdGUoY3ApIHtcbiAgICBpZiAoaXNXaGl0ZXNwYWNlKGNwKSlcbiAgICAgICAgcmV0dXJuO1xuXG4gICAgaWYgKGNwID09PSAkLlFVT1RBVElPTl9NQVJLKSB7XG4gICAgICAgIHRoaXMuY3VycmVudFRva2VuLnN5c3RlbUlkID0gJyc7XG4gICAgICAgIHRoaXMuc3RhdGUgPSBET0NUWVBFX1NZU1RFTV9JREVOVElGSUVSX0RPVUJMRV9RVU9URURfU1RBVEU7XG4gICAgfVxuXG4gICAgZWxzZSBpZiAoY3AgPT09ICQuQVBPU1RST1BIRSkge1xuICAgICAgICB0aGlzLmN1cnJlbnRUb2tlbi5zeXN0ZW1JZCA9ICcnO1xuICAgICAgICB0aGlzLnN0YXRlID0gRE9DVFlQRV9TWVNURU1fSURFTlRJRklFUl9TSU5HTEVfUVVPVEVEX1NUQVRFO1xuICAgIH1cblxuICAgIGVsc2Uge1xuICAgICAgICB0aGlzLmN1cnJlbnRUb2tlbi5mb3JjZVF1aXJrcyA9IHRydWU7XG4gICAgICAgIHRoaXMuX3JlY29uc3VtZUluU3RhdGUoQk9HVVNfRE9DVFlQRV9TVEFURSk7XG4gICAgfVxufTtcblxuXG4vLzEyLjIuNC42NCBET0NUWVBFIHN5c3RlbSBpZGVudGlmaWVyIChkb3VibGUtcXVvdGVkKSBzdGF0ZVxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbl9bRE9DVFlQRV9TWVNURU1fSURFTlRJRklFUl9ET1VCTEVfUVVPVEVEX1NUQVRFXSA9IGZ1bmN0aW9uIGRvY3R5cGVTeXN0ZW1JZGVudGlmaWVyRG91YmxlUXVvdGVkU3RhdGUoY3ApIHtcbiAgICBpZiAoY3AgPT09ICQuUVVPVEFUSU9OX01BUkspXG4gICAgICAgIHRoaXMuc3RhdGUgPSBBRlRFUl9ET0NUWVBFX1NZU1RFTV9JREVOVElGSUVSX1NUQVRFO1xuXG4gICAgZWxzZSBpZiAoY3AgPT09ICQuR1JFQVRFUl9USEFOX1NJR04pIHtcbiAgICAgICAgdGhpcy5jdXJyZW50VG9rZW4uZm9yY2VRdWlya3MgPSB0cnVlO1xuICAgICAgICB0aGlzLl9lbWl0Q3VycmVudFRva2VuKCk7XG4gICAgICAgIHRoaXMuc3RhdGUgPSBEQVRBX1NUQVRFO1xuICAgIH1cblxuICAgIGVsc2UgaWYgKGNwID09PSAkLk5VTEwpXG4gICAgICAgIHRoaXMuY3VycmVudFRva2VuLnN5c3RlbUlkICs9IFVOSUNPREUuUkVQTEFDRU1FTlRfQ0hBUkFDVEVSO1xuXG4gICAgZWxzZSBpZiAoY3AgPT09ICQuRU9GKSB7XG4gICAgICAgIHRoaXMuY3VycmVudFRva2VuLmZvcmNlUXVpcmtzID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fZW1pdEN1cnJlbnRUb2tlbigpO1xuICAgICAgICB0aGlzLl9yZWNvbnN1bWVJblN0YXRlKERBVEFfU1RBVEUpO1xuICAgIH1cblxuICAgIGVsc2VcbiAgICAgICAgdGhpcy5jdXJyZW50VG9rZW4uc3lzdGVtSWQgKz0gdG9DaGFyKGNwKTtcbn07XG5cblxuLy8xMi4yLjQuNjUgRE9DVFlQRSBzeXN0ZW0gaWRlbnRpZmllciAoc2luZ2xlLXF1b3RlZCkgc3RhdGVcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5fW0RPQ1RZUEVfU1lTVEVNX0lERU5USUZJRVJfU0lOR0xFX1FVT1RFRF9TVEFURV0gPSBmdW5jdGlvbiBkb2N0eXBlU3lzdGVtSWRlbnRpZmllclNpbmdsZVF1b3RlZFN0YXRlKGNwKSB7XG4gICAgaWYgKGNwID09PSAkLkFQT1NUUk9QSEUpXG4gICAgICAgIHRoaXMuc3RhdGUgPSBBRlRFUl9ET0NUWVBFX1NZU1RFTV9JREVOVElGSUVSX1NUQVRFO1xuXG4gICAgZWxzZSBpZiAoY3AgPT09ICQuR1JFQVRFUl9USEFOX1NJR04pIHtcbiAgICAgICAgdGhpcy5jdXJyZW50VG9rZW4uZm9yY2VRdWlya3MgPSB0cnVlO1xuICAgICAgICB0aGlzLl9lbWl0Q3VycmVudFRva2VuKCk7XG4gICAgICAgIHRoaXMuc3RhdGUgPSBEQVRBX1NUQVRFO1xuICAgIH1cblxuICAgIGVsc2UgaWYgKGNwID09PSAkLk5VTEwpXG4gICAgICAgIHRoaXMuY3VycmVudFRva2VuLnN5c3RlbUlkICs9IFVOSUNPREUuUkVQTEFDRU1FTlRfQ0hBUkFDVEVSO1xuXG4gICAgZWxzZSBpZiAoY3AgPT09ICQuRU9GKSB7XG4gICAgICAgIHRoaXMuY3VycmVudFRva2VuLmZvcmNlUXVpcmtzID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fZW1pdEN1cnJlbnRUb2tlbigpO1xuICAgICAgICB0aGlzLl9yZWNvbnN1bWVJblN0YXRlKERBVEFfU1RBVEUpO1xuICAgIH1cblxuICAgIGVsc2VcbiAgICAgICAgdGhpcy5jdXJyZW50VG9rZW4uc3lzdGVtSWQgKz0gdG9DaGFyKGNwKTtcbn07XG5cblxuLy8xMi4yLjQuNjYgQWZ0ZXIgRE9DVFlQRSBzeXN0ZW0gaWRlbnRpZmllciBzdGF0ZVxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbl9bQUZURVJfRE9DVFlQRV9TWVNURU1fSURFTlRJRklFUl9TVEFURV0gPSBmdW5jdGlvbiBhZnRlckRvY3R5cGVTeXN0ZW1JZGVudGlmaWVyU3RhdGUoY3ApIHtcbiAgICBpZiAoaXNXaGl0ZXNwYWNlKGNwKSlcbiAgICAgICAgcmV0dXJuO1xuXG4gICAgaWYgKGNwID09PSAkLkdSRUFURVJfVEhBTl9TSUdOKSB7XG4gICAgICAgIHRoaXMuX2VtaXRDdXJyZW50VG9rZW4oKTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IERBVEFfU1RBVEU7XG4gICAgfVxuXG4gICAgZWxzZSBpZiAoY3AgPT09ICQuRU9GKSB7XG4gICAgICAgIHRoaXMuY3VycmVudFRva2VuLmZvcmNlUXVpcmtzID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fZW1pdEN1cnJlbnRUb2tlbigpO1xuICAgICAgICB0aGlzLl9yZWNvbnN1bWVJblN0YXRlKERBVEFfU1RBVEUpO1xuICAgIH1cblxuICAgIGVsc2VcbiAgICAgICAgdGhpcy5zdGF0ZSA9IEJPR1VTX0RPQ1RZUEVfU1RBVEU7XG59O1xuXG5cbi8vMTIuMi40LjY3IEJvZ3VzIERPQ1RZUEUgc3RhdGVcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5fW0JPR1VTX0RPQ1RZUEVfU1RBVEVdID0gZnVuY3Rpb24gYm9ndXNEb2N0eXBlU3RhdGUoY3ApIHtcbiAgICBpZiAoY3AgPT09ICQuR1JFQVRFUl9USEFOX1NJR04pIHtcbiAgICAgICAgdGhpcy5fZW1pdEN1cnJlbnRUb2tlbigpO1xuICAgICAgICB0aGlzLnN0YXRlID0gREFUQV9TVEFURTtcbiAgICB9XG5cbiAgICBlbHNlIGlmIChjcCA9PT0gJC5FT0YpIHtcbiAgICAgICAgdGhpcy5fZW1pdEN1cnJlbnRUb2tlbigpO1xuICAgICAgICB0aGlzLl9yZWNvbnN1bWVJblN0YXRlKERBVEFfU1RBVEUpO1xuICAgIH1cbn07XG5cblxuLy8xMi4yLjQuNjggQ0RBVEEgc2VjdGlvbiBzdGF0ZVxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbl9bQ0RBVEFfU0VDVElPTl9TVEFURV0gPSBmdW5jdGlvbiBjZGF0YVNlY3Rpb25TdGF0ZShjcCkge1xuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIGlmIChjcCA9PT0gJC5FT0YpIHtcbiAgICAgICAgICAgIHRoaXMuX3JlY29uc3VtZUluU3RhdGUoREFUQV9TVEFURSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmFyIGNkYXRhRW5kTWF0Y2ggPSB0aGlzLl9jb25zdW1lU3Vic2VxdWVudElmTWF0Y2goJCQuQ0RBVEFfRU5EX1NUUklORywgY3AsIHRydWUpO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5fZW5zdXJlSGliZXJuYXRpb24oKSlcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgaWYgKGNkYXRhRW5kTWF0Y2gpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gREFUQV9TVEFURTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5fZW1pdENvZGVQb2ludChjcCk7XG5cbiAgICAgICAgICAgIHRoaXMuX2hpYmVybmF0aW9uU25hcHNob3QoKTtcbiAgICAgICAgICAgIGNwID0gdGhpcy5fY29uc3VtZSgpO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5fZW5zdXJlSGliZXJuYXRpb24oKSlcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbn07XG4iXX0=