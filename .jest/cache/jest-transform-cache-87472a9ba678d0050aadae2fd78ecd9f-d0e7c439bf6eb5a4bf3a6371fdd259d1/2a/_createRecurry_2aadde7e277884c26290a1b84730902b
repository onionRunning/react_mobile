fb32b1790b455804b90cec08fa7663f1
var isLaziable = require('./_isLaziable'),
    setData = require('./_setData'),
    setWrapToString = require('./_setWrapToString');
/** Used to compose bitmasks for function metadata. */


var WRAP_BIND_FLAG = 1,
    WRAP_BIND_KEY_FLAG = 2,
    WRAP_CURRY_BOUND_FLAG = 4,
    WRAP_CURRY_FLAG = 8,
    WRAP_PARTIAL_FLAG = 32,
    WRAP_PARTIAL_RIGHT_FLAG = 64;
/**
 * Creates a function that wraps `func` to continue currying.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @param {Function} wrapFunc The function to create the `func` wrapper.
 * @param {*} placeholder The placeholder value.
 * @param {*} [thisArg] The `this` binding of `func`.
 * @param {Array} [partials] The arguments to prepend to those provided to
 *  the new function.
 * @param {Array} [holders] The `partials` placeholder indexes.
 * @param {Array} [argPos] The argument positions of the new function.
 * @param {number} [ary] The arity cap of `func`.
 * @param {number} [arity] The arity of `func`.
 * @returns {Function} Returns the new wrapped function.
 */

function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
  var isCurry = bitmask & WRAP_CURRY_FLAG,
      newHolders = isCurry ? holders : undefined,
      newHoldersRight = isCurry ? undefined : holders,
      newPartials = isCurry ? partials : undefined,
      newPartialsRight = isCurry ? undefined : partials;
  bitmask |= isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG;
  bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

  if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
    bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
  }

  var newData = [func, bitmask, thisArg, newPartials, newHolders, newPartialsRight, newHoldersRight, argPos, ary, arity];
  var result = wrapFunc.apply(undefined, newData);

  if (isLaziable(func)) {
    setData(result, newData);
  }

  result.placeholder = placeholder;
  return setWrapToString(result, func, bitmask);
}

module.exports = createRecurry;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIl9jcmVhdGVSZWN1cnJ5LmpzIl0sIm5hbWVzIjpbImlzTGF6aWFibGUiLCJyZXF1aXJlIiwic2V0RGF0YSIsInNldFdyYXBUb1N0cmluZyIsIldSQVBfQklORF9GTEFHIiwiV1JBUF9CSU5EX0tFWV9GTEFHIiwiV1JBUF9DVVJSWV9CT1VORF9GTEFHIiwiV1JBUF9DVVJSWV9GTEFHIiwiV1JBUF9QQVJUSUFMX0ZMQUciLCJXUkFQX1BBUlRJQUxfUklHSFRfRkxBRyIsImNyZWF0ZVJlY3VycnkiLCJmdW5jIiwiYml0bWFzayIsIndyYXBGdW5jIiwicGxhY2Vob2xkZXIiLCJ0aGlzQXJnIiwicGFydGlhbHMiLCJob2xkZXJzIiwiYXJnUG9zIiwiYXJ5IiwiYXJpdHkiLCJpc0N1cnJ5IiwibmV3SG9sZGVycyIsInVuZGVmaW5lZCIsIm5ld0hvbGRlcnNSaWdodCIsIm5ld1BhcnRpYWxzIiwibmV3UGFydGlhbHNSaWdodCIsIm5ld0RhdGEiLCJyZXN1bHQiLCJhcHBseSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBLElBQUlBLFVBQVUsR0FBR0MsT0FBTyxDQUFDLGVBQUQsQ0FBeEI7QUFBQSxJQUNJQyxPQUFPLEdBQUdELE9BQU8sQ0FBQyxZQUFELENBRHJCO0FBQUEsSUFFSUUsZUFBZSxHQUFHRixPQUFPLENBQUMsb0JBQUQsQ0FGN0I7QUFJQTs7O0FBQ0EsSUFBSUcsY0FBYyxHQUFHLENBQXJCO0FBQUEsSUFDSUMsa0JBQWtCLEdBQUcsQ0FEekI7QUFBQSxJQUVJQyxxQkFBcUIsR0FBRyxDQUY1QjtBQUFBLElBR0lDLGVBQWUsR0FBRyxDQUh0QjtBQUFBLElBSUlDLGlCQUFpQixHQUFHLEVBSnhCO0FBQUEsSUFLSUMsdUJBQXVCLEdBQUcsRUFMOUI7QUFPQTs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJBLFNBQVNDLGFBQVQsQ0FBdUJDLElBQXZCLEVBQTZCQyxPQUE3QixFQUFzQ0MsUUFBdEMsRUFBZ0RDLFdBQWhELEVBQTZEQyxPQUE3RCxFQUFzRUMsUUFBdEUsRUFBZ0ZDLE9BQWhGLEVBQXlGQyxNQUF6RixFQUFpR0MsR0FBakcsRUFBc0dDLEtBQXRHLEVBQTZHO0FBQzNHLE1BQUlDLE9BQU8sR0FBR1QsT0FBTyxHQUFHTCxlQUF4QjtBQUFBLE1BQ0llLFVBQVUsR0FBR0QsT0FBTyxHQUFHSixPQUFILEdBQWFNLFNBRHJDO0FBQUEsTUFFSUMsZUFBZSxHQUFHSCxPQUFPLEdBQUdFLFNBQUgsR0FBZU4sT0FGNUM7QUFBQSxNQUdJUSxXQUFXLEdBQUdKLE9BQU8sR0FBR0wsUUFBSCxHQUFjTyxTQUh2QztBQUFBLE1BSUlHLGdCQUFnQixHQUFHTCxPQUFPLEdBQUdFLFNBQUgsR0FBZVAsUUFKN0M7QUFNQUosRUFBQUEsT0FBTyxJQUFLUyxPQUFPLEdBQUdiLGlCQUFILEdBQXVCQyx1QkFBMUM7QUFDQUcsRUFBQUEsT0FBTyxJQUFJLEVBQUVTLE9BQU8sR0FBR1osdUJBQUgsR0FBNkJELGlCQUF0QyxDQUFYOztBQUVBLE1BQUksRUFBRUksT0FBTyxHQUFHTixxQkFBWixDQUFKLEVBQXdDO0FBQ3RDTSxJQUFBQSxPQUFPLElBQUksRUFBRVIsY0FBYyxHQUFHQyxrQkFBbkIsQ0FBWDtBQUNEOztBQUNELE1BQUlzQixPQUFPLEdBQUcsQ0FDWmhCLElBRFksRUFDTkMsT0FETSxFQUNHRyxPQURILEVBQ1lVLFdBRFosRUFDeUJILFVBRHpCLEVBQ3FDSSxnQkFEckMsRUFFWkYsZUFGWSxFQUVLTixNQUZMLEVBRWFDLEdBRmIsRUFFa0JDLEtBRmxCLENBQWQ7QUFLQSxNQUFJUSxNQUFNLEdBQUdmLFFBQVEsQ0FBQ2dCLEtBQVQsQ0FBZU4sU0FBZixFQUEwQkksT0FBMUIsQ0FBYjs7QUFDQSxNQUFJM0IsVUFBVSxDQUFDVyxJQUFELENBQWQsRUFBc0I7QUFDcEJULElBQUFBLE9BQU8sQ0FBQzBCLE1BQUQsRUFBU0QsT0FBVCxDQUFQO0FBQ0Q7O0FBQ0RDLEVBQUFBLE1BQU0sQ0FBQ2QsV0FBUCxHQUFxQkEsV0FBckI7QUFDQSxTQUFPWCxlQUFlLENBQUN5QixNQUFELEVBQVNqQixJQUFULEVBQWVDLE9BQWYsQ0FBdEI7QUFDRDs7QUFFRGtCLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQnJCLGFBQWpCIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGlzTGF6aWFibGUgPSByZXF1aXJlKCcuL19pc0xhemlhYmxlJyksXG4gICAgc2V0RGF0YSA9IHJlcXVpcmUoJy4vX3NldERhdGEnKSxcbiAgICBzZXRXcmFwVG9TdHJpbmcgPSByZXF1aXJlKCcuL19zZXRXcmFwVG9TdHJpbmcnKTtcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgZnVuY3Rpb24gbWV0YWRhdGEuICovXG52YXIgV1JBUF9CSU5EX0ZMQUcgPSAxLFxuICAgIFdSQVBfQklORF9LRVlfRkxBRyA9IDIsXG4gICAgV1JBUF9DVVJSWV9CT1VORF9GTEFHID0gNCxcbiAgICBXUkFQX0NVUlJZX0ZMQUcgPSA4LFxuICAgIFdSQVBfUEFSVElBTF9GTEFHID0gMzIsXG4gICAgV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUcgPSA2NDtcblxuLyoqXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCB3cmFwcyBgZnVuY2AgdG8gY29udGludWUgY3VycnlpbmcuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBjcmVhdGVXcmFwYCBmb3IgbW9yZSBkZXRhaWxzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gd3JhcEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNyZWF0ZSB0aGUgYGZ1bmNgIHdyYXBwZXIuXG4gKiBAcGFyYW0geyp9IHBsYWNlaG9sZGVyIFRoZSBwbGFjZWhvbGRlciB2YWx1ZS5cbiAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gKiBAcGFyYW0ge0FycmF5fSBbcGFydGlhbHNdIFRoZSBhcmd1bWVudHMgdG8gcHJlcGVuZCB0byB0aG9zZSBwcm92aWRlZCB0b1xuICogIHRoZSBuZXcgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge0FycmF5fSBbaG9sZGVyc10gVGhlIGBwYXJ0aWFsc2AgcGxhY2Vob2xkZXIgaW5kZXhlcy5cbiAqIEBwYXJhbSB7QXJyYXl9IFthcmdQb3NdIFRoZSBhcmd1bWVudCBwb3NpdGlvbnMgb2YgdGhlIG5ldyBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbYXJ5XSBUaGUgYXJpdHkgY2FwIG9mIGBmdW5jYC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbYXJpdHldIFRoZSBhcml0eSBvZiBgZnVuY2AuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB3cmFwcGVkIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBjcmVhdGVSZWN1cnJ5KGZ1bmMsIGJpdG1hc2ssIHdyYXBGdW5jLCBwbGFjZWhvbGRlciwgdGhpc0FyZywgcGFydGlhbHMsIGhvbGRlcnMsIGFyZ1BvcywgYXJ5LCBhcml0eSkge1xuICB2YXIgaXNDdXJyeSA9IGJpdG1hc2sgJiBXUkFQX0NVUlJZX0ZMQUcsXG4gICAgICBuZXdIb2xkZXJzID0gaXNDdXJyeSA/IGhvbGRlcnMgOiB1bmRlZmluZWQsXG4gICAgICBuZXdIb2xkZXJzUmlnaHQgPSBpc0N1cnJ5ID8gdW5kZWZpbmVkIDogaG9sZGVycyxcbiAgICAgIG5ld1BhcnRpYWxzID0gaXNDdXJyeSA/IHBhcnRpYWxzIDogdW5kZWZpbmVkLFxuICAgICAgbmV3UGFydGlhbHNSaWdodCA9IGlzQ3VycnkgPyB1bmRlZmluZWQgOiBwYXJ0aWFscztcblxuICBiaXRtYXNrIHw9IChpc0N1cnJ5ID8gV1JBUF9QQVJUSUFMX0ZMQUcgOiBXUkFQX1BBUlRJQUxfUklHSFRfRkxBRyk7XG4gIGJpdG1hc2sgJj0gfihpc0N1cnJ5ID8gV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUcgOiBXUkFQX1BBUlRJQUxfRkxBRyk7XG5cbiAgaWYgKCEoYml0bWFzayAmIFdSQVBfQ1VSUllfQk9VTkRfRkxBRykpIHtcbiAgICBiaXRtYXNrICY9IH4oV1JBUF9CSU5EX0ZMQUcgfCBXUkFQX0JJTkRfS0VZX0ZMQUcpO1xuICB9XG4gIHZhciBuZXdEYXRhID0gW1xuICAgIGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIG5ld1BhcnRpYWxzLCBuZXdIb2xkZXJzLCBuZXdQYXJ0aWFsc1JpZ2h0LFxuICAgIG5ld0hvbGRlcnNSaWdodCwgYXJnUG9zLCBhcnksIGFyaXR5XG4gIF07XG5cbiAgdmFyIHJlc3VsdCA9IHdyYXBGdW5jLmFwcGx5KHVuZGVmaW5lZCwgbmV3RGF0YSk7XG4gIGlmIChpc0xhemlhYmxlKGZ1bmMpKSB7XG4gICAgc2V0RGF0YShyZXN1bHQsIG5ld0RhdGEpO1xuICB9XG4gIHJlc3VsdC5wbGFjZWhvbGRlciA9IHBsYWNlaG9sZGVyO1xuICByZXR1cm4gc2V0V3JhcFRvU3RyaW5nKHJlc3VsdCwgZnVuYywgYml0bWFzayk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlUmVjdXJyeTtcbiJdfQ==