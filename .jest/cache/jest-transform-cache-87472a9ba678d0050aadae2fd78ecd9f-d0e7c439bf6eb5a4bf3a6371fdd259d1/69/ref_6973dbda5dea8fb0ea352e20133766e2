762553f49f95b3bd1d98c7e0e0d1eba1
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = require("react");

var _isPlainObject = _interopRequireDefault(require("./helpers/isPlainObject"));

var _wrapValidator = _interopRequireDefault(require("./helpers/wrapValidator"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

var isPrototypeOf = Object.prototype.isPrototypeOf;

function isNewRef(prop) {
  if (!(0, _isPlainObject["default"])(prop)) {
    return false;
  }

  var ownProperties = Object.keys(prop);
  return ownProperties.length === 1 && ownProperties[0] === 'current';
}

function isCallbackRef(prop) {
  return typeof prop === 'function' && !isPrototypeOf.call(_react.Component, prop) && (!_react.PureComponent || !isPrototypeOf.call(_react.PureComponent, prop));
}

function requiredRef(props, propName, componentName) {
  var propValue = props[propName];

  if (isCallbackRef(propValue) || isNewRef(propValue)) {
    return null;
  }

  return new TypeError("".concat(propName, " in ").concat(componentName, " must be a ref"));
}

function ref(props, propName, componentName) {
  var propValue = props[propName];

  if (propValue == null) {
    return null;
  }

  for (var _len = arguments.length, rest = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
    rest[_key - 3] = arguments[_key];
  }

  return requiredRef.apply(void 0, [props, propName, componentName].concat(rest));
}

ref.isRequired = requiredRef;

var _default = function _default() {
  return (0, _wrapValidator["default"])(ref, 'ref');
};

exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9yZWYuanMiXSwibmFtZXMiOlsiaXNQcm90b3R5cGVPZiIsIk9iamVjdCIsInByb3RvdHlwZSIsIm93blByb3BlcnRpZXMiLCJDb21wb25lbnQiLCJQdXJlQ29tcG9uZW50IiwicHJvcFZhbHVlIiwicHJvcHMiLCJpc0NhbGxiYWNrUmVmIiwiaXNOZXdSZWYiLCJyZXN0IiwicmVxdWlyZWRSZWYiLCJyZWYiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSxJQUFBLE1BQUEsR0FBQSxPQUFBLENBQUEsT0FBQSxDQUFBOztBQUNBLElBQUEsY0FBQSxHQUFBLHNCQUFBLENBQUEsT0FBQSxDQUFBLHlCQUFBLENBQUEsQ0FBQTs7QUFDQSxJQUFBLGNBQUEsR0FBQSxzQkFBQSxDQUFBLE9BQUEsQ0FBQSx5QkFBQSxDQUFBLENBQUE7Ozs7Ozs7O0lBRVFBLGEsR0FBa0JDLE1BQU0sQ0FBQ0MsU0FBUEQsQ0FBbEJELGE7O0FBRVIsU0FBQSxRQUFBLENBQUEsSUFBQSxFQUF3QjtBQUN0QixNQUFJLENBQUMsQ0FBQSxHQUFBLGNBQUEsQ0FBQSxTQUFBLENBQUEsRUFBTCxJQUFLLENBQUwsRUFBMEI7QUFDeEIsV0FBQSxLQUFBO0FBQ0Q7O0FBQ0QsTUFBTUcsYUFBYSxHQUFHRixNQUFNLENBQU5BLElBQUFBLENBQXRCLElBQXNCQSxDQUF0QjtBQUNBLFNBQU9FLGFBQWEsQ0FBYkEsTUFBQUEsS0FBQUEsQ0FBQUEsSUFBOEJBLGFBQWEsQ0FBYkEsQ0FBYSxDQUFiQSxLQUFyQyxTQUFBO0FBQ0Q7O0FBRUQsU0FBQSxhQUFBLENBQUEsSUFBQSxFQUE2QjtBQUMzQixTQUFPLE9BQUEsSUFBQSxLQUFBLFVBQUEsSUFDRixDQUFDSCxhQUFhLENBQWJBLElBQUFBLENBQW1CSSxNQUFBQSxDQUFuQkosU0FBQUEsRUFEQyxJQUNEQSxDQURDLEtBRUQsQ0FBQ0ssTUFBQUEsQ0FBRCxhQUFBLElBQWtCLENBQUNMLGFBQWEsQ0FBYkEsSUFBQUEsQ0FBbUJLLE1BQUFBLENBQW5CTCxhQUFBQSxFQUZ6QixJQUV5QkEsQ0FGbEIsQ0FBUDtBQUdEOztBQUVELFNBQUEsV0FBQSxDQUFBLEtBQUEsRUFBQSxRQUFBLEVBQUEsYUFBQSxFQUFxRDtBQUNuRCxNQUFNTSxTQUFTLEdBQUdDLEtBQUssQ0FBdkIsUUFBdUIsQ0FBdkI7O0FBRUEsTUFBSUMsYUFBYSxDQUFiQSxTQUFhLENBQWJBLElBQTRCQyxRQUFRLENBQXhDLFNBQXdDLENBQXhDLEVBQXFEO0FBQ25ELFdBQUEsSUFBQTtBQUNEOztBQUVELFNBQU8sSUFBQSxTQUFBLENBQUEsR0FBQSxNQUFBLENBQUEsUUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLENBQUEsYUFBQSxFQUFQLGdCQUFPLENBQUEsQ0FBUDtBQUNEOztBQUVELFNBQUEsR0FBQSxDQUFBLEtBQUEsRUFBQSxRQUFBLEVBQUEsYUFBQSxFQUFzRDtBQUNwRCxNQUFNSCxTQUFTLEdBQUdDLEtBQUssQ0FBdkIsUUFBdUIsQ0FBdkI7O0FBRUEsTUFBSUQsU0FBUyxJQUFiLElBQUEsRUFBdUI7QUFDckIsV0FBQSxJQUFBO0FBQ0Q7O0FBTG1ELE9BQUEsSUFBQSxJQUFBLEdBQUEsU0FBQSxDQUFBLE1BQUEsRUFBTkksSUFBTSxHQUFBLElBQUEsS0FBQSxDQUFBLElBQUEsR0FBQSxDQUFBLEdBQUEsSUFBQSxHQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsRUFBQSxJQUFBLEdBQUEsQ0FBQSxFQUFBLElBQUEsR0FBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLEVBQUE7QUFBTkEsSUFBQUEsSUFBTSxDQUFBLElBQUEsR0FBQSxDQUFBLENBQU5BLEdBQU0sU0FBQSxDQUFBLElBQUEsQ0FBTkE7QUFBTTs7QUFPcEQsU0FBT0MsV0FBVyxDQUFYQSxLQUFBQSxDQUFBQSxLQUFBQSxDQUFBQSxFQUFBQSxDQUFBQSxLQUFBQSxFQUFBQSxRQUFBQSxFQUFBQSxhQUFBQSxFQUFBQSxNQUFBQSxDQUFQLElBQU9BLENBQUFBLENBQVA7QUFDRDs7QUFFREMsR0FBRyxDQUFIQSxVQUFBQSxHQUFBQSxXQUFBQTs7ZUFFZSxTQUFBLFFBQUEsR0FBQTtBQUFBLFNBQU0sQ0FBQSxHQUFBLGNBQUEsQ0FBQSxTQUFBLENBQUEsRUFBQSxHQUFBLEVBQU4sS0FBTSxDQUFOIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBQdXJlQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IGlzUGxhaW5PYmplY3QgZnJvbSAnLi9oZWxwZXJzL2lzUGxhaW5PYmplY3QnO1xuaW1wb3J0IHdyYXBWYWxpZGF0b3IgZnJvbSAnLi9oZWxwZXJzL3dyYXBWYWxpZGF0b3InO1xuXG5jb25zdCB7IGlzUHJvdG90eXBlT2YgfSA9IE9iamVjdC5wcm90b3R5cGU7XG5cbmZ1bmN0aW9uIGlzTmV3UmVmKHByb3ApIHtcbiAgaWYgKCFpc1BsYWluT2JqZWN0KHByb3ApKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGNvbnN0IG93blByb3BlcnRpZXMgPSBPYmplY3Qua2V5cyhwcm9wKTtcbiAgcmV0dXJuIG93blByb3BlcnRpZXMubGVuZ3RoID09PSAxICYmIG93blByb3BlcnRpZXNbMF0gPT09ICdjdXJyZW50Jztcbn1cblxuZnVuY3Rpb24gaXNDYWxsYmFja1JlZihwcm9wKSB7XG4gIHJldHVybiB0eXBlb2YgcHJvcCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICYmICFpc1Byb3RvdHlwZU9mLmNhbGwoQ29tcG9uZW50LCBwcm9wKVxuICAgICYmICghUHVyZUNvbXBvbmVudCB8fCAhaXNQcm90b3R5cGVPZi5jYWxsKFB1cmVDb21wb25lbnQsIHByb3ApKTtcbn1cblxuZnVuY3Rpb24gcmVxdWlyZWRSZWYocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lKSB7XG4gIGNvbnN0IHByb3BWYWx1ZSA9IHByb3BzW3Byb3BOYW1lXTtcblxuICBpZiAoaXNDYWxsYmFja1JlZihwcm9wVmFsdWUpIHx8IGlzTmV3UmVmKHByb3BWYWx1ZSkpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiBuZXcgVHlwZUVycm9yKGAke3Byb3BOYW1lfSBpbiAke2NvbXBvbmVudE5hbWV9IG11c3QgYmUgYSByZWZgKTtcbn1cblxuZnVuY3Rpb24gcmVmKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgLi4ucmVzdCkge1xuICBjb25zdCBwcm9wVmFsdWUgPSBwcm9wc1twcm9wTmFtZV07XG5cbiAgaWYgKHByb3BWYWx1ZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gcmVxdWlyZWRSZWYocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCAuLi5yZXN0KTtcbn1cblxucmVmLmlzUmVxdWlyZWQgPSByZXF1aXJlZFJlZjtcblxuZXhwb3J0IGRlZmF1bHQgKCkgPT4gd3JhcFZhbGlkYXRvcihyZWYsICdyZWYnKTtcbiJdfQ==