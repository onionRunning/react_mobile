99256b08cfdfa7bb6cec66e96068ee74
var inverseXML = getInverseObj(require("../maps/xml.json")),
    xmlReplacer = getInverseReplacer(inverseXML);
exports.XML = getInverse(inverseXML, xmlReplacer);
var inverseHTML = getInverseObj(require("../maps/entities.json")),
    htmlReplacer = getInverseReplacer(inverseHTML);
exports.HTML = getInverse(inverseHTML, htmlReplacer);

function getInverseObj(obj) {
  return Object.keys(obj).sort().reduce(function (inverse, name) {
    inverse[obj[name]] = "&" + name + ";";
    return inverse;
  }, {});
}

function getInverseReplacer(inverse) {
  var single = [],
      multiple = [];
  Object.keys(inverse).forEach(function (k) {
    if (k.length === 1) {
      single.push("\\" + k);
    } else {
      multiple.push(k);
    }
  }); //TODO add ranges

  multiple.unshift("[" + single.join("") + "]");
  return new RegExp(multiple.join("|"), "g");
}

var re_nonASCII = /[^\0-\x7F]/g,
    re_astralSymbols = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;

function singleCharReplacer(c) {
  return "&#x" + c.charCodeAt(0).toString(16).toUpperCase() + ";";
}

function astralReplacer(c) {
  // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
  var high = c.charCodeAt(0);
  var low = c.charCodeAt(1);
  var codePoint = (high - 0xd800) * 0x400 + low - 0xdc00 + 0x10000;
  return "&#x" + codePoint.toString(16).toUpperCase() + ";";
}

function getInverse(inverse, re) {
  function func(name) {
    return inverse[name];
  }

  return function (data) {
    return data.replace(re, func).replace(re_astralSymbols, astralReplacer).replace(re_nonASCII, singleCharReplacer);
  };
}

var re_xmlChars = getInverseReplacer(inverseXML);

function escapeXML(data) {
  return data.replace(re_xmlChars, singleCharReplacer).replace(re_astralSymbols, astralReplacer).replace(re_nonASCII, singleCharReplacer);
}

exports.escape = escapeXML;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImVuY29kZS5qcyJdLCJuYW1lcyI6WyJpbnZlcnNlWE1MIiwiZ2V0SW52ZXJzZU9iaiIsInJlcXVpcmUiLCJ4bWxSZXBsYWNlciIsImdldEludmVyc2VSZXBsYWNlciIsImV4cG9ydHMiLCJYTUwiLCJnZXRJbnZlcnNlIiwiaW52ZXJzZUhUTUwiLCJodG1sUmVwbGFjZXIiLCJIVE1MIiwib2JqIiwiT2JqZWN0Iiwia2V5cyIsInNvcnQiLCJyZWR1Y2UiLCJpbnZlcnNlIiwibmFtZSIsInNpbmdsZSIsIm11bHRpcGxlIiwiZm9yRWFjaCIsImsiLCJsZW5ndGgiLCJwdXNoIiwidW5zaGlmdCIsImpvaW4iLCJSZWdFeHAiLCJyZV9ub25BU0NJSSIsInJlX2FzdHJhbFN5bWJvbHMiLCJzaW5nbGVDaGFyUmVwbGFjZXIiLCJjIiwiY2hhckNvZGVBdCIsInRvU3RyaW5nIiwidG9VcHBlckNhc2UiLCJhc3RyYWxSZXBsYWNlciIsImhpZ2giLCJsb3ciLCJjb2RlUG9pbnQiLCJyZSIsImZ1bmMiLCJkYXRhIiwicmVwbGFjZSIsInJlX3htbENoYXJzIiwiZXNjYXBlWE1MIiwiZXNjYXBlIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFJQSxVQUFVLEdBQUdDLGFBQWEsQ0FBQ0MsT0FBTyxDQUFDLGtCQUFELENBQVIsQ0FBOUI7QUFBQSxJQUNJQyxXQUFXLEdBQUdDLGtCQUFrQixDQUFDSixVQUFELENBRHBDO0FBR0FLLE9BQU8sQ0FBQ0MsR0FBUixHQUFjQyxVQUFVLENBQUNQLFVBQUQsRUFBYUcsV0FBYixDQUF4QjtBQUVBLElBQUlLLFdBQVcsR0FBR1AsYUFBYSxDQUFDQyxPQUFPLENBQUMsdUJBQUQsQ0FBUixDQUEvQjtBQUFBLElBQ0lPLFlBQVksR0FBR0wsa0JBQWtCLENBQUNJLFdBQUQsQ0FEckM7QUFHQUgsT0FBTyxDQUFDSyxJQUFSLEdBQWVILFVBQVUsQ0FBQ0MsV0FBRCxFQUFjQyxZQUFkLENBQXpCOztBQUVBLFNBQVNSLGFBQVQsQ0FBdUJVLEdBQXZCLEVBQTRC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OlsidmFyIGludmVyc2VYTUwgPSBnZXRJbnZlcnNlT2JqKHJlcXVpcmUoXCIuLi9tYXBzL3htbC5qc29uXCIpKSxcbiAgICB4bWxSZXBsYWNlciA9IGdldEludmVyc2VSZXBsYWNlcihpbnZlcnNlWE1MKTtcblxuZXhwb3J0cy5YTUwgPSBnZXRJbnZlcnNlKGludmVyc2VYTUwsIHhtbFJlcGxhY2VyKTtcblxudmFyIGludmVyc2VIVE1MID0gZ2V0SW52ZXJzZU9iaihyZXF1aXJlKFwiLi4vbWFwcy9lbnRpdGllcy5qc29uXCIpKSxcbiAgICBodG1sUmVwbGFjZXIgPSBnZXRJbnZlcnNlUmVwbGFjZXIoaW52ZXJzZUhUTUwpO1xuXG5leHBvcnRzLkhUTUwgPSBnZXRJbnZlcnNlKGludmVyc2VIVE1MLCBodG1sUmVwbGFjZXIpO1xuXG5mdW5jdGlvbiBnZXRJbnZlcnNlT2JqKG9iaikge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhvYmopXG4gICAgICAgIC5zb3J0KClcbiAgICAgICAgLnJlZHVjZShmdW5jdGlvbihpbnZlcnNlLCBuYW1lKSB7XG4gICAgICAgICAgICBpbnZlcnNlW29ialtuYW1lXV0gPSBcIiZcIiArIG5hbWUgKyBcIjtcIjtcbiAgICAgICAgICAgIHJldHVybiBpbnZlcnNlO1xuICAgICAgICB9LCB7fSk7XG59XG5cbmZ1bmN0aW9uIGdldEludmVyc2VSZXBsYWNlcihpbnZlcnNlKSB7XG4gICAgdmFyIHNpbmdsZSA9IFtdLFxuICAgICAgICBtdWx0aXBsZSA9IFtdO1xuXG4gICAgT2JqZWN0LmtleXMoaW52ZXJzZSkuZm9yRWFjaChmdW5jdGlvbihrKSB7XG4gICAgICAgIGlmIChrLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgc2luZ2xlLnB1c2goXCJcXFxcXCIgKyBrKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG11bHRpcGxlLnB1c2goayk7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vVE9ETyBhZGQgcmFuZ2VzXG4gICAgbXVsdGlwbGUudW5zaGlmdChcIltcIiArIHNpbmdsZS5qb2luKFwiXCIpICsgXCJdXCIpO1xuXG4gICAgcmV0dXJuIG5ldyBSZWdFeHAobXVsdGlwbGUuam9pbihcInxcIiksIFwiZ1wiKTtcbn1cblxudmFyIHJlX25vbkFTQ0lJID0gL1teXFwwLVxceDdGXS9nLFxuICAgIHJlX2FzdHJhbFN5bWJvbHMgPSAvW1xcdUQ4MDAtXFx1REJGRl1bXFx1REMwMC1cXHVERkZGXS9nO1xuXG5mdW5jdGlvbiBzaW5nbGVDaGFyUmVwbGFjZXIoYykge1xuICAgIHJldHVybiAoXG4gICAgICAgIFwiJiN4XCIgK1xuICAgICAgICBjXG4gICAgICAgICAgICAuY2hhckNvZGVBdCgwKVxuICAgICAgICAgICAgLnRvU3RyaW5nKDE2KVxuICAgICAgICAgICAgLnRvVXBwZXJDYXNlKCkgK1xuICAgICAgICBcIjtcIlxuICAgICk7XG59XG5cbmZ1bmN0aW9uIGFzdHJhbFJlcGxhY2VyKGMpIHtcbiAgICAvLyBodHRwOi8vbWF0aGlhc2J5bmVucy5iZS9ub3Rlcy9qYXZhc2NyaXB0LWVuY29kaW5nI3N1cnJvZ2F0ZS1mb3JtdWxhZVxuICAgIHZhciBoaWdoID0gYy5jaGFyQ29kZUF0KDApO1xuICAgIHZhciBsb3cgPSBjLmNoYXJDb2RlQXQoMSk7XG4gICAgdmFyIGNvZGVQb2ludCA9IChoaWdoIC0gMHhkODAwKSAqIDB4NDAwICsgbG93IC0gMHhkYzAwICsgMHgxMDAwMDtcbiAgICByZXR1cm4gXCImI3hcIiArIGNvZGVQb2ludC50b1N0cmluZygxNikudG9VcHBlckNhc2UoKSArIFwiO1wiO1xufVxuXG5mdW5jdGlvbiBnZXRJbnZlcnNlKGludmVyc2UsIHJlKSB7XG4gICAgZnVuY3Rpb24gZnVuYyhuYW1lKSB7XG4gICAgICAgIHJldHVybiBpbnZlcnNlW25hbWVdO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgIHJldHVybiBkYXRhXG4gICAgICAgICAgICAucmVwbGFjZShyZSwgZnVuYylcbiAgICAgICAgICAgIC5yZXBsYWNlKHJlX2FzdHJhbFN5bWJvbHMsIGFzdHJhbFJlcGxhY2VyKVxuICAgICAgICAgICAgLnJlcGxhY2UocmVfbm9uQVNDSUksIHNpbmdsZUNoYXJSZXBsYWNlcik7XG4gICAgfTtcbn1cblxudmFyIHJlX3htbENoYXJzID0gZ2V0SW52ZXJzZVJlcGxhY2VyKGludmVyc2VYTUwpO1xuXG5mdW5jdGlvbiBlc2NhcGVYTUwoZGF0YSkge1xuICAgIHJldHVybiBkYXRhXG4gICAgICAgIC5yZXBsYWNlKHJlX3htbENoYXJzLCBzaW5nbGVDaGFyUmVwbGFjZXIpXG4gICAgICAgIC5yZXBsYWNlKHJlX2FzdHJhbFN5bWJvbHMsIGFzdHJhbFJlcGxhY2VyKVxuICAgICAgICAucmVwbGFjZShyZV9ub25BU0NJSSwgc2luZ2xlQ2hhclJlcGxhY2VyKTtcbn1cblxuZXhwb3J0cy5lc2NhcGUgPSBlc2NhcGVYTUw7XG4iXX0=