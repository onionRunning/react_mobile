2be1b18064d02e5898aa500d3202c23d
var apply = require('./_apply'),
    createCtor = require('./_createCtor'),
    createHybrid = require('./_createHybrid'),
    createRecurry = require('./_createRecurry'),
    getHolder = require('./_getHolder'),
    replaceHolders = require('./_replaceHolders'),
    root = require('./_root');
/**
 * Creates a function that wraps `func` to enable currying.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @param {number} arity The arity of `func`.
 * @returns {Function} Returns the new wrapped function.
 */


function createCurry(func, bitmask, arity) {
  var Ctor = createCtor(func);

  function wrapper() {
    var length = arguments.length,
        args = Array(length),
        index = length,
        placeholder = getHolder(wrapper);

    while (index--) {
      args[index] = arguments[index];
    }

    var holders = length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder ? [] : replaceHolders(args, placeholder);
    length -= holders.length;

    if (length < arity) {
      return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, undefined, args, holders, undefined, undefined, arity - length);
    }

    var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
    return apply(fn, this, args);
  }

  return wrapper;
}

module.exports = createCurry;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIl9jcmVhdGVDdXJyeS5qcyJdLCJuYW1lcyI6WyJhcHBseSIsInJlcXVpcmUiLCJjcmVhdGVDdG9yIiwiY3JlYXRlSHlicmlkIiwiY3JlYXRlUmVjdXJyeSIsImdldEhvbGRlciIsInJlcGxhY2VIb2xkZXJzIiwicm9vdCIsImNyZWF0ZUN1cnJ5IiwiZnVuYyIsImJpdG1hc2siLCJhcml0eSIsIkN0b3IiLCJ3cmFwcGVyIiwibGVuZ3RoIiwiYXJndW1lbnRzIiwiYXJncyIsIkFycmF5IiwiaW5kZXgiLCJwbGFjZWhvbGRlciIsImhvbGRlcnMiLCJ1bmRlZmluZWQiLCJmbiIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBLElBQUlBLEtBQUssR0FBR0MsT0FBTyxDQUFDLFVBQUQsQ0FBbkI7QUFBQSxJQUNJQyxVQUFVLEdBQUdELE9BQU8sQ0FBQyxlQUFELENBRHhCO0FBQUEsSUFFSUUsWUFBWSxHQUFHRixPQUFPLENBQUMsaUJBQUQsQ0FGMUI7QUFBQSxJQUdJRyxhQUFhLEdBQUdILE9BQU8sQ0FBQyxrQkFBRCxDQUgzQjtBQUFBLElBSUlJLFNBQVMsR0FBR0osT0FBTyxDQUFDLGNBQUQsQ0FKdkI7QUFBQSxJQUtJSyxjQUFjLEdBQUdMLE9BQU8sQ0FBQyxtQkFBRCxDQUw1QjtBQUFBLElBTUlNLElBQUksR0FBR04sT0FBTyxDQUFDLFNBQUQsQ0FObEI7QUFRQTs7Ozs7Ozs7Ozs7QUFTQSxTQUFTTyxXQUFULENBQXFCQyxJQUFyQixFQUEyQkMsT0FBM0IsRUFBb0NDLEtBQXBDLEVBQTJDO0FBQ3pDLE1BQUlDLElBQUksR0FBR1YsVUFBVSxDQUFDTyxJQUFELENBQXJCOztBQUVBLFdBQVNJLE9BQVQsR0FBbUI7QUFDakIsUUFBSUMsTUFBTSxHQUFHQyxTQUFTLENBQUNELE1BQXZCO0FBQUEsUUFDSUUsSUFBSSxHQUFHQyxLQUFLLENBQUNILE1BQUQsQ0FEaEI7QUFBQSxRQUVJSSxLQUFLLEdBQUdKLE1BRlo7QUFBQSxRQUdJSyxXQUFXLEdBQUdkLFNBQVMsQ0FBQ1EsT0FBRCxDQUgzQjs7QUFLQSxXQUFPSyxLQUFLLEVBQVosRUFBZ0I7QUFDZEYsTUFBQUEsSUFBSSxDQUFDRSxLQUFELENBQUosR0FBY0gsU0FBUyxDQUFDRyxLQUFELENBQXZCO0FBQ0Q7O0FBQ0QsUUFBSUUsT0FBTyxHQUFJTixNQUFNLEdBQUcsQ0FBVCxJQUFjRSxJQUFJLENBQUMsQ0FBRCxDQUFKLEtBQVlHLFdBQTFCLElBQXlDSCxJQUFJLENBQUNGLE1BQU0sR0FBRyxDQUFWLENBQUosS0FBcUJLLFdBQS9ELEdBQ1YsRUFEVSxHQUVWYixjQUFjLENBQUNVLElBQUQsRUFBT0csV0FBUCxDQUZsQjtBQUlBTCxJQUFBQSxNQUFNLElBQUlNLE9BQU8sQ0FBQ04sTUFBbEI7O0FBQ0EsUUFBSUEsTUFBTSxHQUFHSCxLQUFiLEVBQW9CO0FBQ2xCLGFBQU9QLGFBQWEsQ0FDbEJLLElBRGtCLEVBQ1pDLE9BRFksRUFDSFAsWUFERyxFQUNXVSxPQUFPLENBQUNNLFdBRG5CLEVBQ2dDRSxTQURoQyxFQUVsQkwsSUFGa0IsRUFFWkksT0FGWSxFQUVIQyxTQUZHLEVBRVFBLFNBRlIsRUFFbUJWLEtBQUssR0FBR0csTUFGM0IsQ0FBcEI7QUFHRDs7QUFDRCxRQUFJUSxFQUFFLEdBQUksUUFBUSxTQUFTZixJQUFqQixJQUF5QixnQkFBZ0JNLE9BQTFDLEdBQXFERCxJQUFyRCxHQUE0REgsSUFBckU7QUFDQSxXQUFPVCxLQUFLLENBQUNzQixFQUFELEVBQUssSUFBTCxFQUFXTixJQUFYLENBQVo7QUFDRDs7QUFDRCxTQUFPSCxPQUFQO0FBQ0Q7O0FBRURVLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQmhCLFdBQWpCIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGFwcGx5ID0gcmVxdWlyZSgnLi9fYXBwbHknKSxcbiAgICBjcmVhdGVDdG9yID0gcmVxdWlyZSgnLi9fY3JlYXRlQ3RvcicpLFxuICAgIGNyZWF0ZUh5YnJpZCA9IHJlcXVpcmUoJy4vX2NyZWF0ZUh5YnJpZCcpLFxuICAgIGNyZWF0ZVJlY3VycnkgPSByZXF1aXJlKCcuL19jcmVhdGVSZWN1cnJ5JyksXG4gICAgZ2V0SG9sZGVyID0gcmVxdWlyZSgnLi9fZ2V0SG9sZGVyJyksXG4gICAgcmVwbGFjZUhvbGRlcnMgPSByZXF1aXJlKCcuL19yZXBsYWNlSG9sZGVycycpLFxuICAgIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgd3JhcHMgYGZ1bmNgIHRvIGVuYWJsZSBjdXJyeWluZy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGNyZWF0ZVdyYXBgIGZvciBtb3JlIGRldGFpbHMuXG4gKiBAcGFyYW0ge251bWJlcn0gYXJpdHkgVGhlIGFyaXR5IG9mIGBmdW5jYC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHdyYXBwZWQgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUN1cnJ5KGZ1bmMsIGJpdG1hc2ssIGFyaXR5KSB7XG4gIHZhciBDdG9yID0gY3JlYXRlQ3RvcihmdW5jKTtcblxuICBmdW5jdGlvbiB3cmFwcGVyKCkge1xuICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoLFxuICAgICAgICBhcmdzID0gQXJyYXkobGVuZ3RoKSxcbiAgICAgICAgaW5kZXggPSBsZW5ndGgsXG4gICAgICAgIHBsYWNlaG9sZGVyID0gZ2V0SG9sZGVyKHdyYXBwZXIpO1xuXG4gICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgIGFyZ3NbaW5kZXhdID0gYXJndW1lbnRzW2luZGV4XTtcbiAgICB9XG4gICAgdmFyIGhvbGRlcnMgPSAobGVuZ3RoIDwgMyAmJiBhcmdzWzBdICE9PSBwbGFjZWhvbGRlciAmJiBhcmdzW2xlbmd0aCAtIDFdICE9PSBwbGFjZWhvbGRlcilcbiAgICAgID8gW11cbiAgICAgIDogcmVwbGFjZUhvbGRlcnMoYXJncywgcGxhY2Vob2xkZXIpO1xuXG4gICAgbGVuZ3RoIC09IGhvbGRlcnMubGVuZ3RoO1xuICAgIGlmIChsZW5ndGggPCBhcml0eSkge1xuICAgICAgcmV0dXJuIGNyZWF0ZVJlY3VycnkoXG4gICAgICAgIGZ1bmMsIGJpdG1hc2ssIGNyZWF0ZUh5YnJpZCwgd3JhcHBlci5wbGFjZWhvbGRlciwgdW5kZWZpbmVkLFxuICAgICAgICBhcmdzLCBob2xkZXJzLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgYXJpdHkgLSBsZW5ndGgpO1xuICAgIH1cbiAgICB2YXIgZm4gPSAodGhpcyAmJiB0aGlzICE9PSByb290ICYmIHRoaXMgaW5zdGFuY2VvZiB3cmFwcGVyKSA/IEN0b3IgOiBmdW5jO1xuICAgIHJldHVybiBhcHBseShmbiwgdGhpcywgYXJncyk7XG4gIH1cbiAgcmV0dXJuIHdyYXBwZXI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlQ3Vycnk7XG4iXX0=