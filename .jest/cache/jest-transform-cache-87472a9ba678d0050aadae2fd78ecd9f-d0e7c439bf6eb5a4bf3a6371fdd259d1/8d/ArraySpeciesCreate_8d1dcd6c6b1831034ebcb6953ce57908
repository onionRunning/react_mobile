fe7c5ca5ef68ce61c49de298cea164a2
'use strict';

var GetIntrinsic = require('../GetIntrinsic');

var $Array = GetIntrinsic('%Array%');
var $species = GetIntrinsic('%Symbol.species%', true);
var $TypeError = GetIntrinsic('%TypeError%');

var Get = require('./Get');

var IsArray = require('./IsArray');

var IsConstructor = require('./IsConstructor');

var IsInteger = require('./IsInteger');

var Type = require('./Type'); // https://ecma-international.org/ecma-262/6.0/#sec-arrayspeciescreate


module.exports = function ArraySpeciesCreate(originalArray, length) {
  if (!IsInteger(length) || length < 0) {
    throw new $TypeError('Assertion failed: length must be an integer >= 0');
  }

  var len = length === 0 ? 0 : length;
  var C;
  var isArray = IsArray(originalArray);

  if (isArray) {
    C = Get(originalArray, 'constructor'); // TODO: figure out how to make a cross-realm normal Array, a same-realm Array
    // if (IsConstructor(C)) {
    // 	if C is another realm's Array, C = undefined
    // 	Object.getPrototypeOf(Object.getPrototypeOf(Object.getPrototypeOf(Array))) === null ?
    // }

    if ($species && Type(C) === 'Object') {
      C = Get(C, $species);

      if (C === null) {
        C = void 0;
      }
    }
  }

  if (typeof C === 'undefined') {
    return $Array(len);
  }

  if (!IsConstructor(C)) {
    throw new $TypeError('C must be a constructor');
  }

  return new C(len); // Construct(C, len);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkFycmF5U3BlY2llc0NyZWF0ZS5qcyJdLCJuYW1lcyI6WyJHZXRJbnRyaW5zaWMiLCJyZXF1aXJlIiwiJEFycmF5IiwiJHNwZWNpZXMiLCIkVHlwZUVycm9yIiwiR2V0IiwiSXNBcnJheSIsIklzQ29uc3RydWN0b3IiLCJJc0ludGVnZXIiLCJUeXBlIiwibW9kdWxlIiwiZXhwb3J0cyIsIkFycmF5U3BlY2llc0NyZWF0ZSIsIm9yaWdpbmFsQXJyYXkiLCJsZW5ndGgiLCJsZW4iLCJDIiwiaXNBcnJheSJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBSUEsWUFBWSxHQUFHQyxPQUFPLENBQUMsaUJBQUQsQ0FBMUI7O0FBRUEsSUFBSUMsTUFBTSxHQUFHRixZQUFZLENBQUMsU0FBRCxDQUF6QjtBQUNBLElBQUlHLFFBQVEsR0FBR0gsWUFBWSxDQUFDLGtCQUFELEVBQXFCLElBQXJCLENBQTNCO0FBQ0EsSUFBSUksVUFBVSxHQUFHSixZQUFZLENBQUMsYUFBRCxDQUE3Qjs7QUFFQSxJQUFJSyxHQUFHLEdBQUdKLE9BQU8sQ0FBQyxPQUFELENBQWpCOztBQUNBLElBQUlLLE9BQU8sR0FBR0wsT0FBTyxDQUFDLFdBQUQsQ0FBckI7O0FBQ0EsSUFBSU0sYUFBYSxHQUFHTixPQUFPLENBQUMsaUJBQUQsQ0FBM0I7O0FBQ0EsSUFBSU8sU0FBUyxHQUFHUCxPQUFPLENBQUMsYUFBRCxDQUF2Qjs7QUFDQSxJQUFJUSxJQUFJLEdBQUdSLE9BQU8sQ0FBQyxRQUFELENBQWxCLEMsQ0FFQTs7O0FBRUFTLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixTQUFTQyxrQkFBVCxDQUE0QkMsYUFBNUIsRUFBMkNDLE1BQTNDLEVBQW1EO0FBQ25FLE1BQUksQ0FBQ04sU0FBUyxDQUFDTSxNQUFELENBQVYsSUFBc0JBLE1BQU0sR0FBRyxDQUFuQyxFQUFzQztBQUNyQyxVQUFNLElBQUlWLFVBQUosQ0FBZSxrREFBZixDQUFOO0FBQ0E7O0FBQ0QsTUFBSVcsR0FBRyxHQUFHRCxNQUFNLEtBQUssQ0FBWCxHQUFlLENBQWYsR0FBbUJBLE1BQTdCO0FBQ0EsTUFBSUUsQ0FBSjtBQUNBLE1BQUlDLE9BQU8sR0FBR1gsT0FBTyxDQUFDTyxhQUFELENBQXJCOztBQUNBLE1BQUlJLE9BQUosRUFBYTtBQUNaRCxJQUFBQSxDQUFDLEdBQUdYLEdBQUcsQ0FBQ1EsYUFBRCxFQUFnQixhQUFoQixDQUFQLENBRFksQ0FFWjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBLFFBQUlWLFFBQVEsSUFBSU0sSUFBSSxDQUFDTyxDQUFELENBQUosS0FBWSxRQUE1QixFQUFzQztBQUNyQ0EsTUFBQUEsQ0FBQyxHQUFHWCxHQUFHLENBQUNXLENBQUQsRUFBSWIsUUFBSixDQUFQOztBQUNBLFVBQUlhLENBQUMsS0FBSyxJQUFWLEVBQWdCO0FBQ2ZBLFFBQUFBLENBQUMsR0FBRyxLQUFLLENBQVQ7QUFDQTtBQUNEO0FBQ0Q7O0FBQ0QsTUFBSSxPQUFPQSxDQUFQLEtBQWEsV0FBakIsRUFBOEI7QUFDN0IsV0FBT2QsTUFBTSxDQUFDYSxHQUFELENBQWI7QUFDQTs7QUFDRCxNQUFJLENBQUNSLGFBQWEsQ0FBQ1MsQ0FBRCxDQUFsQixFQUF1QjtBQUN0QixVQUFNLElBQUlaLFVBQUosQ0FBZSx5QkFBZixDQUFOO0FBQ0E7O0FBQ0QsU0FBTyxJQUFJWSxDQUFKLENBQU1ELEdBQU4sQ0FBUCxDQTNCbUUsQ0EyQmhEO0FBQ25CLENBNUJEIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnLi4vR2V0SW50cmluc2ljJyk7XG5cbnZhciAkQXJyYXkgPSBHZXRJbnRyaW5zaWMoJyVBcnJheSUnKTtcbnZhciAkc3BlY2llcyA9IEdldEludHJpbnNpYygnJVN5bWJvbC5zcGVjaWVzJScsIHRydWUpO1xudmFyICRUeXBlRXJyb3IgPSBHZXRJbnRyaW5zaWMoJyVUeXBlRXJyb3IlJyk7XG5cbnZhciBHZXQgPSByZXF1aXJlKCcuL0dldCcpO1xudmFyIElzQXJyYXkgPSByZXF1aXJlKCcuL0lzQXJyYXknKTtcbnZhciBJc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9Jc0NvbnN0cnVjdG9yJyk7XG52YXIgSXNJbnRlZ2VyID0gcmVxdWlyZSgnLi9Jc0ludGVnZXInKTtcbnZhciBUeXBlID0gcmVxdWlyZSgnLi9UeXBlJyk7XG5cbi8vIGh0dHBzOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1hcnJheXNwZWNpZXNjcmVhdGVcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBBcnJheVNwZWNpZXNDcmVhdGUob3JpZ2luYWxBcnJheSwgbGVuZ3RoKSB7XG5cdGlmICghSXNJbnRlZ2VyKGxlbmd0aCkgfHwgbGVuZ3RoIDwgMCkge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBsZW5ndGggbXVzdCBiZSBhbiBpbnRlZ2VyID49IDAnKTtcblx0fVxuXHR2YXIgbGVuID0gbGVuZ3RoID09PSAwID8gMCA6IGxlbmd0aDtcblx0dmFyIEM7XG5cdHZhciBpc0FycmF5ID0gSXNBcnJheShvcmlnaW5hbEFycmF5KTtcblx0aWYgKGlzQXJyYXkpIHtcblx0XHRDID0gR2V0KG9yaWdpbmFsQXJyYXksICdjb25zdHJ1Y3RvcicpO1xuXHRcdC8vIFRPRE86IGZpZ3VyZSBvdXQgaG93IHRvIG1ha2UgYSBjcm9zcy1yZWFsbSBub3JtYWwgQXJyYXksIGEgc2FtZS1yZWFsbSBBcnJheVxuXHRcdC8vIGlmIChJc0NvbnN0cnVjdG9yKEMpKSB7XG5cdFx0Ly8gXHRpZiBDIGlzIGFub3RoZXIgcmVhbG0ncyBBcnJheSwgQyA9IHVuZGVmaW5lZFxuXHRcdC8vIFx0T2JqZWN0LmdldFByb3RvdHlwZU9mKE9iamVjdC5nZXRQcm90b3R5cGVPZihPYmplY3QuZ2V0UHJvdG90eXBlT2YoQXJyYXkpKSkgPT09IG51bGwgP1xuXHRcdC8vIH1cblx0XHRpZiAoJHNwZWNpZXMgJiYgVHlwZShDKSA9PT0gJ09iamVjdCcpIHtcblx0XHRcdEMgPSBHZXQoQywgJHNwZWNpZXMpO1xuXHRcdFx0aWYgKEMgPT09IG51bGwpIHtcblx0XHRcdFx0QyA9IHZvaWQgMDtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0aWYgKHR5cGVvZiBDID09PSAndW5kZWZpbmVkJykge1xuXHRcdHJldHVybiAkQXJyYXkobGVuKTtcblx0fVxuXHRpZiAoIUlzQ29uc3RydWN0b3IoQykpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignQyBtdXN0IGJlIGEgY29uc3RydWN0b3InKTtcblx0fVxuXHRyZXR1cm4gbmV3IEMobGVuKTsgLy8gQ29uc3RydWN0KEMsIGxlbik7XG59O1xuXG4iXX0=