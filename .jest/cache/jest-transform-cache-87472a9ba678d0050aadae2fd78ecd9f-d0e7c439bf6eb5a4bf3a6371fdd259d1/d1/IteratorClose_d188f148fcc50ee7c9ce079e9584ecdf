a51db3a49da9ea00438354daece02a73
'use strict';

var GetIntrinsic = require('../GetIntrinsic');

var $TypeError = GetIntrinsic('%TypeError%');

var Call = require('./Call');

var GetMethod = require('./GetMethod');

var IsCallable = require('./IsCallable');

var Type = require('./Type'); // https://ecma-international.org/ecma-262/6.0/#sec-iteratorclose


module.exports = function IteratorClose(iterator, completion) {
  if (Type(iterator) !== 'Object') {
    throw new $TypeError('Assertion failed: Type(iterator) is not Object');
  }

  if (!IsCallable(completion)) {
    throw new $TypeError('Assertion failed: completion is not a thunk for a Completion Record');
  }

  var completionThunk = completion;
  var iteratorReturn = GetMethod(iterator, 'return');

  if (typeof iteratorReturn === 'undefined') {
    return completionThunk();
  }

  var completionRecord;

  try {
    var innerResult = Call(iteratorReturn, iterator, []);
  } catch (e) {
    // if we hit here, then "e" is the innerResult completion that needs re-throwing
    // if the completion is of type "throw", this will throw.
    completionThunk();
    completionThunk = null; // ensure it's not called twice.
    // if not, then return the innerResult completion

    throw e;
  }

  completionRecord = completionThunk(); // if innerResult worked, then throw if the completion does

  completionThunk = null; // ensure it's not called twice.

  if (Type(innerResult) !== 'Object') {
    throw new $TypeError('iterator .return must return an object');
  }

  return completionRecord;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkl0ZXJhdG9yQ2xvc2UuanMiXSwibmFtZXMiOlsiR2V0SW50cmluc2ljIiwicmVxdWlyZSIsIiRUeXBlRXJyb3IiLCJDYWxsIiwiR2V0TWV0aG9kIiwiSXNDYWxsYWJsZSIsIlR5cGUiLCJtb2R1bGUiLCJleHBvcnRzIiwiSXRlcmF0b3JDbG9zZSIsIml0ZXJhdG9yIiwiY29tcGxldGlvbiIsImNvbXBsZXRpb25UaHVuayIsIml0ZXJhdG9yUmV0dXJuIiwiY29tcGxldGlvblJlY29yZCIsImlubmVyUmVzdWx0IiwiZSJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBSUEsWUFBWSxHQUFHQyxPQUFPLENBQUMsaUJBQUQsQ0FBMUI7O0FBRUEsSUFBSUMsVUFBVSxHQUFHRixZQUFZLENBQUMsYUFBRCxDQUE3Qjs7QUFFQSxJQUFJRyxJQUFJLEdBQUdGLE9BQU8sQ0FBQyxRQUFELENBQWxCOztBQUNBLElBQUlHLFNBQVMsR0FBR0gsT0FBTyxDQUFDLGFBQUQsQ0FBdkI7O0FBQ0EsSUFBSUksVUFBVSxHQUFHSixPQUFPLENBQUMsY0FBRCxDQUF4Qjs7QUFDQSxJQUFJSyxJQUFJLEdBQUdMLE9BQU8sQ0FBQyxRQUFELENBQWxCLEMsQ0FFQTs7O0FBRUFNLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixTQUFTQyxhQUFULENBQXVCQyxRQUF2QixFQUFpQ0MsVUFBakMsRUFBNkM7QUFDN0QsTUFBSUwsSUFBSSxDQUFDSSxRQUFELENBQUosS0FBbUIsUUFBdkIsRUFBaUM7QUFDaEMsVUFBTSxJQUFJUixVQUFKLENBQWUsZ0RBQWYsQ0FBTjtBQUNBOztBQUNELE1BQUksQ0FBQ0csVUFBVSxDQUFDTSxVQUFELENBQWYsRUFBNkI7QUFDNUIsVUFBTSxJQUFJVCxVQUFKLENBQWUscUVBQWYsQ0FBTjtBQUNBOztBQUNELE1BQUlVLGVBQWUsR0FBR0QsVUFBdEI7QUFFQSxNQUFJRSxjQUFjLEdBQUdULFNBQVMsQ0FBQ00sUUFBRCxFQUFXLFFBQVgsQ0FBOUI7O0FBRUEsTUFBSSxPQUFPRyxjQUFQLEtBQTBCLFdBQTlCLEVBQTJDO0FBQzFDLFdBQU9ELGVBQWUsRUFBdEI7QUFDQTs7QUFFRCxNQUFJRSxnQkFBSjs7QUFDQSxNQUFJO0FBQ0gsUUFBSUMsV0FBVyxHQUFHWixJQUFJLENBQUNVLGNBQUQsRUFBaUJILFFBQWpCLEVBQTJCLEVBQTNCLENBQXRCO0FBQ0EsR0FGRCxDQUVFLE9BQU9NLENBQVAsRUFBVTtBQUNYO0FBRUE7QUFDQUosSUFBQUEsZUFBZTtBQUNmQSxJQUFBQSxlQUFlLEdBQUcsSUFBbEIsQ0FMVyxDQUthO0FBRXhCOztBQUNBLFVBQU1JLENBQU47QUFDQTs7QUFDREYsRUFBQUEsZ0JBQWdCLEdBQUdGLGVBQWUsRUFBbEMsQ0E1QjZELENBNEJ2Qjs7QUFDdENBLEVBQUFBLGVBQWUsR0FBRyxJQUFsQixDQTdCNkQsQ0E2QnJDOztBQUV4QixNQUFJTixJQUFJLENBQUNTLFdBQUQsQ0FBSixLQUFzQixRQUExQixFQUFvQztBQUNuQyxVQUFNLElBQUliLFVBQUosQ0FBZSx3Q0FBZixDQUFOO0FBQ0E7O0FBRUQsU0FBT1ksZ0JBQVA7QUFDQSxDQXBDRCIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJy4uL0dldEludHJpbnNpYycpO1xuXG52YXIgJFR5cGVFcnJvciA9IEdldEludHJpbnNpYygnJVR5cGVFcnJvciUnKTtcblxudmFyIENhbGwgPSByZXF1aXJlKCcuL0NhbGwnKTtcbnZhciBHZXRNZXRob2QgPSByZXF1aXJlKCcuL0dldE1ldGhvZCcpO1xudmFyIElzQ2FsbGFibGUgPSByZXF1aXJlKCcuL0lzQ2FsbGFibGUnKTtcbnZhciBUeXBlID0gcmVxdWlyZSgnLi9UeXBlJyk7XG5cbi8vIGh0dHBzOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1pdGVyYXRvcmNsb3NlXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gSXRlcmF0b3JDbG9zZShpdGVyYXRvciwgY29tcGxldGlvbikge1xuXHRpZiAoVHlwZShpdGVyYXRvcikgIT09ICdPYmplY3QnKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0Fzc2VydGlvbiBmYWlsZWQ6IFR5cGUoaXRlcmF0b3IpIGlzIG5vdCBPYmplY3QnKTtcblx0fVxuXHRpZiAoIUlzQ2FsbGFibGUoY29tcGxldGlvbikpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignQXNzZXJ0aW9uIGZhaWxlZDogY29tcGxldGlvbiBpcyBub3QgYSB0aHVuayBmb3IgYSBDb21wbGV0aW9uIFJlY29yZCcpO1xuXHR9XG5cdHZhciBjb21wbGV0aW9uVGh1bmsgPSBjb21wbGV0aW9uO1xuXG5cdHZhciBpdGVyYXRvclJldHVybiA9IEdldE1ldGhvZChpdGVyYXRvciwgJ3JldHVybicpO1xuXG5cdGlmICh0eXBlb2YgaXRlcmF0b3JSZXR1cm4gPT09ICd1bmRlZmluZWQnKSB7XG5cdFx0cmV0dXJuIGNvbXBsZXRpb25UaHVuaygpO1xuXHR9XG5cblx0dmFyIGNvbXBsZXRpb25SZWNvcmQ7XG5cdHRyeSB7XG5cdFx0dmFyIGlubmVyUmVzdWx0ID0gQ2FsbChpdGVyYXRvclJldHVybiwgaXRlcmF0b3IsIFtdKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdC8vIGlmIHdlIGhpdCBoZXJlLCB0aGVuIFwiZVwiIGlzIHRoZSBpbm5lclJlc3VsdCBjb21wbGV0aW9uIHRoYXQgbmVlZHMgcmUtdGhyb3dpbmdcblxuXHRcdC8vIGlmIHRoZSBjb21wbGV0aW9uIGlzIG9mIHR5cGUgXCJ0aHJvd1wiLCB0aGlzIHdpbGwgdGhyb3cuXG5cdFx0Y29tcGxldGlvblRodW5rKCk7XG5cdFx0Y29tcGxldGlvblRodW5rID0gbnVsbDsgLy8gZW5zdXJlIGl0J3Mgbm90IGNhbGxlZCB0d2ljZS5cblxuXHRcdC8vIGlmIG5vdCwgdGhlbiByZXR1cm4gdGhlIGlubmVyUmVzdWx0IGNvbXBsZXRpb25cblx0XHR0aHJvdyBlO1xuXHR9XG5cdGNvbXBsZXRpb25SZWNvcmQgPSBjb21wbGV0aW9uVGh1bmsoKTsgLy8gaWYgaW5uZXJSZXN1bHQgd29ya2VkLCB0aGVuIHRocm93IGlmIHRoZSBjb21wbGV0aW9uIGRvZXNcblx0Y29tcGxldGlvblRodW5rID0gbnVsbDsgLy8gZW5zdXJlIGl0J3Mgbm90IGNhbGxlZCB0d2ljZS5cblxuXHRpZiAoVHlwZShpbm5lclJlc3VsdCkgIT09ICdPYmplY3QnKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ2l0ZXJhdG9yIC5yZXR1cm4gbXVzdCByZXR1cm4gYW4gb2JqZWN0Jyk7XG5cdH1cblxuXHRyZXR1cm4gY29tcGxldGlvblJlY29yZDtcbn07XG4iXX0=