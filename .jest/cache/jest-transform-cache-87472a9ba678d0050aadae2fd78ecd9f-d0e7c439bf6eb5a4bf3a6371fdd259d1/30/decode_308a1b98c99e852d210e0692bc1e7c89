b62c41105403672975b7726d4aaf93be
var entityMap = require("../maps/entities.json"),
    legacyMap = require("../maps/legacy.json"),
    xmlMap = require("../maps/xml.json"),
    decodeCodePoint = require("./decode_codepoint.js");

var decodeXMLStrict = getStrictDecoder(xmlMap),
    decodeHTMLStrict = getStrictDecoder(entityMap);

function getStrictDecoder(map) {
  var keys = Object.keys(map).join("|"),
      replace = getReplacer(map);
  keys += "|#[xX][\\da-fA-F]+|#\\d+";
  var re = new RegExp("&(?:" + keys + ");", "g");
  return function (str) {
    return String(str).replace(re, replace);
  };
}

var decodeHTML = function () {
  var legacy = Object.keys(legacyMap).sort(sorter);
  var keys = Object.keys(entityMap).sort(sorter);

  for (var i = 0, j = 0; i < keys.length; i++) {
    if (legacy[j] === keys[i]) {
      keys[i] += ";?";
      j++;
    } else {
      keys[i] += ";";
    }
  }

  var re = new RegExp("&(?:" + keys.join("|") + "|#[xX][\\da-fA-F]+;?|#\\d+;?)", "g"),
      replace = getReplacer(entityMap);

  function replacer(str) {
    if (str.substr(-1) !== ";") str += ";";
    return replace(str);
  } //TODO consider creating a merged map


  return function (str) {
    return String(str).replace(re, replacer);
  };
}();

function sorter(a, b) {
  return a < b ? 1 : -1;
}

function getReplacer(map) {
  return function replace(str) {
    if (str.charAt(1) === "#") {
      if (str.charAt(2) === "X" || str.charAt(2) === "x") {
        return decodeCodePoint(parseInt(str.substr(3), 16));
      }

      return decodeCodePoint(parseInt(str.substr(2), 10));
    }

    return map[str.slice(1, -1)];
  };
}

module.exports = {
  XML: decodeXMLStrict,
  HTML: decodeHTML,
  HTMLStrict: decodeHTMLStrict
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRlY29kZS5qcyJdLCJuYW1lcyI6WyJlbnRpdHlNYXAiLCJyZXF1aXJlIiwibGVnYWN5TWFwIiwieG1sTWFwIiwiZGVjb2RlQ29kZVBvaW50IiwiZGVjb2RlWE1MU3RyaWN0IiwiZ2V0U3RyaWN0RGVjb2RlciIsImRlY29kZUhUTUxTdHJpY3QiLCJtYXAiLCJrZXlzIiwiT2JqZWN0Iiwiam9pbiIsInJlcGxhY2UiLCJnZXRSZXBsYWNlciIsInJlIiwiUmVnRXhwIiwic3RyIiwiU3RyaW5nIiwiZGVjb2RlSFRNTCIsImxlZ2FjeSIsInNvcnQiLCJzb3J0ZXIiLCJpIiwiaiIsImxlbmd0aCIsInJlcGxhY2VyIiwic3Vic3RyIiwiYSIsImIiLCJjaGFyQXQiLCJwYXJzZUludCIsInNsaWNlIiwibW9kdWxlIiwiZXhwb3J0cyIsIlhNTCIsIkhUTUwiLCJIVE1MU3RyaWN0Il0sIm1hcHBpbmdzIjoiQUFBQSxJQUFJQSxTQUFTLEdBQUdDLE9BQU8sQ0FBQyx1QkFBRCxDQUF2QjtBQUFBLElBQ0lDLFNBQVMsR0FBR0QsT0FBTyxDQUFDLHFCQUFELENBRHZCO0FBQUEsSUFFSUUsTUFBTSxHQUFHRixPQUFPLENBQUMsa0JBQUQsQ0FGcEI7QUFBQSxJQUdJRyxlQUFlLEdBQUdILE9BQU8sQ0FBQyx1QkFBRCxDQUg3Qjs7QUFLQSxJQUFJSSxlQUFlLEdBQUdDLGdCQUFnQixDQUFDSCxNQUFELENBQXRDO0FBQUEsSUFDSUksZ0JBQWdCLEdBQUdELGdCQUFnQixDQUFDTixTQUFELENBRHZDOztBQUdBLFNBQVNNLGdCQUFULENBQTBCRSxHQUExQixFQUErQjtBQUMzQixNQUFJQyxJQUFJLEdBQUdDLE1BQU0sQ0FBQ0QsSUFBUCxDQUFZRCxHQUFaLEVBQWlCRyxJQUFqQixDQUFzQixHQUF0QixDQUFYO0FBQUEsTUFDSUMsT0FBTyxHQUFHQyxXQUFXLENBQUNMLEdBQUQsQ0FEekI7QUFHQUMsRUFBQUEsSUFBSSxJQUFJLDBCQUFSO0FBRUEsTUFBSUssRUFBRSxHQUFHLElBQUlD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RUFBQUEsSUFBSSxFQUFFakIsVUFGTztBQUdia0IsRUFBQUEsVUFBVSxFQUFFN0I7QUFIQyxDQUFqQiIsInNvdXJjZXNDb250ZW50IjpbInZhciBlbnRpdHlNYXAgPSByZXF1aXJlKFwiLi4vbWFwcy9lbnRpdGllcy5qc29uXCIpLFxuICAgIGxlZ2FjeU1hcCA9IHJlcXVpcmUoXCIuLi9tYXBzL2xlZ2FjeS5qc29uXCIpLFxuICAgIHhtbE1hcCA9IHJlcXVpcmUoXCIuLi9tYXBzL3htbC5qc29uXCIpLFxuICAgIGRlY29kZUNvZGVQb2ludCA9IHJlcXVpcmUoXCIuL2RlY29kZV9jb2RlcG9pbnQuanNcIik7XG5cbnZhciBkZWNvZGVYTUxTdHJpY3QgPSBnZXRTdHJpY3REZWNvZGVyKHhtbE1hcCksXG4gICAgZGVjb2RlSFRNTFN0cmljdCA9IGdldFN0cmljdERlY29kZXIoZW50aXR5TWFwKTtcblxuZnVuY3Rpb24gZ2V0U3RyaWN0RGVjb2RlcihtYXApIHtcbiAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG1hcCkuam9pbihcInxcIiksXG4gICAgICAgIHJlcGxhY2UgPSBnZXRSZXBsYWNlcihtYXApO1xuXG4gICAga2V5cyArPSBcInwjW3hYXVtcXFxcZGEtZkEtRl0rfCNcXFxcZCtcIjtcblxuICAgIHZhciByZSA9IG5ldyBSZWdFeHAoXCImKD86XCIgKyBrZXlzICsgXCIpO1wiLCBcImdcIik7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24oc3RyKSB7XG4gICAgICAgIHJldHVybiBTdHJpbmcoc3RyKS5yZXBsYWNlKHJlLCByZXBsYWNlKTtcbiAgICB9O1xufVxuXG52YXIgZGVjb2RlSFRNTCA9IChmdW5jdGlvbigpIHtcbiAgICB2YXIgbGVnYWN5ID0gT2JqZWN0LmtleXMobGVnYWN5TWFwKS5zb3J0KHNvcnRlcik7XG5cbiAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGVudGl0eU1hcCkuc29ydChzb3J0ZXIpO1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIGogPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAobGVnYWN5W2pdID09PSBrZXlzW2ldKSB7XG4gICAgICAgICAgICBrZXlzW2ldICs9IFwiOz9cIjtcbiAgICAgICAgICAgIGorKztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGtleXNbaV0gKz0gXCI7XCI7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcmUgPSBuZXcgUmVnRXhwKFwiJig/OlwiICsga2V5cy5qb2luKFwifFwiKSArIFwifCNbeFhdW1xcXFxkYS1mQS1GXSs7P3wjXFxcXGQrOz8pXCIsIFwiZ1wiKSxcbiAgICAgICAgcmVwbGFjZSA9IGdldFJlcGxhY2VyKGVudGl0eU1hcCk7XG5cbiAgICBmdW5jdGlvbiByZXBsYWNlcihzdHIpIHtcbiAgICAgICAgaWYgKHN0ci5zdWJzdHIoLTEpICE9PSBcIjtcIikgc3RyICs9IFwiO1wiO1xuICAgICAgICByZXR1cm4gcmVwbGFjZShzdHIpO1xuICAgIH1cblxuICAgIC8vVE9ETyBjb25zaWRlciBjcmVhdGluZyBhIG1lcmdlZCBtYXBcbiAgICByZXR1cm4gZnVuY3Rpb24oc3RyKSB7XG4gICAgICAgIHJldHVybiBTdHJpbmcoc3RyKS5yZXBsYWNlKHJlLCByZXBsYWNlcik7XG4gICAgfTtcbn0pKCk7XG5cbmZ1bmN0aW9uIHNvcnRlcihhLCBiKSB7XG4gICAgcmV0dXJuIGEgPCBiID8gMSA6IC0xO1xufVxuXG5mdW5jdGlvbiBnZXRSZXBsYWNlcihtYXApIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gcmVwbGFjZShzdHIpIHtcbiAgICAgICAgaWYgKHN0ci5jaGFyQXQoMSkgPT09IFwiI1wiKSB7XG4gICAgICAgICAgICBpZiAoc3RyLmNoYXJBdCgyKSA9PT0gXCJYXCIgfHwgc3RyLmNoYXJBdCgyKSA9PT0gXCJ4XCIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZGVjb2RlQ29kZVBvaW50KHBhcnNlSW50KHN0ci5zdWJzdHIoMyksIDE2KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZGVjb2RlQ29kZVBvaW50KHBhcnNlSW50KHN0ci5zdWJzdHIoMiksIDEwKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1hcFtzdHIuc2xpY2UoMSwgLTEpXTtcbiAgICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBYTUw6IGRlY29kZVhNTFN0cmljdCxcbiAgICBIVE1MOiBkZWNvZGVIVE1MLFxuICAgIEhUTUxTdHJpY3Q6IGRlY29kZUhUTUxTdHJpY3Rcbn07XG4iXX0=