f0e741fd4c81dfdc0f90ae00aabc654d
'use strict';

var GetIntrinsic = require('../GetIntrinsic');

var $TypeError = GetIntrinsic('%TypeError%');

var DefineOwnProperty = require('../helpers/DefineOwnProperty');

var FromPropertyDescriptor = require('./FromPropertyDescriptor');

var OrdinaryGetOwnProperty = require('./OrdinaryGetOwnProperty');

var IsDataDescriptor = require('./IsDataDescriptor');

var IsExtensible = require('./IsExtensible');

var IsPropertyKey = require('./IsPropertyKey');

var SameValue = require('./SameValue');

var Type = require('./Type'); // https://www.ecma-international.org/ecma-262/6.0/#sec-createdataproperty


module.exports = function CreateDataProperty(O, P, V) {
  if (Type(O) !== 'Object') {
    throw new $TypeError('Assertion failed: Type(O) is not Object');
  }

  if (!IsPropertyKey(P)) {
    throw new $TypeError('Assertion failed: IsPropertyKey(P) is not true');
  }

  var oldDesc = OrdinaryGetOwnProperty(O, P);
  var extensible = !oldDesc || IsExtensible(O);
  var immutable = oldDesc && (!oldDesc['[[Writable]]'] || !oldDesc['[[Configurable]]']);

  if (immutable || !extensible) {
    return false;
  }

  return DefineOwnProperty(IsDataDescriptor, SameValue, FromPropertyDescriptor, O, P, {
    '[[Configurable]]': true,
    '[[Enumerable]]': true,
    '[[Value]]': V,
    '[[Writable]]': true
  });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNyZWF0ZURhdGFQcm9wZXJ0eS5qcyJdLCJuYW1lcyI6WyJHZXRJbnRyaW5zaWMiLCJyZXF1aXJlIiwiJFR5cGVFcnJvciIsIkRlZmluZU93blByb3BlcnR5IiwiRnJvbVByb3BlcnR5RGVzY3JpcHRvciIsIk9yZGluYXJ5R2V0T3duUHJvcGVydHkiLCJJc0RhdGFEZXNjcmlwdG9yIiwiSXNFeHRlbnNpYmxlIiwiSXNQcm9wZXJ0eUtleSIsIlNhbWVWYWx1ZSIsIlR5cGUiLCJtb2R1bGUiLCJleHBvcnRzIiwiQ3JlYXRlRGF0YVByb3BlcnR5IiwiTyIsIlAiLCJWIiwib2xkRGVzYyIsImV4dGVuc2libGUiLCJpbW11dGFibGUiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQUlBLFlBQVksR0FBR0MsT0FBTyxDQUFDLGlCQUFELENBQTFCOztBQUVBLElBQUlDLFVBQVUsR0FBR0YsWUFBWSxDQUFDLGFBQUQsQ0FBN0I7O0FBRUEsSUFBSUcsaUJBQWlCLEdBQUdGLE9BQU8sQ0FBQyw4QkFBRCxDQUEvQjs7QUFFQSxJQUFJRyxzQkFBc0IsR0FBR0gsT0FBTyxDQUFDLDBCQUFELENBQXBDOztBQUNBLElBQUlJLHNCQUFzQixHQUFHSixPQUFPLENBQUMsMEJBQUQsQ0FBcEM7O0FBQ0EsSUFBSUssZ0JBQWdCLEdBQUdMLE9BQU8sQ0FBQyxvQkFBRCxDQUE5Qjs7QUFDQSxJQUFJTSxZQUFZLEdBQUdOLE9BQU8sQ0FBQyxnQkFBRCxDQUExQjs7QUFDQSxJQUFJTyxhQUFhLEdBQUdQLE9BQU8sQ0FBQyxpQkFBRCxDQUEzQjs7QUFDQSxJQUFJUSxTQUFTLEdBQUdSLE9BQU8sQ0FBQyxhQUFELENBQXZCOztBQUNBLElBQUlTLElBQUksR0FBR1QsT0FBTyxDQUFDLFFBQUQsQ0FBbEIsQyxDQUVBOzs7QUFFQVUsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLFNBQVNDLGtCQUFULENBQTRCQyxDQUE1QixFQUErQkMsQ0FBL0IsRUFBa0NDLENBQWxDLEVBQXFDO0FBQ3JELE1BQUlOLElBQUksQ0FBQ0ksQ0FBRCxDQUFKLEtBQVksUUFBaEIsRUFBMEI7QUFDekIsVUFBTSxJQUFJWixVQUFKLENBQWUseUNBQWYsQ0FBTjtBQUNBOztBQUNELE1BQUksQ0FBQ00sYUFBYSxDQUFDTyxDQUFELENBQWxCLEVBQXVCO0FBQ3RCLFVBQU0sSUFBSWIsVUFBSixDQUFlLGdEQUFmLENBQU47QUFDQTs7QUFDRCxNQUFJZSxPQUFPLEdBQUdaLHNCQUFzQixDQUFDUyxDQUFELEVBQUlDLENBQUosQ0FBcEM7QUFDQSxNQUFJRyxVQUFVLEdBQUcsQ0FBQ0QsT0FBRCxJQUFZVixZQUFZLENBQUNPLENBQUQsQ0FBekM7QUFDQSxNQUFJSyxTQUFTLEdBQUdGLE9BQU8sS0FBSyxDQUFDQSxPQUFPLENBQUMsY0FBRCxDQUFSLElBQTRCLENBQUNBLE9BQU8sQ0FBQyxrQkFBRCxDQUF6QyxDQUF2Qjs7QUFDQSxNQUFJRSxTQUFTLElBQUksQ0FBQ0QsVUFBbEIsRUFBOEI7QUFDN0IsV0FBTyxLQUFQO0FBQ0E7O0FBQ0QsU0FBT2YsaUJBQWlCLENBQ3ZCRyxnQkFEdUIsRUFFdkJHLFNBRnVCLEVBR3ZCTCxzQkFIdUIsRUFJdkJVLENBSnVCLEVBS3ZCQyxDQUx1QixFQU12QjtBQUNDLHdCQUFvQixJQURyQjtBQUVDLHNCQUFrQixJQUZuQjtBQUdDLGlCQUFhQyxDQUhkO0FBSUMsb0JBQWdCO0FBSmpCLEdBTnVCLENBQXhCO0FBYUEsQ0ExQkQiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCcuLi9HZXRJbnRyaW5zaWMnKTtcblxudmFyICRUeXBlRXJyb3IgPSBHZXRJbnRyaW5zaWMoJyVUeXBlRXJyb3IlJyk7XG5cbnZhciBEZWZpbmVPd25Qcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvRGVmaW5lT3duUHJvcGVydHknKTtcblxudmFyIEZyb21Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuL0Zyb21Qcm9wZXJ0eURlc2NyaXB0b3InKTtcbnZhciBPcmRpbmFyeUdldE93blByb3BlcnR5ID0gcmVxdWlyZSgnLi9PcmRpbmFyeUdldE93blByb3BlcnR5Jyk7XG52YXIgSXNEYXRhRGVzY3JpcHRvciA9IHJlcXVpcmUoJy4vSXNEYXRhRGVzY3JpcHRvcicpO1xudmFyIElzRXh0ZW5zaWJsZSA9IHJlcXVpcmUoJy4vSXNFeHRlbnNpYmxlJyk7XG52YXIgSXNQcm9wZXJ0eUtleSA9IHJlcXVpcmUoJy4vSXNQcm9wZXJ0eUtleScpO1xudmFyIFNhbWVWYWx1ZSA9IHJlcXVpcmUoJy4vU2FtZVZhbHVlJyk7XG52YXIgVHlwZSA9IHJlcXVpcmUoJy4vVHlwZScpO1xuXG4vLyBodHRwczovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLWNyZWF0ZWRhdGFwcm9wZXJ0eVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIENyZWF0ZURhdGFQcm9wZXJ0eShPLCBQLCBWKSB7XG5cdGlmIChUeXBlKE8pICE9PSAnT2JqZWN0Jykge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBUeXBlKE8pIGlzIG5vdCBPYmplY3QnKTtcblx0fVxuXHRpZiAoIUlzUHJvcGVydHlLZXkoUCkpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignQXNzZXJ0aW9uIGZhaWxlZDogSXNQcm9wZXJ0eUtleShQKSBpcyBub3QgdHJ1ZScpO1xuXHR9XG5cdHZhciBvbGREZXNjID0gT3JkaW5hcnlHZXRPd25Qcm9wZXJ0eShPLCBQKTtcblx0dmFyIGV4dGVuc2libGUgPSAhb2xkRGVzYyB8fCBJc0V4dGVuc2libGUoTyk7XG5cdHZhciBpbW11dGFibGUgPSBvbGREZXNjICYmICghb2xkRGVzY1snW1tXcml0YWJsZV1dJ10gfHwgIW9sZERlc2NbJ1tbQ29uZmlndXJhYmxlXV0nXSk7XG5cdGlmIChpbW11dGFibGUgfHwgIWV4dGVuc2libGUpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0cmV0dXJuIERlZmluZU93blByb3BlcnR5KFxuXHRcdElzRGF0YURlc2NyaXB0b3IsXG5cdFx0U2FtZVZhbHVlLFxuXHRcdEZyb21Qcm9wZXJ0eURlc2NyaXB0b3IsXG5cdFx0Tyxcblx0XHRQLFxuXHRcdHtcblx0XHRcdCdbW0NvbmZpZ3VyYWJsZV1dJzogdHJ1ZSxcblx0XHRcdCdbW0VudW1lcmFibGVdXSc6IHRydWUsXG5cdFx0XHQnW1tWYWx1ZV1dJzogVixcblx0XHRcdCdbW1dyaXRhYmxlXV0nOiB0cnVlXG5cdFx0fVxuXHQpO1xufTtcbiJdfQ==