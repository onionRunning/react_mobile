84e54a97185b5fc6f41a60e0054def48
'use strict';

var ReadableStream = require('stream').Readable,
    inherits = require('util').inherits,
    Serializer = require('./index');

var SerializerStream = module.exports = function (node, options) {
  ReadableStream.call(this);
  this.serializer = new Serializer(node, options);
  Object.defineProperty(this.serializer, 'html', {
    //NOTE: To make `+=` concat operator work properly we define
    //getter which always returns empty string
    get: function () {
      return '';
    },
    set: this.push.bind(this)
  });
};

inherits(SerializerStream, ReadableStream); //Readable stream implementation

SerializerStream.prototype._read = function () {
  this.serializer.serialize();
  this.push(null);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcmlhbGl6ZXJfc3RyZWFtLmpzIl0sIm5hbWVzIjpbIlJlYWRhYmxlU3RyZWFtIiwicmVxdWlyZSIsIlJlYWRhYmxlIiwiaW5oZXJpdHMiLCJTZXJpYWxpemVyIiwiU2VyaWFsaXplclN0cmVhbSIsIm1vZHVsZSIsImV4cG9ydHMiLCJub2RlIiwib3B0aW9ucyIsImNhbGwiLCJzZXJpYWxpemVyIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXQiLCJzZXQiLCJwdXNoIiwiYmluZCIsInByb3RvdHlwZSIsIl9yZWFkIiwic2VyaWFsaXplIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFJQSxjQUFjLEdBQUdDLE9BQU8sQ0FBQyxRQUFELENBQVAsQ0FBa0JDLFFBQXZDO0FBQUEsSUFDSUMsUUFBUSxHQUFHRixPQUFPLENBQUMsTUFBRCxDQUFQLENBQWdCRSxRQUQvQjtBQUFBLElBRUlDLFVBQVUsR0FBR0gsT0FBTyxDQUFDLFNBQUQsQ0FGeEI7O0FBSUEsSUFBSUksZ0JBQWdCLEdBQUdDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixVQUFVQyxJQUFWLEVBQWdCQyxPQUFoQixFQUF5QjtBQUM3RFQsRUFBQUEsY0FBYyxDQUFDVSxJQUFmLENBQW9CLElBQXBCO0FBRUEsT0FBS0MsVUFBTCxHQUFrQixJQUFJUCxVQUFKLENBQWVJLElBQWYsRUFBcUJDLE9BQXJCLENBQWxCO0FBRUFHLEVBQUFBLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQixLQUFLRixVQUEzQixFQUF1QyxNQUF2QyxFQUErQztBQUMzQztBQUNBO0FBQ0FHLElBQUFBLEdBQUcsRUFBRSxZQUFZO0FBQ2IsYUFBTyxFQUFQO0FBQ0gsS0FMMEM7QUFNM0NDLElBQUFBLEdBQUcsRUFBRSxLQUFLQyxJQUFMLENBQVVDLElBQVYsQ0FBZSxJQUFmO0FBTnNDLEdBQS9DO0FBUUgsQ0FiRDs7QUFlQWQsUUFBUSxDQUFDRSxnQkFBRCxFQUFtQkwsY0FBbkIsQ0FBUixDLENBRUE7O0FBQ0FLLGdCQUFnQixDQUFDYSxTQUFqQixDQUEyQkMsS0FBM0IsR0FBbUMsWUFBWTtBQUMzQyxPQUFLUixVQUFMLENBQWdCUyxTQUFoQjtBQUNBLE9BQUtKLElBQUwsQ0FBVSxJQUFWO0FBQ0gsQ0FIRCIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWRhYmxlU3RyZWFtID0gcmVxdWlyZSgnc3RyZWFtJykuUmVhZGFibGUsXG4gICAgaW5oZXJpdHMgPSByZXF1aXJlKCd1dGlsJykuaW5oZXJpdHMsXG4gICAgU2VyaWFsaXplciA9IHJlcXVpcmUoJy4vaW5kZXgnKTtcblxudmFyIFNlcmlhbGl6ZXJTdHJlYW0gPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChub2RlLCBvcHRpb25zKSB7XG4gICAgUmVhZGFibGVTdHJlYW0uY2FsbCh0aGlzKTtcblxuICAgIHRoaXMuc2VyaWFsaXplciA9IG5ldyBTZXJpYWxpemVyKG5vZGUsIG9wdGlvbnMpO1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMuc2VyaWFsaXplciwgJ2h0bWwnLCB7XG4gICAgICAgIC8vTk9URTogVG8gbWFrZSBgKz1gIGNvbmNhdCBvcGVyYXRvciB3b3JrIHByb3Blcmx5IHdlIGRlZmluZVxuICAgICAgICAvL2dldHRlciB3aGljaCBhbHdheXMgcmV0dXJucyBlbXB0eSBzdHJpbmdcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogdGhpcy5wdXNoLmJpbmQodGhpcylcbiAgICB9KTtcbn07XG5cbmluaGVyaXRzKFNlcmlhbGl6ZXJTdHJlYW0sIFJlYWRhYmxlU3RyZWFtKTtcblxuLy9SZWFkYWJsZSBzdHJlYW0gaW1wbGVtZW50YXRpb25cblNlcmlhbGl6ZXJTdHJlYW0ucHJvdG90eXBlLl9yZWFkID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuc2VyaWFsaXplci5zZXJpYWxpemUoKTtcbiAgICB0aGlzLnB1c2gobnVsbCk7XG59O1xuIl19