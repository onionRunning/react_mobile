3dfae5f1ec5e4fddac7db4d7b934d120
"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var mobx_1 = require("mobx");
var api_1 = __importDefault(require("api"));
var utils_1 = require("global/utils");
var const_1 = require("global/const");
var INIT_LEVEL = 0;
var ZERO = 0;
var IDIOM_LENGTH = 4;
var ONE = 1;
var INIT_COINS = 100;
var ADD_RANGE = 5;
var REDUCE_RANGE = -3;
var ALL_LEVEL = 1200;
var TYPES = {
    FILL: 'fill',
    EMPTY: 'empty',
    INIT: 'init',
    ERR: 'error',
};
var GameStore = /** @class */ (function () {
    function GameStore() {
        var _this = this;
        // 成语列表 后端返回
        this.idiomLists = [];
        // 当前关卡的文字列表
        this.worldLists = [];
        // 四字的成语展示栏
        this.idiomWorld = const_1.INIT_IDIOS;
        // 展示成功输入成功后的弹窗
        this.isShowPop = false;
        // 当前等级
        this.currentLevel = INIT_LEVEL;
        // 当前金额
        this.coins = INIT_COINS;
        // 展示当前金币变化等级
        this.rangeCoins = REDUCE_RANGE;
        // 展示成就模块
        this.showAchievement = false;
        // 成就页面展示的信息
        this.achievementInfo = {};
        // 通关的次数(预留)
        this.passNumber = INIT_LEVEL;
        // 临时变量储存随机的文字列表
        this.randomWorlds = [];
        // 页面加载执行的函数
        this.didMount = function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.initLevel();
                        this.initConins();
                        // eslint-disable-next-line @typescript-eslint/no-floating-promises
                        return [4 /*yield*/, this.setIdiomValue()];
                    case 1:
                        // eslint-disable-next-line @typescript-eslint/no-floating-promises
                        _a.sent();
                        this.getRandomWorlds(ZERO);
                        this.initWorld();
                        return [2 /*return*/];
                }
            });
        }); };
        // 页面离开时执行函数
        this.willUnMount = function () {
            _this.initAllInfo();
        };
        // 更新通关次数
        this.updatePassNum = function () {
            var nums = localStorage.getItem('pass_num');
            var isRightNum = false;
            if (utils_1.isString(nums) && nums !== 'NaN') {
                isRightNum = true;
            }
            _this.passNumber = parseInt(isRightNum ? nums : INIT_LEVEL.toString(), 10) + ONE;
        };
        // 初始化等级
        this.initLevel = function () {
            var level = localStorage.getItem('level');
            var isRightLevel = false;
            if (utils_1.isString(level) && level !== 'NaN') {
                isRightLevel = true;
            }
            _this.currentLevel = parseInt(isRightLevel ? level : INIT_LEVEL.toString(), 10);
        };
        // 初始化金额
        this.initConins = function () {
            var storageCoins = localStorage.getItem('coins');
            var isRightCoins = false;
            if (utils_1.isString(storageCoins) && storageCoins !== 'NaN') {
                isRightCoins = true;
            }
            _this.coins = parseInt(isRightCoins ? storageCoins : INIT_COINS.toString(), 10);
        };
        // 储存等级
        this.saveLevel = function (l) {
            localStorage.setItem('level', l.toString());
        };
        // 获取随机当前关卡的下一关文字变量
        this.getRandomWorlds = function (step) {
            if (step === void 0) { step = ONE; }
            if (_this.currentLevel === ALL_LEVEL - ONE) {
                step = ZERO;
            }
            var initIdiom = _this.idiomLists[_this.currentLevel + step].name;
            var temp = __spreadArrays(utils_1.getRandomWorld(utils_1.getRandomSeed()), initIdiom.split(''));
            _this.randomWorlds = utils_1.randomArray(temp, utils_1.getRandomSeed());
        };
        // 初始化文字列表信息
        this.initWorld = function () {
            var randomArr = __spreadArrays(_this.randomWorlds);
            _this.worldLists = randomArr.map(function (item, index) {
                return { value: item, types: TYPES.FILL, id: index };
            });
        };
        // 更新文字信息列表显示状态(文字列表点击更新为空, 成语展示显示)
        this.uodateWorld = function (id) {
            if (_this.checkUpdate())
                return;
            var temp = __spreadArrays(_this.worldLists);
            var values = temp.map(function (item, index) {
                if (index === id) {
                    return __assign(__assign({}, item), { types: TYPES.EMPTY, id: index });
                }
                return __assign(__assign({}, item), { id: index });
            });
            _this.worldLists = values;
            _this.updateIdiom(values, id);
        };
        // 更新文字状态
        this.changeWorldStatus = function (id) {
            var temp = __spreadArrays(_this.worldLists);
            temp[id] = __assign(__assign({}, temp[id]), { types: TYPES.FILL });
            _this.worldLists = temp;
        };
        // check empty个数不能大于4
        this.checkUpdate = function () {
            return (_this.worldLists.filter(function (item) {
                return item.types === 'empty';
            }).length >= IDIOM_LENGTH);
        };
        // 更新展示成语列表 找到第一个为空的 value值并且赋值
        this.updateIdiom = function (data, index) {
            var temp = __spreadArrays(_this.idiomWorld);
            var values = temp.findIndex(function (item) {
                return item.value === '';
            });
            temp[values] = __assign(__assign({}, data[index]), { types: TYPES.FILL });
            var validLength = temp.filter(function (item) {
                return item.value !== '';
            }).length;
            if (validLength === IDIOM_LENGTH) {
                _this.checkIdiomStatus(temp);
                return;
            }
            _this.idiomWorld = temp;
        };
        // 判断当前的四字成语成功(提示弹窗出现) 还是失败(显示红色报错)
        this.checkIdiomStatus = function (data) {
            var choseIdiomValue = data.reduce(function (current, pre) {
                return (current += pre.value);
            }, '');
            if (choseIdiomValue === _this.idiomLists[_this.currentLevel].name) {
                _this.idiomWorld = __spreadArrays(data);
                // 成功后的逻辑
                _this.isShowPop = true;
                _this.getRandomWorlds(); // 把下一关的随机文字先准备好
                _this.updateCoins(ADD_RANGE);
            }
            else {
                _this.idiomWorld = __spreadArrays(data).map(function (item) {
                    return __assign(__assign({}, item), { types: TYPES.ERR });
                });
            }
        };
        // 移除成语点击
        this.removeIdiom = function (id, index) {
            var temp = __spreadArrays(_this.idiomWorld);
            // 用于把错误状态进行重置
            var validLength = temp.filter(function (item) {
                return item.types === TYPES.ERR;
            }).length;
            if (validLength === IDIOM_LENGTH) {
                temp = temp.map(function (item) {
                    return __assign(__assign({}, item), { types: TYPES.FILL });
                });
            }
            temp[index] = { value: '', types: TYPES.INIT };
            _this.idiomWorld = temp;
            _this.changeWorldStatus(id);
        };
        // 更新等级
        this.updateLevel = function (l) {
            _this.currentLevel = l;
        };
        // 初始化成语列表
        this.setIdiomValue = function () { return __awaiter(_this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, api_1.default.getIdioms()];
                    case 1:
                        res = _a.sent();
                        if (res.success) {
                            this.idiomLists = res.data.chengyu;
                        }
                        return [2 /*return*/, res.success];
                }
            });
        }); };
        // 成语 和文字信息 清回归最初状态
        this.initWorldAndIdiom = function () {
            _this.idiomWorld = __spreadArrays(const_1.INIT_IDIOS);
            _this.worldLists = __spreadArrays(_this.worldLists).map(function (item) {
                return __assign(__assign({}, item), { types: TYPES.FILL });
            });
        };
        // 减少/增加 金额
        this.updateCoins = function (range) {
            _this.coins = _this.coins + range;
            _this.rangeCoins = range;
            localStorage.setItem('coins', _this.coins.toString());
        };
        // 点击获取提示按钮()1. 更新2份数据源 2. 更新金额 3. check 限制
        this.getTips = function () {
            if (_this.checkClick())
                return;
            _this.tipUpdateIdioms();
            _this.updateCoins(REDUCE_RANGE);
        };
        this.checkClick = function () {
            var temp = __spreadArrays(_this.idiomWorld);
            return (temp.filter(function (item) {
                return item.value !== '';
            }).length >= IDIOM_LENGTH);
        };
        // 提示更新展示的world
        this.tipUpdateWorld = function (str) {
            var temp = __spreadArrays(_this.worldLists).map(function (item) {
                if (item.value === str) {
                    return __assign(__assign({}, item), { types: TYPES.EMPTY });
                }
                return item;
            });
            _this.worldLists = temp;
        };
        // 提示情况下更新成语展示
        this.tipUpdateIdioms = function () {
            var temp = __spreadArrays(_this.idiomWorld);
            var emptyIndexArr = temp
                .map(function (item, index) {
                if (item.value === '') {
                    return index;
                }
                return '';
            })
                .filter(function (i) {
                return i !== '';
            });
            var idiomArr = _this.idiomLists[_this.currentLevel].name.split('');
            if (emptyIndexArr.length === ONE) {
                temp[emptyIndexArr[ZERO]] = __assign(__assign({}, temp[emptyIndexArr[ZERO]]), { value: idiomArr[emptyIndexArr[ZERO]], types: TYPES.FILL });
                _this.tipUpdateWorld(idiomArr[emptyIndexArr[ZERO]]);
                _this.checkIdiomStatus(temp);
                return;
            }
            // 如果长度大于 1 需要进行随机处理
            var radoms = utils_1.generateRandom(utils_1.getRandomSeed())(ZERO, emptyIndexArr.length);
            temp[emptyIndexArr[radoms]] = __assign(__assign({}, temp[emptyIndexArr[radoms]]), { value: idiomArr[emptyIndexArr[radoms]], types: TYPES.FILL });
            _this.tipUpdateWorld(idiomArr[emptyIndexArr[radoms]]);
            _this.idiomWorld = temp;
        };
        // 更新新的题目
        this.updateNextIdioms = function (l) {
            if (l === void 0) { l = ONE; }
            _this.updateLevel(_this.currentLevel + l);
            _this.saveLevel(_this.currentLevel);
            _this.isShowPop = false;
            _this.initWorld();
            _this.idiomWorld = __spreadArrays(const_1.INIT_IDIOS);
        };
        // 初始化信息
        this.initAllInfo = function () {
            _this.isShowPop = false;
            _this.initWorldAndIdiom();
            _this.handleAchievement(false, {});
        };
        // 成就相关逻辑
        this.handleAchievement = function (s, info) {
            _this.updateAchievementStatus(s);
            _this.updateAchievementInfo(info);
        };
        // 打开或关闭成就模块
        this.updateAchievementStatus = function (status) {
            _this.showAchievement = status;
        };
        // 更新成就相关信息
        this.updateAchievementInfo = function (info) {
            _this.achievementInfo = info;
        };
    }
    __decorate([
        mobx_1.observable
    ], GameStore.prototype, "idiomLists", void 0);
    __decorate([
        mobx_1.observable
    ], GameStore.prototype, "worldLists", void 0);
    __decorate([
        mobx_1.observable
    ], GameStore.prototype, "idiomWorld", void 0);
    __decorate([
        mobx_1.observable
    ], GameStore.prototype, "isShowPop", void 0);
    __decorate([
        mobx_1.observable
    ], GameStore.prototype, "currentLevel", void 0);
    __decorate([
        mobx_1.observable
    ], GameStore.prototype, "coins", void 0);
    __decorate([
        mobx_1.observable
    ], GameStore.prototype, "rangeCoins", void 0);
    __decorate([
        mobx_1.observable
    ], GameStore.prototype, "showAchievement", void 0);
    __decorate([
        mobx_1.observable
    ], GameStore.prototype, "achievementInfo", void 0);
    __decorate([
        mobx_1.observable
    ], GameStore.prototype, "passNumber", void 0);
    __decorate([
        mobx_1.observable
    ], GameStore.prototype, "randomWorlds", void 0);
    return GameStore;
}());
exports.default = GameStore;
// 注意联动逻辑的处理 数据A更新 -> 更新B // 数据B更新 -> 数据A
//# sourceMappingURL=data:application/json;charset=utf-8;base64,