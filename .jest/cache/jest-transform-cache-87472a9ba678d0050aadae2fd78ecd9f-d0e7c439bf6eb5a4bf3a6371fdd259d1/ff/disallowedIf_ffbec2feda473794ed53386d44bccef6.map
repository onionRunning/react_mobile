{"version":3,"sources":["../src/disallowedIf.js"],"names":["propType","rest","error","props","otherError","otherPropType","validator","disallowedIfRequired","otherPropName"],"mappings":";;;;;;;AAAA,IAAA,cAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,yBAAA,CAAA,CAAA;;;;;;;;AAEe,SAAA,YAAA,CAAA,QAAA,EAAA,aAAA,EAAA,aAAA,EAA8D;AAC3E,MAAI,OAAA,QAAA,KAAA,UAAA,IAAkC,OAAOA,QAAQ,CAAf,UAAA,KAAtC,UAAA,EAAiF;AAC/E,UAAM,IAAA,SAAA,CAAN,uFAAM,CAAN;AACD;;AAED,MAAI,OAAA,aAAA,KAAJ,QAAA,EAAuC;AACrC,UAAM,IAAA,SAAA,CAAN,kCAAM,CAAN;AACD;;AAED,MAAI,OAAA,aAAA,KAAJ,UAAA,EAAyC;AACvC,UAAM,IAAA,SAAA,CAAN,uCAAM,CAAN;AACD;;AAED,WAAA,oBAAA,CAAA,KAAA,EAAA,QAAA,EAAA,aAAA,EAAuE;AAAA,SAAA,IAAA,IAAA,GAAA,SAAA,CAAA,MAAA,EAANC,IAAM,GAAA,IAAA,KAAA,CAAA,IAAA,GAAA,CAAA,GAAA,IAAA,GAAA,CAAA,GAAA,CAAA,CAAA,EAAA,IAAA,GAAA,CAAA,EAAA,IAAA,GAAA,IAAA,EAAA,IAAA,EAAA,EAAA;AAANA,MAAAA,IAAM,CAAA,IAAA,GAAA,CAAA,CAANA,GAAM,SAAA,CAAA,IAAA,CAANA;AAAM;;AACrE,QAAMC,KAAK,GAAGF,QAAQ,CAARA,UAAAA,CAAAA,KAAAA,CAAAA,QAAAA,EAAQ,CAAA,KAAA,EAAA,QAAA,EAAA,aAAA,EAAA,MAAA,CAAtB,IAAsB,CAARA,CAAd;;AACA,QAAA,KAAA,EAAW;AACT,aAAA,KAAA;AACD;;AAED,QAAIG,KAAK,CAALA,aAAK,CAALA,IAAJ,IAAA,EAAkC;AAChC,aAAA,IAAA;AACD;;AAED,QAAMC,UAAU,GAAGC,aAAa,CAAbA,KAAAA,CAAAA,KAAAA,CAAAA,EAAAA,CAAAA,KAAAA,EAAAA,aAAAA,EAAAA,aAAAA,EAAAA,MAAAA,CAAnB,IAAmBA,CAAAA,CAAnB;;AACA,QAAA,UAAA,EAAgB;AACd,aAAA,IAAA;AACD;;AACD,WAAO,IAAA,KAAA,CAAA,cAAA,MAAA,CAAA,QAAA,EAAA,kCAAA,EAAA,MAAA,CAAA,aAAA,EAAP,uCAAO,CAAA,CAAP;AACD;;AAED,MAAMC,SAAS,GAAG,SAAA,oBAAA,CAAA,KAAA,EAAA,QAAA,EAAwD;AACxE,QAAIH,KAAK,CAALA,QAAK,CAALA,IAAJ,IAAA,EAA6B;AAC3B,aAAA,IAAA;AACD;;AAHuE,SAAA,IAAA,KAAA,GAAA,SAAA,CAAA,MAAA,EAANF,IAAM,GAAA,IAAA,KAAA,CAAA,KAAA,GAAA,CAAA,GAAA,KAAA,GAAA,CAAA,GAAA,CAAA,CAAA,EAAA,KAAA,GAAA,CAAA,EAAA,KAAA,GAAA,KAAA,EAAA,KAAA,EAAA,EAAA;AAANA,MAAAA,IAAM,CAAA,KAAA,GAAA,CAAA,CAANA,GAAM,SAAA,CAAA,KAAA,CAANA;AAAM;;AAIxE,WAAOM,oBAAoB,CAApBA,KAAAA,CAAAA,KAAAA,CAAAA,EAAAA,CAAAA,KAAAA,EAAAA,QAAAA,EAAAA,MAAAA,CAAP,IAAOA,CAAAA,CAAP;AAJF,GAAA;;AAOAD,EAAAA,SAAS,CAATA,UAAAA,GAAAA,oBAAAA;AAEA,SAAO,CAAA,GAAA,cAAA,CAAA,SAAA,CAAA,EAAA,SAAA,EAAA,cAAA,EAAyC;AAAEN,IAAAA,QAAQ,EAAV,QAAA;AAAYQ,IAAAA,aAAa,EAAzB,aAAA;AAA2BH,IAAAA,aAAa,EAAbA;AAA3B,GAAzC,CAAP;AACD","sourcesContent":["import wrapValidator from './helpers/wrapValidator';\n\nexport default function disallowedIf(propType, otherPropName, otherPropType) {\n  if (typeof propType !== 'function' || typeof propType.isRequired !== 'function') {\n    throw new TypeError('a propType validator is required; propType validators must also provide `.isRequired`');\n  }\n\n  if (typeof otherPropName !== 'string') {\n    throw new TypeError('other prop name must be a string');\n  }\n\n  if (typeof otherPropType !== 'function') {\n    throw new TypeError('other prop type validator is required');\n  }\n\n  function disallowedIfRequired(props, propName, componentName, ...rest) {\n    const error = propType.isRequired(props, propName, componentName, ...rest);\n    if (error) {\n      return error;\n    }\n\n    if (props[otherPropName] == null) {\n      return null;\n    }\n\n    const otherError = otherPropType(props, otherPropName, componentName, ...rest);\n    if (otherError) {\n      return null;\n    }\n    return new Error(`prop “${propName}” is disallowed when “${otherPropName}” matches the provided validator`);\n  }\n\n  const validator = function disallowedIfPropType(props, propName, ...rest) {\n    if (props[propName] == null) {\n      return null;\n    }\n    return disallowedIfRequired(props, propName, ...rest);\n  };\n\n  validator.isRequired = disallowedIfRequired;\n\n  return wrapValidator(validator, 'disallowedIf', { propType, otherPropName, otherPropType });\n}\n"]}