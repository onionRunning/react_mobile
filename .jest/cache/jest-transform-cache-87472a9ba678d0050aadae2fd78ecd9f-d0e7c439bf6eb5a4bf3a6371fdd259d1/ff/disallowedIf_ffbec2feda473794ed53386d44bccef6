02373b5351e0467be881235686033b1f
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = disallowedIf;

var _wrapValidator = _interopRequireDefault(require("./helpers/wrapValidator"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function disallowedIf(propType, otherPropName, otherPropType) {
  if (typeof propType !== 'function' || typeof propType.isRequired !== 'function') {
    throw new TypeError('a propType validator is required; propType validators must also provide `.isRequired`');
  }

  if (typeof otherPropName !== 'string') {
    throw new TypeError('other prop name must be a string');
  }

  if (typeof otherPropType !== 'function') {
    throw new TypeError('other prop type validator is required');
  }

  function disallowedIfRequired(props, propName, componentName) {
    for (var _len = arguments.length, rest = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
      rest[_key - 3] = arguments[_key];
    }

    var error = propType.isRequired.apply(propType, [props, propName, componentName].concat(rest));

    if (error) {
      return error;
    }

    if (props[otherPropName] == null) {
      return null;
    }

    var otherError = otherPropType.apply(void 0, [props, otherPropName, componentName].concat(rest));

    if (otherError) {
      return null;
    }

    return new Error("prop \u201C".concat(propName, "\u201D is disallowed when \u201C").concat(otherPropName, "\u201D matches the provided validator"));
  }

  var validator = function disallowedIfPropType(props, propName) {
    if (props[propName] == null) {
      return null;
    }

    for (var _len2 = arguments.length, rest = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
      rest[_key2 - 2] = arguments[_key2];
    }

    return disallowedIfRequired.apply(void 0, [props, propName].concat(rest));
  };

  validator.isRequired = disallowedIfRequired;
  return (0, _wrapValidator["default"])(validator, 'disallowedIf', {
    propType: propType,
    otherPropName: otherPropName,
    otherPropType: otherPropType
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9kaXNhbGxvd2VkSWYuanMiXSwibmFtZXMiOlsicHJvcFR5cGUiLCJyZXN0IiwiZXJyb3IiLCJwcm9wcyIsIm90aGVyRXJyb3IiLCJvdGhlclByb3BUeXBlIiwidmFsaWRhdG9yIiwiZGlzYWxsb3dlZElmUmVxdWlyZWQiLCJvdGhlclByb3BOYW1lIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsSUFBQSxjQUFBLEdBQUEsc0JBQUEsQ0FBQSxPQUFBLENBQUEseUJBQUEsQ0FBQSxDQUFBOzs7Ozs7OztBQUVlLFNBQUEsWUFBQSxDQUFBLFFBQUEsRUFBQSxhQUFBLEVBQUEsYUFBQSxFQUE4RDtBQUMzRSxNQUFJLE9BQUEsUUFBQSxLQUFBLFVBQUEsSUFBa0MsT0FBT0EsUUFBUSxDQUFmLFVBQUEsS0FBdEMsVUFBQSxFQUFpRjtBQUMvRSxVQUFNLElBQUEsU0FBQSxDQUFOLHVGQUFNLENBQU47QUFDRDs7QUFFRCxNQUFJLE9BQUEsYUFBQSxLQUFKLFFBQUEsRUFBdUM7QUFDckMsVUFBTSxJQUFBLFNBQUEsQ0FBTixrQ0FBTSxDQUFOO0FBQ0Q7O0FBRUQsTUFBSSxPQUFBLGFBQUEsS0FBSixVQUFBLEVBQXlDO0FBQ3ZDLFVBQU0sSUFBQSxTQUFBLENBQU4sdUNBQU0sQ0FBTjtBQUNEOztBQUVELFdBQUEsb0JBQUEsQ0FBQSxLQUFBLEVBQUEsUUFBQSxFQUFBLGFBQUEsRUFBdUU7QUFBQSxTQUFBLElBQUEsSUFBQSxHQUFBLFNBQUEsQ0FBQSxNQUFBLEVBQU5DLElBQU0sR0FBQSxJQUFBLEtBQUEsQ0FBQSxJQUFBLEdBQUEsQ0FBQSxHQUFBLElBQUEsR0FBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBLEVBQUEsSUFBQSxHQUFBLENBQUEsRUFBQSxJQUFBLEdBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxFQUFBO0FBQU5BLE1BQUFBLElBQU0sQ0FBQSxJQUFBLEdBQUEsQ0FBQSxDQUFOQSxHQUFNLFNBQUEsQ0FBQSxJQUFBLENBQU5BO0FBQU07O0FBQ3JFLFFBQU1DLEtBQUssR0FBR0YsUUFBUSxDQUFSQSxVQUFBQSxDQUFBQSxLQUFBQSxDQUFBQSxRQUFBQSxFQUFRLENBQUEsS0FBQSxFQUFBLFFBQUEsRUFBQSxhQUFBLEVBQUEsTUFBQSxDQUF0QixJQUFzQixDQUFSQSxDQUFkOztBQUNBLFFBQUEsS0FBQSxFQUFXO0FBQ1QsYUFBQSxLQUFBO0FBQ0Q7O0FBRUQsUUFBSUcsS0FBSyxDQUFMQSxhQUFLLENBQUxBLElBQUosSUFBQSxFQUFrQztBQUNoQyxhQUFBLElBQUE7QUFDRDs7QUFFRCxRQUFNQyxVQUFVLEdBQUdDLGFBQWEsQ0FBYkEsS0FBQUEsQ0FBQUEsS0FBQUEsQ0FBQUEsRUFBQUEsQ0FBQUEsS0FBQUEsRUFBQUEsYUFBQUEsRUFBQUEsYUFBQUEsRUFBQUEsTUFBQUEsQ0FBbkIsSUFBbUJBLENBQUFBLENBQW5COztBQUNBLFFBQUEsVUFBQSxFQUFnQjtBQUNkLGFBQUEsSUFBQTtBQUNEOztBQUNELFdBQU8sSUFBQSxLQUFBLENBQUEsY0FBQSxNQUFBLENBQUEsUUFBQSxFQUFBLGtDQUFBLEVBQUEsTUFBQSxDQUFBLGFBQUEsRUFBUCx1Q0FBTyxDQUFBLENBQVA7QUFDRDs7QUFFRCxNQUFNQyxTQUFTLEdBQUcsU0FBQSxvQkFBQSxDQUFBLEtBQUEsRUFBQSxRQUFBLEVBQXdEO0FBQ3hFLFFBQUlILEtBQUssQ0FBTEEsUUFBSyxDQUFMQSxJQUFKLElBQUEsRUFBNkI7QUFDM0IsYUFBQSxJQUFBO0FBQ0Q7O0FBSHVFLFNBQUEsSUFBQSxLQUFBLEdBQUEsU0FBQSxDQUFBLE1BQUEsRUFBTkYsSUFBTSxHQUFBLElBQUEsS0FBQSxDQUFBLEtBQUEsR0FBQSxDQUFBLEdBQUEsS0FBQSxHQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsRUFBQSxLQUFBLEdBQUEsQ0FBQSxFQUFBLEtBQUEsR0FBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEVBQUE7QUFBTkEsTUFBQUEsSUFBTSxDQUFBLEtBQUEsR0FBQSxDQUFBLENBQU5BLEdBQU0sU0FBQSxDQUFBLEtBQUEsQ0FBTkE7QUFBTTs7QUFJeEUsV0FBT00sb0JBQW9CLENBQXBCQSxLQUFBQSxDQUFBQSxLQUFBQSxDQUFBQSxFQUFBQSxDQUFBQSxLQUFBQSxFQUFBQSxRQUFBQSxFQUFBQSxNQUFBQSxDQUFQLElBQU9BLENBQUFBLENBQVA7QUFKRixHQUFBOztBQU9BRCxFQUFBQSxTQUFTLENBQVRBLFVBQUFBLEdBQUFBLG9CQUFBQTtBQUVBLFNBQU8sQ0FBQSxHQUFBLGNBQUEsQ0FBQSxTQUFBLENBQUEsRUFBQSxTQUFBLEVBQUEsY0FBQSxFQUF5QztBQUFFTixJQUFBQSxRQUFRLEVBQVYsUUFBQTtBQUFZUSxJQUFBQSxhQUFhLEVBQXpCLGFBQUE7QUFBMkJILElBQUFBLGFBQWEsRUFBYkE7QUFBM0IsR0FBekMsQ0FBUDtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHdyYXBWYWxpZGF0b3IgZnJvbSAnLi9oZWxwZXJzL3dyYXBWYWxpZGF0b3InO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkaXNhbGxvd2VkSWYocHJvcFR5cGUsIG90aGVyUHJvcE5hbWUsIG90aGVyUHJvcFR5cGUpIHtcbiAgaWYgKHR5cGVvZiBwcm9wVHlwZSAhPT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgcHJvcFR5cGUuaXNSZXF1aXJlZCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2EgcHJvcFR5cGUgdmFsaWRhdG9yIGlzIHJlcXVpcmVkOyBwcm9wVHlwZSB2YWxpZGF0b3JzIG11c3QgYWxzbyBwcm92aWRlIGAuaXNSZXF1aXJlZGAnKTtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygb3RoZXJQcm9wTmFtZSAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdvdGhlciBwcm9wIG5hbWUgbXVzdCBiZSBhIHN0cmluZycpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBvdGhlclByb3BUeXBlICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignb3RoZXIgcHJvcCB0eXBlIHZhbGlkYXRvciBpcyByZXF1aXJlZCcpO1xuICB9XG5cbiAgZnVuY3Rpb24gZGlzYWxsb3dlZElmUmVxdWlyZWQocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCAuLi5yZXN0KSB7XG4gICAgY29uc3QgZXJyb3IgPSBwcm9wVHlwZS5pc1JlcXVpcmVkKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgLi4ucmVzdCk7XG4gICAgaWYgKGVycm9yKSB7XG4gICAgICByZXR1cm4gZXJyb3I7XG4gICAgfVxuXG4gICAgaWYgKHByb3BzW290aGVyUHJvcE5hbWVdID09IG51bGwpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGNvbnN0IG90aGVyRXJyb3IgPSBvdGhlclByb3BUeXBlKHByb3BzLCBvdGhlclByb3BOYW1lLCBjb21wb25lbnROYW1lLCAuLi5yZXN0KTtcbiAgICBpZiAob3RoZXJFcnJvcikge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBuZXcgRXJyb3IoYHByb3Ag4oCcJHtwcm9wTmFtZX3igJ0gaXMgZGlzYWxsb3dlZCB3aGVuIOKAnCR7b3RoZXJQcm9wTmFtZX3igJ0gbWF0Y2hlcyB0aGUgcHJvdmlkZWQgdmFsaWRhdG9yYCk7XG4gIH1cblxuICBjb25zdCB2YWxpZGF0b3IgPSBmdW5jdGlvbiBkaXNhbGxvd2VkSWZQcm9wVHlwZShwcm9wcywgcHJvcE5hbWUsIC4uLnJlc3QpIHtcbiAgICBpZiAocHJvcHNbcHJvcE5hbWVdID09IG51bGwpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gZGlzYWxsb3dlZElmUmVxdWlyZWQocHJvcHMsIHByb3BOYW1lLCAuLi5yZXN0KTtcbiAgfTtcblxuICB2YWxpZGF0b3IuaXNSZXF1aXJlZCA9IGRpc2FsbG93ZWRJZlJlcXVpcmVkO1xuXG4gIHJldHVybiB3cmFwVmFsaWRhdG9yKHZhbGlkYXRvciwgJ2Rpc2FsbG93ZWRJZicsIHsgcHJvcFR5cGUsIG90aGVyUHJvcE5hbWUsIG90aGVyUHJvcFR5cGUgfSk7XG59XG4iXX0=