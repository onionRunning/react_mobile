de6c2edb58aa992d27e29d8e15b99ff0
'use strict';

var WritableStream = require('stream').Writable,
    inherits = require('util').inherits,
    Parser = require('./index');

var ParserStream = module.exports = function (options) {
  WritableStream.call(this);
  this.parser = new Parser(options);
  this.lastChunkWritten = false;
  this.writeCallback = null;
  this.pausedByScript = false;
  this.document = this.parser.treeAdapter.createDocument();
  this.pendingHtmlInsertions = [];
  this._resume = this._resume.bind(this);
  this._documentWrite = this._documentWrite.bind(this);
  this._scriptHandler = this._scriptHandler.bind(this);

  this.parser._bootstrap(this.document, null);
};

inherits(ParserStream, WritableStream); //WritableStream implementation

ParserStream.prototype._write = function (chunk, encoding, callback) {
  this.writeCallback = callback;
  this.parser.tokenizer.write(chunk.toString('utf8'), this.lastChunkWritten);

  this._runParsingLoop();
};

ParserStream.prototype.end = function (chunk, encoding, callback) {
  this.lastChunkWritten = true;
  WritableStream.prototype.end.call(this, chunk || '', encoding, callback);
}; //Scriptable parser implementation


ParserStream.prototype._runParsingLoop = function () {
  this.parser.runParsingLoopForCurrentChunk(this.writeCallback, this._scriptHandler);
};

ParserStream.prototype._resume = function () {
  if (!this.pausedByScript) throw new Error('Parser was already resumed');

  while (this.pendingHtmlInsertions.length) {
    var html = this.pendingHtmlInsertions.pop();
    this.parser.tokenizer.insertHtmlAtCurrentPos(html);
  }

  this.pausedByScript = false; //NOTE: keep parsing if we don't wait for the next input chunk

  if (this.parser.tokenizer.active) this._runParsingLoop();
};

ParserStream.prototype._documentWrite = function (html) {
  if (!this.parser.stopped) this.pendingHtmlInsertions.push(html);
};

ParserStream.prototype._scriptHandler = function (scriptElement) {
  if (this.listeners('script').length) {
    this.pausedByScript = true;
    this.emit('script', scriptElement, this._documentWrite, this._resume);
  } else this._runParsingLoop();
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBhcnNlcl9zdHJlYW0uanMiXSwibmFtZXMiOlsiV3JpdGFibGVTdHJlYW0iLCJyZXF1aXJlIiwiV3JpdGFibGUiLCJpbmhlcml0cyIsIlBhcnNlciIsIlBhcnNlclN0cmVhbSIsIm1vZHVsZSIsImV4cG9ydHMiLCJvcHRpb25zIiwiY2FsbCIsInBhcnNlciIsImxhc3RDaHVua1dyaXR0ZW4iLCJ3cml0ZUNhbGxiYWNrIiwicGF1c2VkQnlTY3JpcHQiLCJkb2N1bWVudCIsInRyZWVBZGFwdGVyIiwiY3JlYXRlRG9jdW1lbnQiLCJwZW5kaW5nSHRtbEluc2VydGlvbnMiLCJfcmVzdW1lIiwiYmluZCIsIl9kb2N1bWVudFdyaXRlIiwiX3NjcmlwdEhhbmRsZXIiLCJfYm9vdHN0cmFwIiwicHJvdG90eXBlIiwiX3dyaXRlIiwiY2h1bmsiLCJlbmNvZGluZyIsImNhbGxiYWNrIiwidG9rZW5pemVyIiwid3JpdGUiLCJ0b1N0cmluZyIsIl9ydW5QYXJzaW5nTG9vcCIsImVuZCIsInJ1blBhcnNpbmdMb29wRm9yQ3VycmVudENodW5rIiwiRXJyb3IiLCJsZW5ndGgiLCJodG1sIiwicG9wIiwiaW5zZXJ0SHRtbEF0Q3VycmVudFBvcyIsImFjdGl2ZSIsInN0b3BwZWQiLCJwdXNoIiwic2NyaXB0RWxlbWVudCIsImxpc3RlbmVycyIsImVtaXQiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQUlBLGNBQWMsR0FBR0MsT0FBTyxDQUFDLFFBQUQsQ0FBUCxDQUFrQkMsUUFBdkM7QUFBQSxJQUNJQyxRQUFRLEdBQUdGLE9BQU8sQ0FBQyxNQUFELENBQVAsQ0FBZ0JFLFFBRC9CO0FBQUEsSUFFSUMsTUFBTSxHQUFHSCxPQUFPLENBQUMsU0FBRCxDQUZwQjs7QUFJQSxJQUFJSSxZQUFZLEdBQUdDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixVQUFVQyxPQUFWLEVBQW1CO0FBQ25EUixFQUFBQSxjQUFjLENBQUNTLElBQWYsQ0FBb0IsSUFBcEI7QUFFQSxPQUFLQyxNQUFMLEdB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akMsU0FBS3RCLGNBQUwsR0FBc0IsSUFBdEI7QUFDQSxTQUFLK0IsSUFBTCxDQUFVLFFBQVYsRUFBb0JGLGFBQXBCLEVBQW1DLEtBQUt0QixjQUF4QyxFQUF3RCxLQUFLRixPQUE3RDtBQUNILEdBSEQsTUFLSSxLQUFLYSxlQUFMO0FBQ1AsQ0FQRCIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIFdyaXRhYmxlU3RyZWFtID0gcmVxdWlyZSgnc3RyZWFtJykuV3JpdGFibGUsXG4gICAgaW5oZXJpdHMgPSByZXF1aXJlKCd1dGlsJykuaW5oZXJpdHMsXG4gICAgUGFyc2VyID0gcmVxdWlyZSgnLi9pbmRleCcpO1xuXG52YXIgUGFyc2VyU3RyZWFtID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgIFdyaXRhYmxlU3RyZWFtLmNhbGwodGhpcyk7XG5cbiAgICB0aGlzLnBhcnNlciA9IG5ldyBQYXJzZXIob3B0aW9ucyk7XG5cbiAgICB0aGlzLmxhc3RDaHVua1dyaXR0ZW4gPSBmYWxzZTtcbiAgICB0aGlzLndyaXRlQ2FsbGJhY2sgPSBudWxsO1xuICAgIHRoaXMucGF1c2VkQnlTY3JpcHQgPSBmYWxzZTtcblxuICAgIHRoaXMuZG9jdW1lbnQgPSB0aGlzLnBhcnNlci50cmVlQWRhcHRlci5jcmVhdGVEb2N1bWVudCgpO1xuXG4gICAgdGhpcy5wZW5kaW5nSHRtbEluc2VydGlvbnMgPSBbXTtcblxuICAgIHRoaXMuX3Jlc3VtZSA9IHRoaXMuX3Jlc3VtZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMuX2RvY3VtZW50V3JpdGUgPSB0aGlzLl9kb2N1bWVudFdyaXRlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5fc2NyaXB0SGFuZGxlciA9IHRoaXMuX3NjcmlwdEhhbmRsZXIuYmluZCh0aGlzKTtcblxuICAgIHRoaXMucGFyc2VyLl9ib290c3RyYXAodGhpcy5kb2N1bWVudCwgbnVsbCk7XG59O1xuXG5pbmhlcml0cyhQYXJzZXJTdHJlYW0sIFdyaXRhYmxlU3RyZWFtKTtcblxuLy9Xcml0YWJsZVN0cmVhbSBpbXBsZW1lbnRhdGlvblxuUGFyc2VyU3RyZWFtLnByb3RvdHlwZS5fd3JpdGUgPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBjYWxsYmFjaykge1xuICAgIHRoaXMud3JpdGVDYWxsYmFjayA9IGNhbGxiYWNrO1xuICAgIHRoaXMucGFyc2VyLnRva2VuaXplci53cml0ZShjaHVuay50b1N0cmluZygndXRmOCcpLCB0aGlzLmxhc3RDaHVua1dyaXR0ZW4pO1xuICAgIHRoaXMuX3J1blBhcnNpbmdMb29wKCk7XG59O1xuXG5QYXJzZXJTdHJlYW0ucHJvdG90eXBlLmVuZCA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNhbGxiYWNrKSB7XG4gICAgdGhpcy5sYXN0Q2h1bmtXcml0dGVuID0gdHJ1ZTtcbiAgICBXcml0YWJsZVN0cmVhbS5wcm90b3R5cGUuZW5kLmNhbGwodGhpcywgY2h1bmsgfHwgJycsIGVuY29kaW5nLCBjYWxsYmFjayk7XG59O1xuXG4vL1NjcmlwdGFibGUgcGFyc2VyIGltcGxlbWVudGF0aW9uXG5QYXJzZXJTdHJlYW0ucHJvdG90eXBlLl9ydW5QYXJzaW5nTG9vcCA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnBhcnNlci5ydW5QYXJzaW5nTG9vcEZvckN1cnJlbnRDaHVuayh0aGlzLndyaXRlQ2FsbGJhY2ssIHRoaXMuX3NjcmlwdEhhbmRsZXIpO1xufTtcblxuUGFyc2VyU3RyZWFtLnByb3RvdHlwZS5fcmVzdW1lID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICghdGhpcy5wYXVzZWRCeVNjcmlwdClcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdQYXJzZXIgd2FzIGFscmVhZHkgcmVzdW1lZCcpO1xuXG4gICAgd2hpbGUgKHRoaXMucGVuZGluZ0h0bWxJbnNlcnRpb25zLmxlbmd0aCkge1xuICAgICAgICB2YXIgaHRtbCA9IHRoaXMucGVuZGluZ0h0bWxJbnNlcnRpb25zLnBvcCgpO1xuXG4gICAgICAgIHRoaXMucGFyc2VyLnRva2VuaXplci5pbnNlcnRIdG1sQXRDdXJyZW50UG9zKGh0bWwpO1xuICAgIH1cblxuICAgIHRoaXMucGF1c2VkQnlTY3JpcHQgPSBmYWxzZTtcblxuICAgIC8vTk9URToga2VlcCBwYXJzaW5nIGlmIHdlIGRvbid0IHdhaXQgZm9yIHRoZSBuZXh0IGlucHV0IGNodW5rXG4gICAgaWYgKHRoaXMucGFyc2VyLnRva2VuaXplci5hY3RpdmUpXG4gICAgICAgIHRoaXMuX3J1blBhcnNpbmdMb29wKCk7XG59O1xuXG5QYXJzZXJTdHJlYW0ucHJvdG90eXBlLl9kb2N1bWVudFdyaXRlID0gZnVuY3Rpb24gKGh0bWwpIHtcbiAgICBpZiAoIXRoaXMucGFyc2VyLnN0b3BwZWQpXG4gICAgICAgIHRoaXMucGVuZGluZ0h0bWxJbnNlcnRpb25zLnB1c2goaHRtbCk7XG59O1xuXG5QYXJzZXJTdHJlYW0ucHJvdG90eXBlLl9zY3JpcHRIYW5kbGVyID0gZnVuY3Rpb24gKHNjcmlwdEVsZW1lbnQpIHtcbiAgICBpZiAodGhpcy5saXN0ZW5lcnMoJ3NjcmlwdCcpLmxlbmd0aCkge1xuICAgICAgICB0aGlzLnBhdXNlZEJ5U2NyaXB0ID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5lbWl0KCdzY3JpcHQnLCBzY3JpcHRFbGVtZW50LCB0aGlzLl9kb2N1bWVudFdyaXRlLCB0aGlzLl9yZXN1bWUpO1xuICAgIH1cbiAgICBlbHNlXG4gICAgICAgIHRoaXMuX3J1blBhcnNpbmdMb29wKCk7XG59O1xuXG4iXX0=