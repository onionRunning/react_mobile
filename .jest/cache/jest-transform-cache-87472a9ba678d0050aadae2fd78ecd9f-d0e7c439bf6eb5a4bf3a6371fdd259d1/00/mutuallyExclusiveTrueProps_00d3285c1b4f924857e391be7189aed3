900a025d2c8e453008d2ce20d9f4851a
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = mutuallyExclusiveTrue;

var _propTypes = require("prop-types");

var _wrapValidator = _interopRequireDefault(require("./helpers/wrapValidator"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function mutuallyExclusiveTrue() {
  for (var _len = arguments.length, exclusiveProps = new Array(_len), _key = 0; _key < _len; _key++) {
    exclusiveProps[_key] = arguments[_key];
  }

  if (exclusiveProps.length < 1) {
    throw new TypeError('at least one prop that is mutually exclusive is required');
  }

  if (!exclusiveProps.every(function (x) {
    return typeof x === 'string';
  })) {
    throw new TypeError('all exclusive true props must be strings');
  }

  var propsList = exclusiveProps.join(', or ');

  var validator = function mutuallyExclusiveTrueProps(props, propName, componentName) {
    var countProps = function countProps(count, prop) {
      return count + (props[prop] ? 1 : 0);
    };

    var exclusivePropCount = exclusiveProps.reduce(countProps, 0);

    if (exclusivePropCount > 1) {
      return new Error("A ".concat(componentName, " cannot have more than one of these boolean props be true: ").concat(propsList));
    }

    for (var _len2 = arguments.length, rest = new Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {
      rest[_key2 - 3] = arguments[_key2];
    }

    return _propTypes.bool.apply(void 0, [props, propName, componentName].concat(rest));
  };

  validator.isRequired = function mutuallyExclusiveTruePropsRequired(props, propName, componentName) {
    var countProps = function countProps(count, prop) {
      return count + (props[prop] ? 1 : 0);
    };

    var exclusivePropCount = exclusiveProps.reduce(countProps, 0);

    if (exclusivePropCount > 1) {
      return new Error("A ".concat(componentName, " cannot have more than one of these boolean props be true: ").concat(propsList));
    }

    for (var _len3 = arguments.length, rest = new Array(_len3 > 3 ? _len3 - 3 : 0), _key3 = 3; _key3 < _len3; _key3++) {
      rest[_key3 - 3] = arguments[_key3];
    }

    return _propTypes.bool.isRequired.apply(_propTypes.bool, [props, propName, componentName].concat(rest));
  };

  return (0, _wrapValidator["default"])(validator, "mutuallyExclusiveTrueProps: ".concat(propsList), exclusiveProps);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9tdXR1YWxseUV4Y2x1c2l2ZVRydWVQcm9wcy5qcyJdLCJuYW1lcyI6WyJleGNsdXNpdmVQcm9wcyIsInByb3BzTGlzdCIsInZhbGlkYXRvciIsInJlc3QiLCJjb3VudFByb3BzIiwiY291bnQiLCJwcm9wcyIsImV4Y2x1c2l2ZVByb3BDb3VudCIsImJvb2wiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSxJQUFBLFVBQUEsR0FBQSxPQUFBLENBQUEsWUFBQSxDQUFBOztBQUNBLElBQUEsY0FBQSxHQUFBLHNCQUFBLENBQUEsT0FBQSxDQUFBLHlCQUFBLENBQUEsQ0FBQTs7Ozs7Ozs7QUFFZSxTQUFBLHFCQUFBLEdBQWtEO0FBQUEsT0FBQSxJQUFBLElBQUEsR0FBQSxTQUFBLENBQUEsTUFBQSxFQUFoQkEsY0FBZ0IsR0FBQSxJQUFBLEtBQUEsQ0FBQSxJQUFBLENBQUEsRUFBQSxJQUFBLEdBQUEsQ0FBQSxFQUFBLElBQUEsR0FBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLEVBQUE7QUFBaEJBLElBQUFBLGNBQWdCLENBQUEsSUFBQSxDQUFoQkEsR0FBZ0IsU0FBQSxDQUFBLElBQUEsQ0FBaEJBO0FBQWdCOztBQUMvRCxNQUFJQSxjQUFjLENBQWRBLE1BQUFBLEdBQUosQ0FBQSxFQUErQjtBQUM3QixVQUFNLElBQUEsU0FBQSxDQUFOLDBEQUFNLENBQU47QUFDRDs7QUFDRCxNQUFJLENBQUMsY0FBYyxDQUFkLEtBQUEsQ0FBcUIsVUFBQSxDQUFBLEVBQUE7QUFBQSxXQUFPLE9BQUEsQ0FBQSxLQUFQLFFBQUE7QUFBMUIsR0FBSyxDQUFMLEVBQXlEO0FBQ3ZELFVBQU0sSUFBQSxTQUFBLENBQU4sMENBQU0sQ0FBTjtBQUNEOztBQUVELE1BQU1DLFNBQVMsR0FBR0QsY0FBYyxDQUFkQSxJQUFBQSxDQUFsQixPQUFrQkEsQ0FBbEI7O0FBRUEsTUFBTUUsU0FBUyxHQUFHLFNBQUEsMEJBQUEsQ0FBQSxLQUFBLEVBQUEsUUFBQSxFQUFBLGFBQUEsRUFBNkU7QUFDN0YsUUFBTUUsVUFBVSxHQUFHLFNBQWJBLFVBQWEsQ0FBQSxLQUFBLEVBQUEsSUFBQSxFQUFBO0FBQUEsYUFBa0JDLEtBQUssSUFBSUMsS0FBSyxDQUFMQSxJQUFLLENBQUxBLEdBQUFBLENBQUFBLEdBQTNCLENBQXVCLENBQXZCO0FBQW5CLEtBQUE7O0FBRUEsUUFBTUMsa0JBQWtCLEdBQUdQLGNBQWMsQ0FBZEEsTUFBQUEsQ0FBQUEsVUFBQUEsRUFBM0IsQ0FBMkJBLENBQTNCOztBQUNBLFFBQUlPLGtCQUFrQixHQUF0QixDQUFBLEVBQTRCO0FBQzFCLGFBQU8sSUFBQSxLQUFBLENBQUEsS0FBQSxNQUFBLENBQUEsYUFBQSxFQUFBLDZEQUFBLEVBQUEsTUFBQSxDQUFQLFNBQU8sQ0FBQSxDQUFQO0FBQ0Q7O0FBTjRGLFNBQUEsSUFBQSxLQUFBLEdBQUEsU0FBQSxDQUFBLE1BQUEsRUFBTkosSUFBTSxHQUFBLElBQUEsS0FBQSxDQUFBLEtBQUEsR0FBQSxDQUFBLEdBQUEsS0FBQSxHQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsRUFBQSxLQUFBLEdBQUEsQ0FBQSxFQUFBLEtBQUEsR0FBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEVBQUE7QUFBTkEsTUFBQUEsSUFBTSxDQUFBLEtBQUEsR0FBQSxDQUFBLENBQU5BLEdBQU0sU0FBQSxDQUFBLEtBQUEsQ0FBTkE7QUFBTTs7QUFPN0YsV0FBT0ssVUFBQUEsQ0FBQUEsSUFBQUEsQ0FBQUEsS0FBQUEsQ0FBQUEsS0FBQUEsQ0FBQUEsRUFBQUEsQ0FBQUEsS0FBQUEsRUFBQUEsUUFBQUEsRUFBQUEsYUFBQUEsRUFBQUEsTUFBQUEsQ0FBUCxJQUFPQSxDQUFBQSxDQUFQO0FBUEYsR0FBQTs7QUFVQU4sRUFBQUEsU0FBUyxDQUFUQSxVQUFBQSxHQUF1QixTQUFBLGtDQUFBLENBQUEsS0FBQSxFQUFBLFFBQUEsRUFBQSxhQUFBLEVBS3JCO0FBQ0EsUUFBTUUsVUFBVSxHQUFHLFNBQWJBLFVBQWEsQ0FBQSxLQUFBLEVBQUEsSUFBQSxFQUFBO0FBQUEsYUFBa0JDLEtBQUssSUFBSUMsS0FBSyxDQUFMQSxJQUFLLENBQUxBLEdBQUFBLENBQUFBLEdBQTNCLENBQXVCLENBQXZCO0FBQW5CLEtBQUE7O0FBRUEsUUFBTUMsa0JBQWtCLEdBQUdQLGNBQWMsQ0FBZEEsTUFBQUEsQ0FBQUEsVUFBQUEsRUFBM0IsQ0FBMkJBLENBQTNCOztBQUNBLFFBQUlPLGtCQUFrQixHQUF0QixDQUFBLEVBQTRCO0FBQzFCLGFBQU8sSUFBQSxLQUFBLENBQUEsS0FBQSxNQUFBLENBQUEsYUFBQSxFQUFBLDZEQUFBLEVBQUEsTUFBQSxDQUFQLFNBQU8sQ0FBQSxDQUFQO0FBQ0Q7O0FBTkQsU0FBQSxJQUFBLEtBQUEsR0FBQSxTQUFBLENBQUEsTUFBQSxFQURHSixJQUNILEdBQUEsSUFBQSxLQUFBLENBQUEsS0FBQSxHQUFBLENBQUEsR0FBQSxLQUFBLEdBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQSxFQUFBLEtBQUEsR0FBQSxDQUFBLEVBQUEsS0FBQSxHQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsRUFBQTtBQURHQSxNQUFBQSxJQUNILENBQUEsS0FBQSxHQUFBLENBQUEsQ0FER0EsR0FDSCxTQUFBLENBQUEsS0FBQSxDQURHQTtBQUNIOztBQU9BLFdBQU9LLFVBQUFBLENBQUFBLElBQUFBLENBQUFBLFVBQUFBLENBQUFBLEtBQUFBLENBQUFBLFVBQUFBLENBQUFBLElBQUFBLEVBQUFBLENBQUFBLEtBQUFBLEVBQUFBLFFBQUFBLEVBQUFBLGFBQUFBLEVBQUFBLE1BQUFBLENBQVAsSUFBT0EsQ0FBQUEsQ0FBUDtBQVpGTixHQUFBQTs7QUFlQSxTQUFPLENBQUEsR0FBQSxjQUFBLENBQUEsU0FBQSxDQUFBLEVBQUEsU0FBQSxFQUFBLCtCQUFBLE1BQUEsQ0FBQSxTQUFBLENBQUEsRUFBUCxjQUFPLENBQVA7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGJvb2wgfSBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB3cmFwVmFsaWRhdG9yIGZyb20gJy4vaGVscGVycy93cmFwVmFsaWRhdG9yJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbXV0dWFsbHlFeGNsdXNpdmVUcnVlKC4uLmV4Y2x1c2l2ZVByb3BzKSB7XG4gIGlmIChleGNsdXNpdmVQcm9wcy5sZW5ndGggPCAxKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYXQgbGVhc3Qgb25lIHByb3AgdGhhdCBpcyBtdXR1YWxseSBleGNsdXNpdmUgaXMgcmVxdWlyZWQnKTtcbiAgfVxuICBpZiAoIWV4Y2x1c2l2ZVByb3BzLmV2ZXJ5KCh4KSA9PiB0eXBlb2YgeCA9PT0gJ3N0cmluZycpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYWxsIGV4Y2x1c2l2ZSB0cnVlIHByb3BzIG11c3QgYmUgc3RyaW5ncycpO1xuICB9XG5cbiAgY29uc3QgcHJvcHNMaXN0ID0gZXhjbHVzaXZlUHJvcHMuam9pbignLCBvciAnKTtcblxuICBjb25zdCB2YWxpZGF0b3IgPSBmdW5jdGlvbiBtdXR1YWxseUV4Y2x1c2l2ZVRydWVQcm9wcyhwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIC4uLnJlc3QpIHtcbiAgICBjb25zdCBjb3VudFByb3BzID0gKGNvdW50LCBwcm9wKSA9PiAoY291bnQgKyAocHJvcHNbcHJvcF0gPyAxIDogMCkpO1xuXG4gICAgY29uc3QgZXhjbHVzaXZlUHJvcENvdW50ID0gZXhjbHVzaXZlUHJvcHMucmVkdWNlKGNvdW50UHJvcHMsIDApO1xuICAgIGlmIChleGNsdXNpdmVQcm9wQ291bnQgPiAxKSB7XG4gICAgICByZXR1cm4gbmV3IEVycm9yKGBBICR7Y29tcG9uZW50TmFtZX0gY2Fubm90IGhhdmUgbW9yZSB0aGFuIG9uZSBvZiB0aGVzZSBib29sZWFuIHByb3BzIGJlIHRydWU6ICR7cHJvcHNMaXN0fWApO1xuICAgIH1cbiAgICByZXR1cm4gYm9vbChwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIC4uLnJlc3QpO1xuICB9O1xuXG4gIHZhbGlkYXRvci5pc1JlcXVpcmVkID0gZnVuY3Rpb24gbXV0dWFsbHlFeGNsdXNpdmVUcnVlUHJvcHNSZXF1aXJlZChcbiAgICBwcm9wcyxcbiAgICBwcm9wTmFtZSxcbiAgICBjb21wb25lbnROYW1lLFxuICAgIC4uLnJlc3RcbiAgKSB7XG4gICAgY29uc3QgY291bnRQcm9wcyA9IChjb3VudCwgcHJvcCkgPT4gKGNvdW50ICsgKHByb3BzW3Byb3BdID8gMSA6IDApKTtcblxuICAgIGNvbnN0IGV4Y2x1c2l2ZVByb3BDb3VudCA9IGV4Y2x1c2l2ZVByb3BzLnJlZHVjZShjb3VudFByb3BzLCAwKTtcbiAgICBpZiAoZXhjbHVzaXZlUHJvcENvdW50ID4gMSkge1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcihgQSAke2NvbXBvbmVudE5hbWV9IGNhbm5vdCBoYXZlIG1vcmUgdGhhbiBvbmUgb2YgdGhlc2UgYm9vbGVhbiBwcm9wcyBiZSB0cnVlOiAke3Byb3BzTGlzdH1gKTtcbiAgICB9XG4gICAgcmV0dXJuIGJvb2wuaXNSZXF1aXJlZChwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIC4uLnJlc3QpO1xuICB9O1xuXG4gIHJldHVybiB3cmFwVmFsaWRhdG9yKHZhbGlkYXRvciwgYG11dHVhbGx5RXhjbHVzaXZlVHJ1ZVByb3BzOiAke3Byb3BzTGlzdH1gLCBleGNsdXNpdmVQcm9wcyk7XG59XG4iXX0=