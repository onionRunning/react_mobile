{"version":3,"sources":["../src/numericString.js"],"names":["validNumericChars","validator","rest","props","stringError","string","value","passesRegex"],"mappings":";;;;;;;AAAA,IAAA,UAAA,GAAA,OAAA,CAAA,YAAA,CAAA;;AACA,IAAA,cAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,yBAAA,CAAA,CAAA;;;;;;;;AAEA,IAAMA,iBAAiB,GAAvB,iDAAA;;AAEA,IAAMC,SAAS,GAAG,SAAA,aAAA,CAAA,KAAA,EAAA,QAAA,EAAA,aAAA,EAAgE;AAChF,MAAIE,KAAK,CAALA,QAAK,CAALA,IAAJ,IAAA,EAA6B;AAC3B,WAAA,IAAA;AACD;;AAH+E,OAAA,IAAA,IAAA,GAAA,SAAA,CAAA,MAAA,EAAND,IAAM,GAAA,IAAA,KAAA,CAAA,IAAA,GAAA,CAAA,GAAA,IAAA,GAAA,CAAA,GAAA,CAAA,CAAA,EAAA,IAAA,GAAA,CAAA,EAAA,IAAA,GAAA,IAAA,EAAA,IAAA,EAAA,EAAA;AAANA,IAAAA,IAAM,CAAA,IAAA,GAAA,CAAA,CAANA,GAAM,SAAA,CAAA,IAAA,CAANA;AAAM;;AAKhF,MAAME,WAAW,GAAGC,UAAAA,CAAAA,MAAAA,CAAAA,KAAAA,CAAAA,KAAAA,CAAAA,EAAAA,CAAAA,KAAAA,EAAAA,QAAAA,EAAAA,aAAAA,EAAAA,MAAAA,CAApB,IAAoBA,CAAAA,CAApB;;AACA,MAAA,WAAA,EAAiB;AACf,WAAA,WAAA;AACD;;AAED,MAAMC,KAAK,GAAGH,KAAK,CAAnB,QAAmB,CAAnB;AAEA,MAAMI,WAAW,GAAGP,iBAAiB,CAAjBA,IAAAA,CAApB,KAAoBA,CAApB;;AACA,MAAA,WAAA,EAAiB;AACf,WAAA,IAAA;AACD;;AAED,SAAO,IAAA,SAAA,CAAA,GAAA,MAAA,CAAA,aAAA,EAAA,WAAA,EAAA,MAAA,CAAA,QAAA,EAAA,cAAA,EAAA,MAAA,CAAA,KAAA,EAAP,6RAAO,CAAA,CAAP;AAjBF,CAAA;;AA0BAC,SAAS,CAATA,UAAAA,GAAuB,SAAA,qBAAA,CAAA,KAAA,EAAA,QAAA,EAAA,aAAA,EAAwE;AAC7F,MAAIE,KAAK,CAALA,QAAK,CAALA,IAAJ,IAAA,EAA6B;AAC3B,WAAO,IAAA,SAAA,CAAA,GAAA,MAAA,CAAA,aAAA,EAAA,IAAA,EAAA,MAAA,CAAA,QAAA,EAAP,cAAO,CAAA,CAAP;AACD;;AAH4F,OAAA,IAAA,KAAA,GAAA,SAAA,CAAA,MAAA,EAAND,IAAM,GAAA,IAAA,KAAA,CAAA,KAAA,GAAA,CAAA,GAAA,KAAA,GAAA,CAAA,GAAA,CAAA,CAAA,EAAA,KAAA,GAAA,CAAA,EAAA,KAAA,GAAA,KAAA,EAAA,KAAA,EAAA,EAAA;AAANA,IAAAA,IAAM,CAAA,KAAA,GAAA,CAAA,CAANA,GAAM,SAAA,CAAA,KAAA,CAANA;AAAM;;AAI7F,SAAOD,SAAS,CAATA,KAAAA,CAAAA,KAAAA,CAAAA,EAAAA,CAAAA,KAAAA,EAAAA,QAAAA,EAAAA,aAAAA,EAAAA,MAAAA,CAAP,IAAOA,CAAAA,CAAP;AAJFA,CAAAA;;eAOe,SAAA,QAAA,GAAA;AAAA,SAAM,CAAA,GAAA,cAAA,CAAA,SAAA,CAAA,EAAA,SAAA,EAAN,eAAM,CAAN","sourcesContent":["import { string } from 'prop-types';\nimport wrapValidator from './helpers/wrapValidator';\n\nconst validNumericChars = /^[-+]?(?:[1-9][0-9]*(?:\\.[0-9]+)?|0|0\\.[0-9]+)$/;\n\nconst validator = function numericString(props, propName, componentName, ...rest) {\n  if (props[propName] == null) {\n    return null;\n  }\n\n  const stringError = string(props, propName, componentName, ...rest);\n  if (stringError) {\n    return stringError;\n  }\n\n  const value = props[propName];\n\n  const passesRegex = validNumericChars.test(value);\n  if (passesRegex) {\n    return null;\n  }\n\n  return new TypeError(`${componentName}: prop \"${propName}\" (value \"${value}\") must be a numeric string:\n    - starting with an optional + or -\n    - that does not have a leading zero\n    - with an optional decimal part (that contains only one decimal point, if present)\n    - that otherwise only contains digits (0-9)\n    - not +-NaN, or +-Infinity\n  `);\n};\n\nvalidator.isRequired = function numericStringRequired(props, propName, componentName, ...rest) {\n  if (props[propName] == null) {\n    return new TypeError(`${componentName}: ${propName} is required`);\n  }\n  return validator(props, propName, componentName, ...rest);\n};\n\nexport default () => wrapValidator(validator, 'numericString');\n"]}